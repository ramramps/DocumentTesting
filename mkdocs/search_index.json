{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/", 
            "text": "CustomNodeDefinition\n\n\nCustomNodeDefinition\n\n\nCompiler definition of a Custom Node. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nIsProxy\n\n\nIs this CustomNodeDefinition properly loaded? \n\n\nstability=1\n\n\nFunctionName\n\n\nFunction name. \n\n\nstability=1\n\n\nFunctionId\n\n\nFunction unique ID. \n\n\nstability=1\n\n\nDisplayParameters\n\n\nUser-friendly parameters \n\n\nstability=1\n\n\nParameters\n\n\nFunction parameters. \n\n\nstability=1\n\n\nReturnKeys\n\n\nIf the function returns a dictionary, this specifies all keys in that dictionary. \n\n\nstability=1\n\n\nFunctionBody\n\n\nNodeModels making up the body of the custom node. \n\n\nstability=1\n\n\nOutputNodes\n\n\nIdentifiers associated with the outputs of the custom node. \n\n\nstability=1\n\n\nDisplayName\n\n\nUser friendly name on UI. \n\n\nstability=1\n\n\nReturnType\n\n\nReturn type. \n\n\nstability=1\n\n\nMangledName\n\n\nName to create custom node \n\n\nstability=1\n\n\nEvents:", 
            "title": "CustomNodeDefinition"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/#customnodedefinition", 
            "text": "", 
            "title": "CustomNodeDefinition"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/#customnodedefinition_1", 
            "text": "Compiler definition of a Custom Node.", 
            "title": "CustomNodeDefinition"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/#properties", 
            "text": "IsProxy  Is this CustomNodeDefinition properly loaded?   stability=1  FunctionName  Function name.   stability=1  FunctionId  Function unique ID.   stability=1  DisplayParameters  User-friendly parameters   stability=1  Parameters  Function parameters.   stability=1  ReturnKeys  If the function returns a dictionary, this specifies all keys in that dictionary.   stability=1  FunctionBody  NodeModels making up the body of the custom node.   stability=1  OutputNodes  Identifiers associated with the outputs of the custom node.   stability=1  DisplayName  User friendly name on UI.   stability=1  ReturnType  Return type.   stability=1  MangledName  Name to create custom node", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo/CustomNodeDefinition/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/CustomNodeInfo/", 
            "text": "CustomNodeInfo\n\n\nCustomNodeInfo\n\n\nBasic information about a custom node. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "CustomNodeInfo"
        }, 
        {
            "location": "/Dynamo/CustomNodeInfo/#customnodeinfo", 
            "text": "", 
            "title": "CustomNodeInfo"
        }, 
        {
            "location": "/Dynamo/CustomNodeInfo/#customnodeinfo_1", 
            "text": "Basic information about a custom node.", 
            "title": "CustomNodeInfo"
        }, 
        {
            "location": "/Dynamo/CustomNodeInfo/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/CustomNodeInfo/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/CustomNodeInfo/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackage/", 
            "text": "DefaultRenderPackage\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DefaultRenderPackage"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackage/#defaultrenderpackage", 
            "text": "", 
            "title": "DefaultRenderPackage"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackage/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackage/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackage/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackageFactory/", 
            "text": "DefaultRenderPackageFactory\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DefaultRenderPackageFactory"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackageFactory/#defaultrenderpackagefactory", 
            "text": "", 
            "title": "DefaultRenderPackageFactory"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackageFactory/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackageFactory/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/DefaultRenderPackageFactory/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/DynamoLogger/", 
            "text": "DynamoLogger\n\n\n\n\nMethods:\n\n\nDynamo.DynamoLogger.Log(String message)\n\n\nLog a message \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.DynamoLogger.Log(Exception e)\n\n\nLog an exception \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ne:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.DynamoLogger.Log(String tag,String data)\n\n\nLog some data with an associated tag \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntag:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ndata:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.DynamoLogger.Dispose()\n\n\nDispose of the logger and finish logging. \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DynamoLogger"
        }, 
        {
            "location": "/Dynamo/DynamoLogger/#dynamologger", 
            "text": "", 
            "title": "DynamoLogger"
        }, 
        {
            "location": "/Dynamo/DynamoLogger/#methods", 
            "text": "Dynamo.DynamoLogger.Log(String message)  Log a message      Name  Description      message:      stability=1  Dynamo.DynamoLogger.Log(Exception e)  Log an exception      Name  Description      e:      stability=1  Dynamo.DynamoLogger.Log(String tag,String data)  Log some data with an associated tag      Name  Description      tag:     Name  Description    -----  ------    data:      stability=1  Dynamo.DynamoLogger.Dispose()  Dispose of the logger and finish logging.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/DynamoLogger/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo/DynamoLogger/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/DynamoLogger/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/LogEventArgs/", 
            "text": "LogEventArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nMessage\n\n\nThe message to be logged. \n\n\nstability=1\n\n\nLevel\n\n\nThe log level at which to log the message. \n\n\nstability=1\n\n\nEvents:", 
            "title": "LogEventArgs"
        }, 
        {
            "location": "/Dynamo/LogEventArgs/#logeventargs", 
            "text": "", 
            "title": "LogEventArgs"
        }, 
        {
            "location": "/Dynamo/LogEventArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/LogEventArgs/#properties", 
            "text": "Message  The message to be logged.   stability=1  Level  The log level at which to log the message.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/LogEventArgs/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo/LogEventArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/LogEventHandler/", 
            "text": "LogEventHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "LogEventHandler"
        }, 
        {
            "location": "/Dynamo/LogEventHandler/#logeventhandler", 
            "text": "", 
            "title": "LogEventHandler"
        }, 
        {
            "location": "/Dynamo/LogEventHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/LogEventHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/LogEventHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/LogLevel/", 
            "text": "LogLevel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "LogLevel"
        }, 
        {
            "location": "/Dynamo/LogLevel/#loglevel", 
            "text": "", 
            "title": "LogLevel"
        }, 
        {
            "location": "/Dynamo/LogLevel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/LogLevel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/LogLevel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/", 
            "text": "PreferenceSettings\n\n\nPreferenceSettings\n\n\nPreferenceSettings is a class for GUI to persist certain settings. Upon running of the GUI, those settings that are persistent will be loaded from a XML file from DYNAMO_SETTINGS_FILE. When GUI is closed, the settings into the XML file. \n\n\n\n\nMethods:\n\n\nDynamo.PreferenceSettings.Save(String filePath)\n\n\nSave PreferenceSettings in XML File Path if possible, else return false \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilePath:\n\n\nPath of the XML File\n\n\n\n\n\n\nReturns: Whether file is saved or error occurred.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.PreferenceSettings.SaveInternal(String preferenceFilePath)\n\n\nSave PreferenceSettings in a default directory when no path is specified. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npreferenceFilePath:\n\n\nThe file path to save preference settings to. If this parameter is null or empty string, preference settings will be saved to the default path.\n\n\n\n\n\n\nReturns: Whether file is saved or error occurred.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.PreferenceSettings.Load(String filePath)\n\n\nReturn PreferenceSettings from XML path if possible, else return PreferenceSettings with default values \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilePath:\n\n\nPath of the XML File\n\n\n\n\n\n\nReturns:  Stored PreferenceSettings from xml file or Default PreferenceSettings if xml file is not found.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nLibraryWidth\n\n\nThe width of the library pane. \n\n\nstability=1\n\n\nConsoleHeight\n\n\nThe height of the console display. \n\n\nstability=1\n\n\nShowConnector\n\n\nShould connectors be visible? \n\n\nstability=1\n\n\nConnectorType\n\n\nThe types of connector: Bezier or Polyline. \n\n\nstability=1\n\n\nIsBackgroundPreviewActive\n\n\nShould the background 3D preview be shown? \n\n\nstability=1\n\n\nNumberFormat\n\n\nThe decimal precision used to display numbers. \n\n\nstability=1\n\n\nMaxNumRecentFiles\n\n\nThe maximum number of recent file paths to be saved. \n\n\nstability=1\n\n\nRecentFiles\n\n\nA list of recently opened file paths. \n\n\nstability=1\n\n\nBackupFiles\n\n\nA list of backup file paths. \n\n\nstability=1\n\n\nCustomPackageFolders\n\n\nA list of folders containing zero-touch nodes and custom nodes. \n\n\nstability=1\n\n\nPackageDirectoriesToUninstall\n\n\nA list of packages used by the Package Manager to determine which packages are marked for deletion. \n\n\nstability=1\n\n\nWindowX\n\n\nThe last X coordinate of the Dynamo window. \n\n\nstability=1\n\n\nWindowY\n\n\nThe last Y coordinate of the Dynamo window. \n\n\nstability=1\n\n\nWindowW\n\n\nThe last width of the Dynamo window. \n\n\nstability=1\n\n\nWindowH\n\n\nThe last height of the Dynamo window. \n\n\nstability=1\n\n\nUseHardwareAcceleration\n\n\nShould Dynamo use hardware acceleration if it is supported? \n\n\nstability=1\n\n\nBackupInterval\n\n\nThis defines how long (in milliseconds) will the graph be automatically saved. \n\n\nstability=1\n\n\nBackupFilesCount\n\n\nThis defines how many files will be backed up. \n\n\nstability=1\n\n\nPackageDownloadTouAccepted\n\n\nIndicates if the user has accepted the terms of use for downloading packages from package manager. \n\n\nstability=1\n\n\nShowEdges\n\n\nIndicates whether surface and solid edges will be rendered. \n\n\nstability=1\n\n\nEvents:", 
            "title": "PreferenceSettings"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#preferencesettings", 
            "text": "", 
            "title": "PreferenceSettings"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#preferencesettings_1", 
            "text": "PreferenceSettings is a class for GUI to persist certain settings. Upon running of the GUI, those settings that are persistent will be loaded from a XML file from DYNAMO_SETTINGS_FILE. When GUI is closed, the settings into the XML file.", 
            "title": "PreferenceSettings"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#methods", 
            "text": "Dynamo.PreferenceSettings.Save(String filePath)  Save PreferenceSettings in XML File Path if possible, else return false      Name  Description      filePath:  Path of the XML File    Returns: Whether file is saved or error occurred.      stability=1  Dynamo.PreferenceSettings.SaveInternal(String preferenceFilePath)  Save PreferenceSettings in a default directory when no path is specified.      Name  Description      preferenceFilePath:  The file path to save preference settings to. If this parameter is null or empty string, preference settings will be saved to the default path.    Returns: Whether file is saved or error occurred.      stability=1  Dynamo.PreferenceSettings.Load(String filePath)  Return PreferenceSettings from XML path if possible, else return PreferenceSettings with default values      Name  Description      filePath:  Path of the XML File    Returns:  Stored PreferenceSettings from xml file or Default PreferenceSettings if xml file is not found.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#properties", 
            "text": "LibraryWidth  The width of the library pane.   stability=1  ConsoleHeight  The height of the console display.   stability=1  ShowConnector  Should connectors be visible?   stability=1  ConnectorType  The types of connector: Bezier or Polyline.   stability=1  IsBackgroundPreviewActive  Should the background 3D preview be shown?   stability=1  NumberFormat  The decimal precision used to display numbers.   stability=1  MaxNumRecentFiles  The maximum number of recent file paths to be saved.   stability=1  RecentFiles  A list of recently opened file paths.   stability=1  BackupFiles  A list of backup file paths.   stability=1  CustomPackageFolders  A list of folders containing zero-touch nodes and custom nodes.   stability=1  PackageDirectoriesToUninstall  A list of packages used by the Package Manager to determine which packages are marked for deletion.   stability=1  WindowX  The last X coordinate of the Dynamo window.   stability=1  WindowY  The last Y coordinate of the Dynamo window.   stability=1  WindowW  The last width of the Dynamo window.   stability=1  WindowH  The last height of the Dynamo window.   stability=1  UseHardwareAcceleration  Should Dynamo use hardware acceleration if it is supported?   stability=1  BackupInterval  This defines how long (in milliseconds) will the graph be automatically saved.   stability=1  BackupFilesCount  This defines how many files will be backed up.   stability=1  PackageDownloadTouAccepted  Indicates if the user has accepted the terms of use for downloading packages from package manager.   stability=1  ShowEdges  Indicates whether surface and solid edges will be rendered.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo/PreferenceSettings/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo/WarningLevel/", 
            "text": "WarningLevel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "WarningLevel"
        }, 
        {
            "location": "/Dynamo/WarningLevel/#warninglevel", 
            "text": "", 
            "title": "WarningLevel"
        }, 
        {
            "location": "/Dynamo/WarningLevel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo/WarningLevel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo/WarningLevel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Annotations/NotifyPropertyChangedInvocatorAttribute/", 
            "text": "NotifyPropertyChangedInvocatorAttribute\n\n\nNotifyPropertyChangedInvocatorAttribute\n\n\nIndicates that the method is contained in a type that implements [[|T:System.ComponentModel.INotifyPropertyChanged]] interface and this method is used to notify that some property value changed \n\n\n\n\nThe method should be non-static and conform to one of the supported signatures: \n\n\n\n\nC# code\n\n\n```c#\n    public class Foo : INotifyPropertyChanged {\n      public event PropertyChangedEventHandler PropertyChanged;\n      [NotifyPropertyChangedInvocator]\n      protected virtual void NotifyChanged(string propertyName) { ... }\n\n\n  private string _name;\n  public string Name {\n    get { return _name; }\n    set { _name = value; NotifyChanged(\"LastName\"); /* Warning */ }\n  }\n}\n\nExamples of generated notifications:\nNotifyChanged(\"Property\")NotifyChanged(() =\n Property)NotifyChanged((VM x) =\n x.Property)SetProperty(ref myField, value, \"Property\")\n\n\n\n```\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NotifyPropertyChangedInvocatorAttribute"
        }, 
        {
            "location": "/Dynamo_Annotations/NotifyPropertyChangedInvocatorAttribute/#notifypropertychangedinvocatorattribute", 
            "text": "", 
            "title": "NotifyPropertyChangedInvocatorAttribute"
        }, 
        {
            "location": "/Dynamo_Annotations/NotifyPropertyChangedInvocatorAttribute/#notifypropertychangedinvocatorattribute_1", 
            "text": "Indicates that the method is contained in a type that implements [[|T:System.ComponentModel.INotifyPropertyChanged]] interface and this method is used to notify that some property value changed    The method should be non-static and conform to one of the supported signatures:    C# code  ```c#\n    public class Foo : INotifyPropertyChanged {\n      public event PropertyChangedEventHandler PropertyChanged;\n      [NotifyPropertyChangedInvocator]\n      protected virtual void NotifyChanged(string propertyName) { ... }    private string _name;\n  public string Name {\n    get { return _name; }\n    set { _name = value; NotifyChanged(\"LastName\"); /* Warning */ }\n  }\n}\n\nExamples of generated notifications:\nNotifyChanged(\"Property\")NotifyChanged(() =  Property)NotifyChanged((VM x) =  x.Property)SetProperty(ref myField, value, \"Property\")  ```", 
            "title": "NotifyPropertyChangedInvocatorAttribute"
        }, 
        {
            "location": "/Dynamo_Annotations/NotifyPropertyChangedInvocatorAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Annotations/NotifyPropertyChangedInvocatorAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Annotations/NotifyPropertyChangedInvocatorAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/", 
            "text": "AuthenticationManager\n\n\n\n\nMethods:\n\n\nDynamo.Core.AuthenticationManager.ToggleLoginState()\n\n\nToggle current login state \n\n\nstability=1\n\n\nDynamo.Core.AuthenticationManager.CanToggleLoginState()\n\n\nCheck if able to toggle login state \n\n\nstability=1\n\n\nProperties:\n\n\nHasAuthProvider\n\n\nDetermines if the this.client has login capabilities \n\n\nstability=1\n\n\nLoginState\n\n\nSpecifies whether the user is logged in or not. \n\n\nstability=1\n\n\nUsername\n\n\nThe username of the current user, if logged in. Otherwise null \n\n\nstability=1\n\n\nAuthProvider\n\n\nCurrent IAuthProvider \n\n\nstability=1\n\n\nEvents:", 
            "title": "AuthenticationManager"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/#authenticationmanager", 
            "text": "", 
            "title": "AuthenticationManager"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/#methods", 
            "text": "Dynamo.Core.AuthenticationManager.ToggleLoginState()  Toggle current login state   stability=1  Dynamo.Core.AuthenticationManager.CanToggleLoginState()  Check if able to toggle login state", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/#properties", 
            "text": "HasAuthProvider  Determines if the this.client has login capabilities   stability=1  LoginState  Specifies whether the user is logged in or not.   stability=1  Username  The username of the current user, if logged in. Otherwise null   stability=1  AuthProvider  Current IAuthProvider", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/AuthenticationManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/Context/", 
            "text": "Context\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Context"
        }, 
        {
            "location": "/Dynamo_Core/Context/#context", 
            "text": "", 
            "title": "Context"
        }, 
        {
            "location": "/Dynamo_Core/Context/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/Context/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/Context/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/CrashPromptArgs/", 
            "text": "CrashPromptArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "CrashPromptArgs"
        }, 
        {
            "location": "/Dynamo_Core/CrashPromptArgs/#crashpromptargs", 
            "text": "", 
            "title": "CrashPromptArgs"
        }, 
        {
            "location": "/Dynamo_Core/CrashPromptArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/CrashPromptArgs/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/CrashPromptArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/", 
            "text": "CustomNodeManager\n\n\nCustomNodeManager\n\n\nManages instantiation of custom nodes. All custom nodes known to Dynamo should be stored with this type. This object implements late initialization of custom nodes by providing a single interface to initialize custom nodes. \n\n\n\n\nMethods:\n\n\nDynamo.Core.CustomNodeManager.GetWorkspaceById(Guid customNodeId)\n\n\nGets custom node workspace by a specified custom node ID \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncustomNodeId:\n\n\nCustom node ID of a requested workspace\n\n\n\n\n\n\nReturns: Custom node workspace by a specified ID\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.CreateCustomNodeInstance(Guid id,String nickname,Boolean isTestMode)\n\n\nCreates a new Custom Node Instance. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid:\n\n\nIdentifier referring to a custom node definition.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nnickname:\n\n\nNickname for the custom node to be instantiated, used for error recovery if the given id could not be found.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisTestMode:\n\n\nFlag specifying whether or not this should operate in \"test mode\".\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.GuidFromPath(String path)\n\n\nGet a function id from a guid assuming that the file is already loaded. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.Remove(Guid guid)\n\n\nAttempts to remove all traces of a particular custom node from Dynamo, assuming the node is not in a loaded workspace. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nguid:\n\n\nCustom node identifier.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.Uninitialize(Guid guid)\n\n\nUninitialized a custom node. The information for the node is still retained, but the next time the node is queried for it's workspace / definition / an instace it will be re-initialized from disk. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nguid:\n\n\nCustom node identifier.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.AddUninitializedCustomNodesInPath(String path,Boolean isTestMode,Boolean isPackageMember)\n\n\nScans the given path for custom node files, retaining their information in the manager for later potential initialization. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath:\n\n\nPath on disk to scan for custom nodes.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisTestMode:\n\n\nFlag specifying whether or not this should operate in \"test mode\".\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisPackageMember:\n\n\nIndicates whether custom node comes from package or not.\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.Contains(Guid guid)\n\n\nTells whether the custom node's unique identifier is inside of the manager (initialized or not) \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nguid:\n\n\nThe FunctionId\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.Contains(String name)\n\n\nTells whether the custom node's name is inside of the manager (initialized or not) \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname:\n\n\nThe name of the custom node.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.IsInitialized(String name)\n\n\nTells whether the custom node is initialized in the manager \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname:\n\n\nThe name of the node\n\n\n\n\n\n\nReturns: The name of the\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.CustomNodeManager.IsInitialized(Guid guid)\n\n\nTells whether the custom node is initialized in the manager \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nguid:\n\n\nWhether the definition is stored with the manager.\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nLoadedDefinitions\n\n\nCustomNodeDefinitions for all loaded custom nodes, in load order. \n\n\nstability=1\n\n\nLoadedWorkspaces\n\n\nAll loaded custom node workspaces. \n\n\nstability=1\n\n\nEvents:\n\n\nDefinitionUpdated\n\n\nAn event that is fired when a definition is updated \n\n\nstability=1\n\n\nInfoUpdated\n\n\nAn event that is fired when new or updated info is available for a custom node. \n\n\nstability=1\n\n\nCustomNodeRemoved\n\n\nAn event that is fired when a custom node is removed from Dynamo. \n\n\nstability=1", 
            "title": "CustomNodeManager"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#customnodemanager", 
            "text": "", 
            "title": "CustomNodeManager"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#customnodemanager_1", 
            "text": "Manages instantiation of custom nodes. All custom nodes known to Dynamo should be stored with this type. This object implements late initialization of custom nodes by providing a single interface to initialize custom nodes.", 
            "title": "CustomNodeManager"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#methods", 
            "text": "Dynamo.Core.CustomNodeManager.GetWorkspaceById(Guid customNodeId)  Gets custom node workspace by a specified custom node ID      Name  Description      customNodeId:  Custom node ID of a requested workspace    Returns: Custom node workspace by a specified ID      stability=1  Dynamo.Core.CustomNodeManager.CreateCustomNodeInstance(Guid id,String nickname,Boolean isTestMode)  Creates a new Custom Node Instance.      Name  Description      id:  Identifier referring to a custom node definition.    Name  Description    -----  ------    nickname:  Nickname for the custom node to be instantiated, used for error recovery if the given id could not be found.    Name  Description    -----  ------    isTestMode:  Flag specifying whether or not this should operate in \"test mode\".     stability=1  Dynamo.Core.CustomNodeManager.GuidFromPath(String path)  Get a function id from a guid assuming that the file is already loaded.      Name  Description      path:     Returns:      stability=1  Dynamo.Core.CustomNodeManager.Remove(Guid guid)  Attempts to remove all traces of a particular custom node from Dynamo, assuming the node is not in a loaded workspace.      Name  Description      guid:  Custom node identifier.     stability=1  Dynamo.Core.CustomNodeManager.Uninitialize(Guid guid)  Uninitialized a custom node. The information for the node is still retained, but the next time the node is queried for it's workspace / definition / an instace it will be re-initialized from disk.      Name  Description      guid:  Custom node identifier.     stability=1  Dynamo.Core.CustomNodeManager.AddUninitializedCustomNodesInPath(String path,Boolean isTestMode,Boolean isPackageMember)  Scans the given path for custom node files, retaining their information in the manager for later potential initialization.      Name  Description      path:  Path on disk to scan for custom nodes.    Name  Description    -----  ------    isTestMode:  Flag specifying whether or not this should operate in \"test mode\".    Name  Description    -----  ------    isPackageMember:  Indicates whether custom node comes from package or not.    Returns:      stability=1  Dynamo.Core.CustomNodeManager.Contains(Guid guid)  Tells whether the custom node's unique identifier is inside of the manager (initialized or not)      Name  Description      guid:  The FunctionId     stability=1  Dynamo.Core.CustomNodeManager.Contains(String name)  Tells whether the custom node's name is inside of the manager (initialized or not)      Name  Description      name:  The name of the custom node.     stability=1  Dynamo.Core.CustomNodeManager.IsInitialized(String name)  Tells whether the custom node is initialized in the manager      Name  Description      name:  The name of the node    Returns: The name of the      stability=1  Dynamo.Core.CustomNodeManager.IsInitialized(Guid guid)  Tells whether the custom node is initialized in the manager      Name  Description      guid:  Whether the definition is stored with the manager.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#properties", 
            "text": "LoadedDefinitions  CustomNodeDefinitions for all loaded custom nodes, in load order.   stability=1  LoadedWorkspaces  All loaded custom node workspaces.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#events", 
            "text": "DefinitionUpdated  An event that is fired when a definition is updated   stability=1  InfoUpdated  An event that is fired when new or updated info is available for a custom node.   stability=1  CustomNodeRemoved  An event that is fired when a custom node is removed from Dynamo.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/CustomNodeManager/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/DebugSettings/", 
            "text": "DebugSettings\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nVerboseLogging\n\n\nEnable verbose logging this is a lot of data \n\n\nstability=1\n\n\nEvents:", 
            "title": "DebugSettings"
        }, 
        {
            "location": "/Dynamo_Core/DebugSettings/#debugsettings", 
            "text": "", 
            "title": "DebugSettings"
        }, 
        {
            "location": "/Dynamo_Core/DebugSettings/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/DebugSettings/#properties", 
            "text": "VerboseLogging  Enable verbose logging this is a lot of data", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/DebugSettings/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/DebugSettings/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/", 
            "text": "IUndoRedoRecorderClient\n\n\nIUndoRedoRecorderClient\n\n\nAn instance of UndoRedoRecorder is owned by an \"undo client\" object. In the context of Dynamo, the undo client is \"Workspace\". The undo recorder calls into the owning undo client in an undo/redo operation, causing the client to delete, reload or create the corresponding model. To qualify as an undo client, a class must implement this interface. \n\n\n\n\nMethods:\n\n\nDynamo.Core.IUndoRedoRecorderClient.DeleteModel(XmlElement modelData)\n\n\nUndoRedoRecorder calls this method to delete a model in the client. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelData:\n\n\nThe data representing the model to be deleted. It is important that this element contains identifiable information so that the corresponding model can be located in the client for deletion.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.IUndoRedoRecorderClient.ReloadModel(XmlElement modelData)\n\n\nUndoRedoRecorder calls this method to request the client to reload a given model by giving its data. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelData:\n\n\nThe xml data from which the corresponding model can be reloaded from.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.IUndoRedoRecorderClient.CreateModel(XmlElement modelData)\n\n\nUndoRedoRecorder calls this method to request a model to be created. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelData:\n\n\nThe xml data from which the corresponding model can be re-created from.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.IUndoRedoRecorderClient.GetModelForElement(XmlElement modelData)\n\n\nUndoRedoRecorder calls this method to retrieve the up-to-date instance of the model before any undo/redo operation modifies the model. The up-to-date information of the model is important so that an undo operation can be redone (repopulated with the up-to-date data before the undo operation happens). \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelData:\n\n\nThe xml data representing the model which UndoRedoRecorder requires for serialization purposes.\n\n\n\n\n\n\nReturns: Returns the model that modelData corresponds to.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IUndoRedoRecorderClient"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/#iundoredorecorderclient", 
            "text": "", 
            "title": "IUndoRedoRecorderClient"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/#iundoredorecorderclient_1", 
            "text": "An instance of UndoRedoRecorder is owned by an \"undo client\" object. In the context of Dynamo, the undo client is \"Workspace\". The undo recorder calls into the owning undo client in an undo/redo operation, causing the client to delete, reload or create the corresponding model. To qualify as an undo client, a class must implement this interface.", 
            "title": "IUndoRedoRecorderClient"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/#methods", 
            "text": "Dynamo.Core.IUndoRedoRecorderClient.DeleteModel(XmlElement modelData)  UndoRedoRecorder calls this method to delete a model in the client.      Name  Description      modelData:  The data representing the model to be deleted. It is important that this element contains identifiable information so that the corresponding model can be located in the client for deletion.     stability=1  Dynamo.Core.IUndoRedoRecorderClient.ReloadModel(XmlElement modelData)  UndoRedoRecorder calls this method to request the client to reload a given model by giving its data.      Name  Description      modelData:  The xml data from which the corresponding model can be reloaded from.     stability=1  Dynamo.Core.IUndoRedoRecorderClient.CreateModel(XmlElement modelData)  UndoRedoRecorder calls this method to request a model to be created.      Name  Description      modelData:  The xml data from which the corresponding model can be re-created from.     stability=1  Dynamo.Core.IUndoRedoRecorderClient.GetModelForElement(XmlElement modelData)  UndoRedoRecorder calls this method to retrieve the up-to-date instance of the model before any undo/redo operation modifies the model. The up-to-date information of the model is important so that an undo operation can be redone (repopulated with the up-to-date data before the undo operation happens).      Name  Description      modelData:  The xml data representing the model which UndoRedoRecorder requires for serialization purposes.    Returns: Returns the model that modelData corresponds to.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/IUndoRedoRecorderClient/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/NodeGraph/", 
            "text": "NodeGraph\n\n\n\n\nMethods:\n\n\nDynamo.Core.NodeGraph.LoadNodeFromXml(XmlElement elNode,\nSaveContext\n context,\nNodeFactory\n nodeFactory)\n\n\nCreates and initializes a NodeModel from its Xml representation. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nelNode:\n\n\nXmlElement for a NodeModel.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncontext:\n\n\nThe serialization context for initialization.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nnodeFactory:\n\n\nA NodeFactory, to be used to create the node.\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.NodeGraph.LoadNoteFromXml(XmlNode note)\n\n\nCreates and initializes a NoteModel from its Xml representation. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnote:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.NodeGraph.LoadGraphFromXml(XmlDocument xmlDoc,\nNodeFactory\n nodeFactory)\n\n\nLoads NodeModels, ConnectorModels, and NoteModels from an XmlDocument. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxmlDoc:\n\n\nAn XmlDocument representing a serialized Dynamo workspace.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nnodeFactory:\n\n\nA NodeFactory, used to load and instantiate nodes.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nelementResolver:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeGraph"
        }, 
        {
            "location": "/Dynamo_Core/NodeGraph/#nodegraph", 
            "text": "", 
            "title": "NodeGraph"
        }, 
        {
            "location": "/Dynamo_Core/NodeGraph/#methods", 
            "text": "Dynamo.Core.NodeGraph.LoadNodeFromXml(XmlElement elNode, SaveContext  context, NodeFactory  nodeFactory)  Creates and initializes a NodeModel from its Xml representation.      Name  Description      elNode:  XmlElement for a NodeModel.    Name  Description    -----  ------    context:  The serialization context for initialization.    Name  Description    -----  ------    nodeFactory:  A NodeFactory, to be used to create the node.    Returns:      stability=1  Dynamo.Core.NodeGraph.LoadNoteFromXml(XmlNode note)  Creates and initializes a NoteModel from its Xml representation.      Name  Description      note:     Returns:      stability=1  Dynamo.Core.NodeGraph.LoadGraphFromXml(XmlDocument xmlDoc, NodeFactory  nodeFactory)  Loads NodeModels, ConnectorModels, and NoteModels from an XmlDocument.      Name  Description      xmlDoc:  An XmlDocument representing a serialized Dynamo workspace.    Name  Description    -----  ------    nodeFactory:  A NodeFactory, used to load and instantiate nodes.    Name  Description    -----  ------    elementResolver:     Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/NodeGraph/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core/NodeGraph/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/NodeGraph/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/NotificationObject/", 
            "text": "NotificationObject\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:\n\n\nPropertyChanged\n\n\nRaised when a property on this object has a new value. \n\n\nstability=1", 
            "title": "NotificationObject"
        }, 
        {
            "location": "/Dynamo_Core/NotificationObject/#notificationobject", 
            "text": "", 
            "title": "NotificationObject"
        }, 
        {
            "location": "/Dynamo_Core/NotificationObject/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core/NotificationObject/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core/NotificationObject/#events", 
            "text": "PropertyChanged  Raised when a property on this object has a new value.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core/NotificationObject/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/", 
            "text": "AsyncTask\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nPriority\n\n\nDynamoScheduler sorts tasks base on two key factors: the priority of a task, and the relative importance between two tasks that has the same priority. During task reprioritization process, DynamoScheduler first sorts the tasks in accordance to their AsyncTask.Priority property. The resulting ordered list is then sorted again by calling AsyncTask.Compare method to determine the relative importance among tasks having the same priority. \n\n\nstability=1\n\n\nEvents:\n\n\nCompleted\n\n\nThis event is raised when the AsyncTask is completed. The event is being raised in the context of ISchedulerThread, any UI element access that is needed should be dispatched onto the UI dispatcher. \n\n\nstability=1", 
            "title": "AsyncTask"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/#asynctask", 
            "text": "", 
            "title": "AsyncTask"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/#properties", 
            "text": "Priority  DynamoScheduler sorts tasks base on two key factors: the priority of a task, and the relative importance between two tasks that has the same priority. During task reprioritization process, DynamoScheduler first sorts the tasks in accordance to their AsyncTask.Priority property. The resulting ordered list is then sorted again by calling AsyncTask.Compare method to determine the relative importance among tasks having the same priority.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/#events", 
            "text": "Completed  This event is raised when the AsyncTask is completed. The event is being raised in the context of ISchedulerThread, any UI element access that is needed should be dispatched onto the UI dispatcher.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTask/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTaskCompletedHandler/", 
            "text": "AsyncTaskCompletedHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "AsyncTaskCompletedHandler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTaskCompletedHandler/#asynctaskcompletedhandler", 
            "text": "", 
            "title": "AsyncTaskCompletedHandler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTaskCompletedHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTaskCompletedHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/AsyncTaskCompletedHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DelegateBasedAsyncTask/", 
            "text": "DelegateBasedAsyncTask\n\n\nDelegateBasedAsyncTask\n\n\nDelegateBasedAsyncTask allows for a delegate or System.Action object to be scheduled for asynchronous execution on the ISchedulerThread. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DelegateBasedAsyncTask"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DelegateBasedAsyncTask/#delegatebasedasynctask", 
            "text": "", 
            "title": "DelegateBasedAsyncTask"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DelegateBasedAsyncTask/#delegatebasedasynctask_1", 
            "text": "DelegateBasedAsyncTask allows for a delegate or System.Action object to be scheduled for asynchronous execution on the ISchedulerThread.", 
            "title": "DelegateBasedAsyncTask"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DelegateBasedAsyncTask/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DelegateBasedAsyncTask/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DelegateBasedAsyncTask/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/Disposable/", 
            "text": "Disposable\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Disposable"
        }, 
        {
            "location": "/Dynamo_Core_Threading/Disposable/#disposable", 
            "text": "", 
            "title": "Disposable"
        }, 
        {
            "location": "/Dynamo_Core_Threading/Disposable/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/Disposable/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/Disposable/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/", 
            "text": "DynamoScheduler\n\n\n\n\nMethods:\n\n\nDynamo.Core.Threading.DynamoScheduler.ScheduleForExecution(\nAsyncTask\n asyncTask)\n\n\nCallers of this method create an instance of AsyncTask derived class and call this method to schedule the task for execution. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nasyncTask:\n\n\nThe task to execute asynchronously.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.Threading.DynamoScheduler.ProcessNextTask(Boolean waitIfTaskQueueIsEmpty)\n\n\nAn ISchedulerThread implementation calls this method so scheduler starts to process the next task in the queue, if there is any. Note that this method is meant to process only one task in queue. The implementation of ISchedulerThread is free to call this method again in a fashion that matches its task fetching behavior. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwaitIfTaskQueueIsEmpty:\n\n\nThis parameter is only used if the task queue is empty at the time this method is invoked. When the task queue becomes empty, setting this to true will cause this call to block until either the next task becomes available, or when the scheduler is requested to shutdown.\n\n\n\n\n\n\nReturns: This method returns true if the task queue is not empty, or false otherwise. Note that this method returns false when scheduler begins to shutdown, even when the task queue is not empty.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nNextTimeStamp\n\n\nAsyncTask base class calls this to obtain the new time-stamp value. \n\n\nstability=1\n\n\nIsTestMode\n\n\nFlag determining whether or not the scheduler is operating in Test Mode. \n\n\nstability=1\n\n\nEvents:", 
            "title": "DynamoScheduler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/#dynamoscheduler", 
            "text": "", 
            "title": "DynamoScheduler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/#methods", 
            "text": "Dynamo.Core.Threading.DynamoScheduler.ScheduleForExecution( AsyncTask  asyncTask)  Callers of this method create an instance of AsyncTask derived class and call this method to schedule the task for execution.      Name  Description      asyncTask:  The task to execute asynchronously.     stability=1  Dynamo.Core.Threading.DynamoScheduler.ProcessNextTask(Boolean waitIfTaskQueueIsEmpty)  An ISchedulerThread implementation calls this method so scheduler starts to process the next task in the queue, if there is any. Note that this method is meant to process only one task in queue. The implementation of ISchedulerThread is free to call this method again in a fashion that matches its task fetching behavior.      Name  Description      waitIfTaskQueueIsEmpty:  This parameter is only used if the task queue is empty at the time this method is invoked. When the task queue becomes empty, setting this to true will cause this call to block until either the next task becomes available, or when the scheduler is requested to shutdown.    Returns: This method returns true if the task queue is not empty, or false otherwise. Note that this method returns false when scheduler begins to shutdown, even when the task queue is not empty.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/#properties", 
            "text": "NextTimeStamp  AsyncTask base class calls this to obtain the new time-stamp value.   stability=1  IsTestMode  Flag determining whether or not the scheduler is operating in Test Mode.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/DynamoScheduler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/", 
            "text": "IScheduler\n\n\n\n\nMethods:\n\n\nDynamo.Core.Threading.IScheduler.ProcessNextTask(Boolean waitIfTaskQueueIsEmpty)\n\n\nAn ISchedulerThread implementation calls this method so scheduler starts to process the next task in the queue, if there is any. Note that this method is meant to process only one task in queue. The implementation of ISchedulerThread is free to call this method again in a fashion that matches its task fetching behavior. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwaitIfTaskQueueIsEmpty:\n\n\nThis parameter is only used if the task queue is empty at the time this method is invoked. When the task queue becomes empty, setting this to true will cause this call to block until either the next task becomes available, or when the scheduler is requested to shutdown.\n\n\n\n\n\n\nReturns: This method returns true if the task queue is not empty, or false otherwise. Note that this method returns false when scheduler begins to shutdown, even when the task queue is not empty.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.Threading.IScheduler.ScheduleForExecution(\nAsyncTask\n asyncTask)\n\n\nCallers of this method create an instance of AsyncTask derived class and call this method to schedule the task for execution. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nasyncTask:\n\n\nThe task to execute asynchronously.\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nNextTimeStamp\n\n\nAsyncTask base class calls this to obtain the new time-stamp value. \n\n\nstability=1\n\n\nTasks\n\n\nThe complete collection of all of the currently scheduled tasks \n\n\nstability=1\n\n\nEvents:", 
            "title": "IScheduler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/#ischeduler", 
            "text": "", 
            "title": "IScheduler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/#methods", 
            "text": "Dynamo.Core.Threading.IScheduler.ProcessNextTask(Boolean waitIfTaskQueueIsEmpty)  An ISchedulerThread implementation calls this method so scheduler starts to process the next task in the queue, if there is any. Note that this method is meant to process only one task in queue. The implementation of ISchedulerThread is free to call this method again in a fashion that matches its task fetching behavior.      Name  Description      waitIfTaskQueueIsEmpty:  This parameter is only used if the task queue is empty at the time this method is invoked. When the task queue becomes empty, setting this to true will cause this call to block until either the next task becomes available, or when the scheduler is requested to shutdown.    Returns: This method returns true if the task queue is not empty, or false otherwise. Note that this method returns false when scheduler begins to shutdown, even when the task queue is not empty.      stability=1  Dynamo.Core.Threading.IScheduler.ScheduleForExecution( AsyncTask  asyncTask)  Callers of this method create an instance of AsyncTask derived class and call this method to schedule the task for execution.      Name  Description      asyncTask:  The task to execute asynchronously.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/#properties", 
            "text": "NextTimeStamp  AsyncTask base class calls this to obtain the new time-stamp value.   stability=1  Tasks  The complete collection of all of the currently scheduled tasks", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/IScheduler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventArgs/", 
            "text": "TaskStateChangedEventArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "TaskStateChangedEventArgs"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventArgs/#taskstatechangedeventargs", 
            "text": "", 
            "title": "TaskStateChangedEventArgs"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventArgs/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventHandler/", 
            "text": "TaskStateChangedEventHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "TaskStateChangedEventHandler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventHandler/#taskstatechangedeventhandler", 
            "text": "", 
            "title": "TaskStateChangedEventHandler"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TaskStateChangedEventHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TimeStamp/", 
            "text": "TimeStamp\n\n\n\n\nMethods:\n\n\nDynamo.Core.Threading.TimeStamp.op_GreaterThan(\nTimeStamp\n timeStamp0,\nTimeStamp\n timeStamp1)\n\n\nThe public usage of time stamps should be restricted to these methods used to ensure an ordering on timestamps \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeStamp0:\n\n\nThe first time stamp in comparison.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ntimeStamp1:\n\n\nThe second time stamp in comparison.\n\n\n\n\n\n\nReturns: Return true if the first time stamp was created later than the second time steamp, or false otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Core.Threading.TimeStamp.op_LessThan(\nTimeStamp\n timeStamp0,\nTimeStamp\n timeStamp1)\n\n\nThe public usage of time stamps should be restricted to these methods used to ensure an ordering on timestamps \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeStamp0:\n\n\nThe first time stamp in comparison.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ntimeStamp1:\n\n\nThe second time stamp in comparison.\n\n\n\n\n\n\nReturns: Return true if the first time stamp was created earlier than the second time steamp, or false otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "TimeStamp"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TimeStamp/#timestamp", 
            "text": "", 
            "title": "TimeStamp"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TimeStamp/#methods", 
            "text": "Dynamo.Core.Threading.TimeStamp.op_GreaterThan( TimeStamp  timeStamp0, TimeStamp  timeStamp1)  The public usage of time stamps should be restricted to these methods used to ensure an ordering on timestamps      Name  Description      timeStamp0:  The first time stamp in comparison.    Name  Description    -----  ------    timeStamp1:  The second time stamp in comparison.    Returns: Return true if the first time stamp was created later than the second time steamp, or false otherwise.      stability=1  Dynamo.Core.Threading.TimeStamp.op_LessThan( TimeStamp  timeStamp0, TimeStamp  timeStamp1)  The public usage of time stamps should be restricted to these methods used to ensure an ordering on timestamps      Name  Description      timeStamp0:  The first time stamp in comparison.    Name  Description    -----  ------    timeStamp1:  The second time stamp in comparison.    Returns: Return true if the first time stamp was created earlier than the second time steamp, or false otherwise.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TimeStamp/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TimeStamp/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Core_Threading/TimeStamp/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuilder/", 
            "text": "AstBuilder\n\n\nAstBuilder\n\n\nAstBuilder is a factory class to create different kinds of AST nodes. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "AstBuilder"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuilder/#astbuilder", 
            "text": "", 
            "title": "AstBuilder"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuilder/#astbuilder_1", 
            "text": "AstBuilder is a factory class to create different kinds of AST nodes.", 
            "title": "AstBuilder"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuilder/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuilder/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuilder/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuiltEventHandler/", 
            "text": "AstBuiltEventHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "AstBuiltEventHandler"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuiltEventHandler/#astbuilteventhandler", 
            "text": "", 
            "title": "AstBuiltEventHandler"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuiltEventHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuiltEventHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/AstBuiltEventHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/CompilationServices/", 
            "text": "CompilationServices\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "CompilationServices"
        }, 
        {
            "location": "/Dynamo_Engine/CompilationServices/#compilationservices", 
            "text": "", 
            "title": "CompilationServices"
        }, 
        {
            "location": "/Dynamo_Engine/CompilationServices/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/CompilationServices/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/CompilationServices/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/", 
            "text": "EngineController\n\n\nEngineController\n\n\nA controller to coordinate the interactions between some DesignScript sub components like library managment, live runner and so on. \n\n\n\n\nMethods:\n\n\nDynamo.Engine.EngineController.GetFunctionGroups()\n\n\nReturn all function groups. \n\n\nstability=1\n\n\nDynamo.Engine.EngineController.ImportLibrary(String library)\n\n\nImport library. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlibrary:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.EngineController.GetMirror(String variableName)\n\n\nGet runtime mirror for variable. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvariableName:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.EngineController.GetGraphicItems(String variableName)\n\n\nGet a list of IGraphicItem of variable if it is a geometry object; otherwise returns null. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvariableName:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.EngineController.UpdateGraphImmediate(GraphSyncData graphSyncData)\n\n\nThis method is called by UpdateGraphAsyncTask in the context of ISchedulerThread to kick start an update through LiveRunner. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngraphSyncData:\n\n\nThe GraphSyncData that was generated by a prior call to ComputeSyncData at the time UpdateGraphAsyncTask was scheduled.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.EngineController.NodeDeleted(\nNodeModel\n node)\n\n\nNodeDeleted event handler. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnode:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nLiveRunnerCore\n\n\nGet DesignScript core. \n\n\nstability=1\n\n\nLiveRunnerRuntimeCore\n\n\nGet DesignScript runtime core. \n\n\nstability=1\n\n\nLibraryServices\n\n\nReturn libary service instance. \n\n\nstability=1\n\n\nIsDisposed\n\n\nA property defining whether the EngineController has been disposed or not. This is a conservative field, as there should only be one owner of a valid EngineController or not. \n\n\nstability=1\n\n\nHasPendingGraphSyncData\n\n\nReturn true if there are graph sync data in the queue waiting for being executed. \n\n\nReturns: \n\n\nstability=1\n\n\nEvents:", 
            "title": "EngineController"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#enginecontroller", 
            "text": "", 
            "title": "EngineController"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#enginecontroller_1", 
            "text": "A controller to coordinate the interactions between some DesignScript sub components like library managment, live runner and so on.", 
            "title": "EngineController"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#methods", 
            "text": "Dynamo.Engine.EngineController.GetFunctionGroups()  Return all function groups.   stability=1  Dynamo.Engine.EngineController.ImportLibrary(String library)  Import library.      Name  Description      library:      stability=1  Dynamo.Engine.EngineController.GetMirror(String variableName)  Get runtime mirror for variable.      Name  Description      variableName:     Returns:      stability=1  Dynamo.Engine.EngineController.GetGraphicItems(String variableName)  Get a list of IGraphicItem of variable if it is a geometry object; otherwise returns null.      Name  Description      variableName:     Returns:      stability=1  Dynamo.Engine.EngineController.UpdateGraphImmediate(GraphSyncData graphSyncData)  This method is called by UpdateGraphAsyncTask in the context of ISchedulerThread to kick start an update through LiveRunner.      Name  Description      graphSyncData:  The GraphSyncData that was generated by a prior call to ComputeSyncData at the time UpdateGraphAsyncTask was scheduled.     stability=1  Dynamo.Engine.EngineController.NodeDeleted( NodeModel  node)  NodeDeleted event handler.      Name  Description      node:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#properties", 
            "text": "LiveRunnerCore  Get DesignScript core.   stability=1  LiveRunnerRuntimeCore  Get DesignScript runtime core.   stability=1  LibraryServices  Return libary service instance.   stability=1  IsDisposed  A property defining whether the EngineController has been disposed or not. This is a conservative field, as there should only be one owner of a valid EngineController or not.   stability=1  HasPendingGraphSyncData  Return true if there are graph sync data in the queue waiting for being executed.   Returns:", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/EngineController/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/", 
            "text": "FunctionDescriptor\n\n\nFunctionDescriptor\n\n\nDescribe a DesignScript function in a imported library \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nAssembly\n\n\nFull path to the assembly the defined this function \n\n\nstability=1\n\n\nClassName\n\n\nClass name of this function. If the functino is global function, return String.Empty. \n\n\nstability=1\n\n\nFunctionName\n\n\nFunction name. \n\n\nstability=1\n\n\nParameters\n\n\nFunction parameters. \n\n\nstability=1\n\n\nReturnType\n\n\nFunction return type. \n\n\nstability=1\n\n\nReturnKeys\n\n\nIf the function returns a dictionary, ReturnKeys is the key collection used in returned dictionary. \n\n\nstability=1\n\n\nIsVarArg\n\n\nDoes the function accept a variable number of arguments? \n\n\nstability=1\n\n\nType\n\n\nFunction type. \n\n\nstability=1\n\n\nDescription\n\n\nA comment describing the function along with the signature \n\n\nstability=1\n\n\nReturns\n\n\nIf the XML documentation for the function includes a returns field, this parameter contains a collection of tuples of output names to descriptions. Otherwise, this list will be empty. \n\n\nstability=1\n\n\nInputParameters\n\n\nInputs for Node \n\n\nstability=1\n\n\nCategory\n\n\nThe category of this function. \n\n\nstability=1\n\n\nQualifiedName\n\n\nThe string that is used to search for this function. \n\n\nstability=1\n\n\nMangledName\n\n\nA unique name to identify a function. It is necessary when a function is overloaded. \n\n\nstability=1\n\n\nSignature\n\n\nThe full signature of the function. \n\n\nstability=1\n\n\nUserFriendlyName\n\n\nReturn a user friendly name. E.g., for operator '+' it will return 'Add' \n\n\nstability=1\n\n\nDisplayName\n\n\nQualifiedName with leading namespaces removed. \n\n\nstability=1\n\n\nIsVisibleInLibrary\n\n\nThis attribute sets, if this function is shown in library or not. \n\n\nstability=1\n\n\nCanUpdatePeriodically\n\n\nThis attribute sets whether the function enables periodic update of the workspace. \n\n\nstability=1\n\n\nEvents:", 
            "title": "FunctionDescriptor"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/#functiondescriptor", 
            "text": "", 
            "title": "FunctionDescriptor"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/#functiondescriptor_1", 
            "text": "Describe a DesignScript function in a imported library", 
            "title": "FunctionDescriptor"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/#properties", 
            "text": "Assembly  Full path to the assembly the defined this function   stability=1  ClassName  Class name of this function. If the functino is global function, return String.Empty.   stability=1  FunctionName  Function name.   stability=1  Parameters  Function parameters.   stability=1  ReturnType  Function return type.   stability=1  ReturnKeys  If the function returns a dictionary, ReturnKeys is the key collection used in returned dictionary.   stability=1  IsVarArg  Does the function accept a variable number of arguments?   stability=1  Type  Function type.   stability=1  Description  A comment describing the function along with the signature   stability=1  Returns  If the XML documentation for the function includes a returns field, this parameter contains a collection of tuples of output names to descriptions. Otherwise, this list will be empty.   stability=1  InputParameters  Inputs for Node   stability=1  Category  The category of this function.   stability=1  QualifiedName  The string that is used to search for this function.   stability=1  MangledName  A unique name to identify a function. It is necessary when a function is overloaded.   stability=1  Signature  The full signature of the function.   stability=1  UserFriendlyName  Return a user friendly name. E.g., for operator '+' it will return 'Add'   stability=1  DisplayName  QualifiedName with leading namespaces removed.   stability=1  IsVisibleInLibrary  This attribute sets, if this function is shown in library or not.   stability=1  CanUpdatePeriodically  This attribute sets whether the function enables periodic update of the workspace.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptor/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptorParams/", 
            "text": "FunctionDescriptorParams\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "FunctionDescriptorParams"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptorParams/#functiondescriptorparams", 
            "text": "", 
            "title": "FunctionDescriptorParams"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptorParams/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptorParams/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionDescriptorParams/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/", 
            "text": "FunctionGroup\n\n\nFunctionGroup\n\n\nA group of overloaded functions \n\n\n\n\nMethods:\n\n\nDynamo.Engine.FunctionGroup.AddFunctionDescriptor(\nFunctionDescriptor\n function)\n\n\nAdd a function descriptor to the group \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.FunctionGroup.GetFunctionDescriptor(String managledName)\n\n\nGet function descriptor from mangled function name \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmanagledName:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "FunctionGroup"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/#functiongroup", 
            "text": "", 
            "title": "FunctionGroup"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/#functiongroup_1", 
            "text": "A group of overloaded functions", 
            "title": "FunctionGroup"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/#methods", 
            "text": "Dynamo.Engine.FunctionGroup.AddFunctionDescriptor( FunctionDescriptor  function)  Add a function descriptor to the group      Name  Description      function:     Returns:      stability=1  Dynamo.Engine.FunctionGroup.GetFunctionDescriptor(String managledName)  Get function descriptor from mangled function name      Name  Description      managledName:     Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionGroup/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionType/", 
            "text": "FunctionType\n\n\nFunctionType\n\n\nThe type of a function. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "FunctionType"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionType/#functiontype", 
            "text": "", 
            "title": "FunctionType"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionType/#functiontype_1", 
            "text": "The type of a function.", 
            "title": "FunctionType"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionType/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionType/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/FunctionType/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/IAstNodeContainer/", 
            "text": "IAstNodeContainer\n\n\nIAstNodeContainer\n\n\nGet notification when AstBuilder starts building node and finishes building node. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IAstNodeContainer"
        }, 
        {
            "location": "/Dynamo_Engine/IAstNodeContainer/#iastnodecontainer", 
            "text": "", 
            "title": "IAstNodeContainer"
        }, 
        {
            "location": "/Dynamo_Engine/IAstNodeContainer/#iastnodecontainer_1", 
            "text": "Get notification when AstBuilder starts building node and finishes building node.", 
            "title": "IAstNodeContainer"
        }, 
        {
            "location": "/Dynamo_Engine/IAstNodeContainer/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/IAstNodeContainer/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/IAstNodeContainer/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/", 
            "text": "IFunctionDescriptor\n\n\nIFunctionDescriptor\n\n\nDescribes a function, whether imported or defined in a custom node. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nDisplayName\n\n\nName to be displayed for the function. \n\n\nstability=1\n\n\nMangledName\n\n\nAn unique name to identify a function. It is used to create a corresponding node instance \n\n\nstability=1\n\n\nReturnKeys\n\n\nReturn keys for multi-output functions. \n\n\nstability=1\n\n\nParameters\n\n\nFunction parameters \n\n\nstability=1\n\n\nFunctionName\n\n\nFunction name. \n\n\nstability=1\n\n\nReturnType\n\n\nReturn Type \n\n\nstability=1\n\n\nEvents:", 
            "title": "IFunctionDescriptor"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/#ifunctiondescriptor", 
            "text": "", 
            "title": "IFunctionDescriptor"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/#ifunctiondescriptor_1", 
            "text": "Describes a function, whether imported or defined in a custom node.", 
            "title": "IFunctionDescriptor"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/#properties", 
            "text": "DisplayName  Name to be displayed for the function.   stability=1  MangledName  An unique name to identify a function. It is used to create a corresponding node instance   stability=1  ReturnKeys  Return keys for multi-output functions.   stability=1  Parameters  Function parameters   stability=1  FunctionName  Function name.   stability=1  ReturnType  Return Type", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/IFunctionDescriptor/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/ITraceReconciliationProcessor/", 
            "text": "ITraceReconciliationProcessor\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ITraceReconciliationProcessor"
        }, 
        {
            "location": "/Dynamo_Engine/ITraceReconciliationProcessor/#itracereconciliationprocessor", 
            "text": "", 
            "title": "ITraceReconciliationProcessor"
        }, 
        {
            "location": "/Dynamo_Engine/ITraceReconciliationProcessor/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/ITraceReconciliationProcessor/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/ITraceReconciliationProcessor/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/", 
            "text": "LibraryServices\n\n\nLibraryServices\n\n\nLibraryServices is a singleton class which manages builtin libraries as well as imported libraries. It is across different sessions. \n\n\n\n\nMethods:\n\n\nDynamo.Engine.LibraryServices.UpdateLibraryCoreData()\n\n\nCopy properties from the liveCore The properties to copy are only those used by the library core \n\n\nstability=1\n\n\nDynamo.Engine.LibraryServices.GetFunctionGroups(String library)\n\n\nGet function groups from an imported library. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlibrary:\n\n\nLibrary path\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LibraryServices.GetAllFunctionGroups()\n\n\nReturn all function groups. \n\n\nstability=1\n\n\nDynamo.Engine.LibraryServices.GetFunctionDescriptor(String library,String mangledName)\n\n\nGet function descriptor from the managled function name. name. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlibrary:\n\n\nLibrary path\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nmangledName:\n\n\nMangled function name\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LibraryServices.GetFunctionDescriptor(String managledName)\n\n\nGet function descriptor from the managed function name. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmanagledName:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LibraryServices.IsLibraryLoaded(String library)\n\n\nChecks if a given library is already loaded or not. Only unique assembly names are allowed to be loaded \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlibrary:\n\n\ncan be either the full path or the assembly name\n\n\n\n\n\n\nReturns:  true even if the same library name is loaded from different paths\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LibraryServices.ImportLibrary(String library)\n\n\nImport a library (if it hasn't been imported yet). \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlibrary:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nImportedLibraries\n\n\nGet a list of imported libraries. \n\n\nstability=1\n\n\nBuiltinFunctionGroups\n\n\nGet builtin function groups. \n\n\nReturns: \n\n\nstability=1\n\n\nImportedFunctionGroups\n\n\nGet all imported function groups. \n\n\nstability=1\n\n\nEvents:", 
            "title": "LibraryServices"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#libraryservices", 
            "text": "", 
            "title": "LibraryServices"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#libraryservices_1", 
            "text": "LibraryServices is a singleton class which manages builtin libraries as well as imported libraries. It is across different sessions.", 
            "title": "LibraryServices"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#methods", 
            "text": "Dynamo.Engine.LibraryServices.UpdateLibraryCoreData()  Copy properties from the liveCore The properties to copy are only those used by the library core   stability=1  Dynamo.Engine.LibraryServices.GetFunctionGroups(String library)  Get function groups from an imported library.      Name  Description      library:  Library path    Returns:      stability=1  Dynamo.Engine.LibraryServices.GetAllFunctionGroups()  Return all function groups.   stability=1  Dynamo.Engine.LibraryServices.GetFunctionDescriptor(String library,String mangledName)  Get function descriptor from the managled function name. name.      Name  Description      library:  Library path    Name  Description    -----  ------    mangledName:  Mangled function name    Returns:      stability=1  Dynamo.Engine.LibraryServices.GetFunctionDescriptor(String managledName)  Get function descriptor from the managed function name.      Name  Description      managledName:     Returns:      stability=1  Dynamo.Engine.LibraryServices.IsLibraryLoaded(String library)  Checks if a given library is already loaded or not. Only unique assembly names are allowed to be loaded      Name  Description      library:  can be either the full path or the assembly name    Returns:  true even if the same library name is loaded from different paths      stability=1  Dynamo.Engine.LibraryServices.ImportLibrary(String library)  Import a library (if it hasn't been imported yet).      Name  Description      library:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#properties", 
            "text": "ImportedLibraries  Get a list of imported libraries.   stability=1  BuiltinFunctionGroups  Get builtin function groups.   Returns:   stability=1  ImportedFunctionGroups  Get all imported function groups.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/LibraryServices/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/LiveRunnerServices/", 
            "text": "LiveRunnerServices\n\n\n\n\nMethods:\n\n\nDynamo.Engine.LiveRunnerServices.GetMirror(String var,Boolean verboseLogging)\n\n\nTPDP \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvar:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nverboseLogging:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LiveRunnerServices.UpdateGraph(GraphSyncData graphData,Boolean verboseLogging)\n\n\nUpdate graph with graph sync data. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngraphData:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nverboseLogging:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LiveRunnerServices.PreviewGraph(GraphSyncData graphData)\n\n\nPreview graph with graph sync data. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngraphData:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.LiveRunnerServices.GetRuntimeWarnings()\n\n\nReturn runtime warnings for this run. \n\n\nReturns: \n\n\nstability=1\n\n\nDynamo.Engine.LiveRunnerServices.GetBuildWarnings()\n\n\nReturn build warnings for this run. \n\n\nReturns: \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "LiveRunnerServices"
        }, 
        {
            "location": "/Dynamo_Engine/LiveRunnerServices/#liverunnerservices", 
            "text": "", 
            "title": "LiveRunnerServices"
        }, 
        {
            "location": "/Dynamo_Engine/LiveRunnerServices/#methods", 
            "text": "Dynamo.Engine.LiveRunnerServices.GetMirror(String var,Boolean verboseLogging)  TPDP      Name  Description      var:     Name  Description    -----  ------    verboseLogging:     Returns:      stability=1  Dynamo.Engine.LiveRunnerServices.UpdateGraph(GraphSyncData graphData,Boolean verboseLogging)  Update graph with graph sync data.      Name  Description      graphData:     Name  Description    -----  ------    verboseLogging:      stability=1  Dynamo.Engine.LiveRunnerServices.PreviewGraph(GraphSyncData graphData)  Preview graph with graph sync data.      Name  Description      graphData:      stability=1  Dynamo.Engine.LiveRunnerServices.GetRuntimeWarnings()  Return runtime warnings for this run.   Returns:   stability=1  Dynamo.Engine.LiveRunnerServices.GetBuildWarnings()  Return build warnings for this run.   Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/LiveRunnerServices/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/LiveRunnerServices/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/LiveRunnerServices/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/TraceReconciliationEventArgs/", 
            "text": "TraceReconciliationEventArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nCallsiteToOrphanMap\n\n\nA list of ISerializable items. \n\n\nstability=1\n\n\nEvents:", 
            "title": "TraceReconciliationEventArgs"
        }, 
        {
            "location": "/Dynamo_Engine/TraceReconciliationEventArgs/#tracereconciliationeventargs", 
            "text": "", 
            "title": "TraceReconciliationEventArgs"
        }, 
        {
            "location": "/Dynamo_Engine/TraceReconciliationEventArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/TraceReconciliationEventArgs/#properties", 
            "text": "CallsiteToOrphanMap  A list of ISerializable items.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/TraceReconciliationEventArgs/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/TraceReconciliationEventArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/", 
            "text": "XmlDocumentationExtensions\n\n\nXmlDocumentationExtensions\n\n\nProvides extension methods for reading XML documentation from reflected members. \n\n\n\n\nMethods:\n\n\nDynamo.Engine.XmlDocumentationExtensions.GetDescription(\nTypedParameter\n parameter,XmlReader xml)\n\n\nGet a description of a parameter from the its documentation xml, using the corresponding FunctionDescriptor. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparameter:\n\n\nThe TypedParameter object corresponding to the parameter.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxml:\n\n\n\n\n\n\n\n\nReturns: The contents of the documentation description for the parameter.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.XmlDocumentationExtensions.GetSummary(\nFunctionDescriptor\n member,XmlReader xml)\n\n\nGet a summary of a method from its documentation xml, using the corresponding FunctionDescriptor object. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmember:\n\n\nThe FunctionDescriptor object corresponding to the method.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxml:\n\n\n\n\n\n\n\n\nReturns: The contents of the documentation summary tag.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.XmlDocumentationExtensions.GetSearchTags(\nFunctionDescriptor\n member,XmlReader xml)\n\n\nGet a collection of search tags for a method from its documentation xml, using the corresponding FunctionDescriptor object. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmember:\n\n\nThe FunctionDescriptor object corresponding to the method.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxml:\n\n\n\n\n\n\n\n\nReturns: A collection of search tags.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.XmlDocumentationExtensions.GetSearchTagWeights(\nFunctionDescriptor\n member,XmlReader xml)\n\n\nGet a collection of search tag weights for a method from its documentation xml, using the corresponding FunctionDescriptor object. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmember:\n\n\nThe FunctionDescriptor object corresponding to the method.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxml:\n\n\n\n\n\n\n\n\nReturns: A collection of search weights, or an empty collection if the search weights tag is emtpy.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Engine.XmlDocumentationExtensions.GetReturns(\nFunctionDescriptor\n member,XmlReader xml)\n\n\nGet a collection of return descriptions for a method from its documentation xml, using the corresponding FunctionDescriptor object. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmember:\n\n\nThe FunctionDescriptor object corresponding to the method.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxml:\n\n\n\n\n\n\n\n\nReturns: A collection of return descriptions from the documentation returns tag.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "XmlDocumentationExtensions"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/#xmldocumentationextensions", 
            "text": "", 
            "title": "XmlDocumentationExtensions"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/#xmldocumentationextensions_1", 
            "text": "Provides extension methods for reading XML documentation from reflected members.", 
            "title": "XmlDocumentationExtensions"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/#methods", 
            "text": "Dynamo.Engine.XmlDocumentationExtensions.GetDescription( TypedParameter  parameter,XmlReader xml)  Get a description of a parameter from the its documentation xml, using the corresponding FunctionDescriptor.      Name  Description      parameter:  The TypedParameter object corresponding to the parameter.    Name  Description    -----  ------    xml:     Returns: The contents of the documentation description for the parameter.      stability=1  Dynamo.Engine.XmlDocumentationExtensions.GetSummary( FunctionDescriptor  member,XmlReader xml)  Get a summary of a method from its documentation xml, using the corresponding FunctionDescriptor object.      Name  Description      member:  The FunctionDescriptor object corresponding to the method.    Name  Description    -----  ------    xml:     Returns: The contents of the documentation summary tag.      stability=1  Dynamo.Engine.XmlDocumentationExtensions.GetSearchTags( FunctionDescriptor  member,XmlReader xml)  Get a collection of search tags for a method from its documentation xml, using the corresponding FunctionDescriptor object.      Name  Description      member:  The FunctionDescriptor object corresponding to the method.    Name  Description    -----  ------    xml:     Returns: A collection of search tags.      stability=1  Dynamo.Engine.XmlDocumentationExtensions.GetSearchTagWeights( FunctionDescriptor  member,XmlReader xml)  Get a collection of search tag weights for a method from its documentation xml, using the corresponding FunctionDescriptor object.      Name  Description      member:  The FunctionDescriptor object corresponding to the method.    Name  Description    -----  ------    xml:     Returns: A collection of search weights, or an empty collection if the search weights tag is emtpy.      stability=1  Dynamo.Engine.XmlDocumentationExtensions.GetReturns( FunctionDescriptor  member,XmlReader xml)  Get a collection of return descriptions for a method from its documentation xml, using the corresponding FunctionDescriptor object.      Name  Description      member:  The FunctionDescriptor object corresponding to the method.    Name  Description    -----  ------    xml:     Returns: A collection of return descriptions from the documentation returns tag.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Engine/XmlDocumentationExtensions/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescription/", 
            "text": "EnumDescription\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "EnumDescription"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescription/#enumdescription", 
            "text": "", 
            "title": "EnumDescription"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescription/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescription/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescription/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescriptionAttribute/", 
            "text": "EnumDescriptionAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "EnumDescriptionAttribute"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescriptionAttribute/#enumdescriptionattribute", 
            "text": "", 
            "title": "EnumDescriptionAttribute"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescriptionAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescriptionAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/EnumDescriptionAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionDefinition/", 
            "text": "ExtensionDefinition\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ExtensionDefinition"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionDefinition/#extensiondefinition", 
            "text": "", 
            "title": "ExtensionDefinition"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionDefinition/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionDefinition/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionDefinition/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLibraryLoader/", 
            "text": "ExtensionLibraryLoader\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ExtensionLibraryLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLibraryLoader/#extensionlibraryloader", 
            "text": "", 
            "title": "ExtensionLibraryLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLibraryLoader/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLibraryLoader/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLibraryLoader/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLoader/", 
            "text": "ExtensionLoader\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ExtensionLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLoader/#extensionloader", 
            "text": "", 
            "title": "ExtensionLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLoader/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLoader/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionLoader/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionManager/", 
            "text": "ExtensionManager\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ExtensionManager"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionManager/#extensionmanager", 
            "text": "", 
            "title": "ExtensionManager"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionManager/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionManager/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/ExtensionManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/", 
            "text": "IExtension\n\n\nIExtension\n\n\nAn extension to the model layer of Dynamo \n\n\n\n\nMethods:\n\n\nDynamo.Extensions.IExtension.Startup()\n\n\nAction to be invoked when Dynamo begins to start up. This action is \nnot\n guaranteed to be invoked unless the extension is already installed at startup. Exceptions thrown from this method will be caught by Dynamo and logged. \n\n\nstability=1\n\n\nDynamo.Extensions.IExtension.Ready()\n\n\nAction to be invoked when the Dynamo has started up and is ready for user interaction. This action is guaranteed to be called even if the extension is installed after startup. Exceptions thrown from this method will be caught by Dynamo and logged. \n\n\nstability=1\n\n\nDynamo.Extensions.IExtension.Shutdown()\n\n\nAction to be invoked when shutdown has begun. \n\n\nstability=1\n\n\nProperties:\n\n\nUniqueId\n\n\nA unique id for this extension instance. There may be multiple instances of the same type, but the application will \nnot\n allow two instances to coexist with the same id. \n\n\nstability=1\n\n\nName\n\n\nA name for the Extension. This is used for more user-readable logging. \n\n\nstability=1\n\n\nEvents:", 
            "title": "IExtension"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#iextension", 
            "text": "", 
            "title": "IExtension"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#iextension_1", 
            "text": "An extension to the model layer of Dynamo", 
            "title": "IExtension"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#methods", 
            "text": "Dynamo.Extensions.IExtension.Startup()  Action to be invoked when Dynamo begins to start up. This action is  not  guaranteed to be invoked unless the extension is already installed at startup. Exceptions thrown from this method will be caught by Dynamo and logged.   stability=1  Dynamo.Extensions.IExtension.Ready()  Action to be invoked when the Dynamo has started up and is ready for user interaction. This action is guaranteed to be called even if the extension is installed after startup. Exceptions thrown from this method will be caught by Dynamo and logged.   stability=1  Dynamo.Extensions.IExtension.Shutdown()  Action to be invoked when shutdown has begun.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#properties", 
            "text": "UniqueId  A unique id for this extension instance. There may be multiple instances of the same type, but the application will  not  allow two instances to coexist with the same id.   stability=1  Name  A name for the Extension. This is used for more user-readable logging.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtension/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionLoader/", 
            "text": "IExtensionLoader\n\n\nIExtensionLoader\n\n\nHandles loading extensions given an extension definition files path \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IExtensionLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionLoader/#iextensionloader", 
            "text": "", 
            "title": "IExtensionLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionLoader/#iextensionloader_1", 
            "text": "Handles loading extensions given an extension definition files path", 
            "title": "IExtensionLoader"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionLoader/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionLoader/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionLoader/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/", 
            "text": "IExtensionManager\n\n\nIExtensionManager\n\n\nThis class handles registration, lookup, and disposal of extensions. There should only be one of these per application instance. \n\n\n\n\nMethods:\n\n\nDynamo.Extensions.IExtensionManager.Add()\n\n\nAdd an extension to the current application session. \n\n\nstability=1\n\n\nDynamo.Extensions.IExtensionManager.Remove()\n\n\nRemove an extension from the current application session. \n\n\nstability=1\n\n\nProperties:\n\n\nExtensions\n\n\nThe collection of currently registered extensions \n\n\nstability=1\n\n\nEvents:\n\n\nExtensionAdded\n\n\nEvent raised when an extension is added \n\n\nstability=1\n\n\nExtensionRemoved\n\n\nEvent raised when an extension is removed \n\n\nstability=1", 
            "title": "IExtensionManager"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#iextensionmanager", 
            "text": "", 
            "title": "IExtensionManager"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#iextensionmanager_1", 
            "text": "This class handles registration, lookup, and disposal of extensions. There should only be one of these per application instance.", 
            "title": "IExtensionManager"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#methods", 
            "text": "Dynamo.Extensions.IExtensionManager.Add()  Add an extension to the current application session.   stability=1  Dynamo.Extensions.IExtensionManager.Remove()  Remove an extension from the current application session.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#properties", 
            "text": "Extensions  The collection of currently registered extensions", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#events", 
            "text": "ExtensionAdded  Event raised when an extension is added   stability=1  ExtensionRemoved  Event raised when an extension is removed", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/IExtensionManager/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Extensions/ReadyParams/", 
            "text": "ReadyParams\n\n\nReadyParams\n\n\nApplication-level handles provided to an extension when Dynamo has started and is ready for interaction \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ReadyParams"
        }, 
        {
            "location": "/Dynamo_Extensions/ReadyParams/#readyparams", 
            "text": "", 
            "title": "ReadyParams"
        }, 
        {
            "location": "/Dynamo_Extensions/ReadyParams/#readyparams_1", 
            "text": "Application-level handles provided to an extension when Dynamo has started and is ready for interaction", 
            "title": "ReadyParams"
        }, 
        {
            "location": "/Dynamo_Extensions/ReadyParams/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/ReadyParams/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/ReadyParams/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Extensions/StartupParams/", 
            "text": "StartupParams\n\n\nStartupParams\n\n\nApplication-level handles provided to an extension when Dynamo is starting up and is not yet ready for interaction. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "StartupParams"
        }, 
        {
            "location": "/Dynamo_Extensions/StartupParams/#startupparams", 
            "text": "", 
            "title": "StartupParams"
        }, 
        {
            "location": "/Dynamo_Extensions/StartupParams/#startupparams_1", 
            "text": "Application-level handles provided to an extension when Dynamo is starting up and is not yet ready for interaction.", 
            "title": "StartupParams"
        }, 
        {
            "location": "/Dynamo_Extensions/StartupParams/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Extensions/StartupParams/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Extensions/StartupParams/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeManager/", 
            "text": "ICustomNodeManager\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ICustomNodeManager"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeManager/#icustomnodemanager", 
            "text": "", 
            "title": "ICustomNodeManager"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeManager/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeManager/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeSource/", 
            "text": "ICustomNodeSource\n\n\n\n\nMethods:\n\n\nDynamo.Interfaces.ICustomNodeSource.CreateCustomNodeInstance(Guid id,String nickname,Boolean isTestMode)\n\n\nCreates a new Custom Node Instance. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid:\n\n\nIdentifier referring to a custom node definition.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nnickname:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisTestMode:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ICustomNodeSource"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeSource/#icustomnodesource", 
            "text": "", 
            "title": "ICustomNodeSource"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeSource/#methods", 
            "text": "Dynamo.Interfaces.ICustomNodeSource.CreateCustomNodeInstance(Guid id,String nickname,Boolean isTestMode)  Creates a new Custom Node Instance.      Name  Description      id:  Identifier referring to a custom node definition.    Name  Description    -----  ------    nickname:     Name  Description    -----  ------    isTestMode:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeSource/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeSource/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeSource/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeWorkspaceModel/", 
            "text": "ICustomNodeWorkspaceModel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ICustomNodeWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeWorkspaceModel/#icustomnodeworkspacemodel", 
            "text": "", 
            "title": "ICustomNodeWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeWorkspaceModel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeWorkspaceModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ICustomNodeWorkspaceModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IDynamoModel/", 
            "text": "IDynamoModel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IDynamoModel"
        }, 
        {
            "location": "/Dynamo_Interfaces/IDynamoModel/#idynamomodel", 
            "text": "", 
            "title": "IDynamoModel"
        }, 
        {
            "location": "/Dynamo_Interfaces/IDynamoModel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IDynamoModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IDynamoModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILibraryLoader/", 
            "text": "ILibraryLoader\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ILibraryLoader"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILibraryLoader/#ilibraryloader", 
            "text": "", 
            "title": "ILibraryLoader"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILibraryLoader/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILibraryLoader/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILibraryLoader/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogger/", 
            "text": "ILogger\n\n\nILogger\n\n\nConsumes messages to be used for logging. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ILogger"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogger/#ilogger", 
            "text": "", 
            "title": "ILogger"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogger/#ilogger_1", 
            "text": "Consumes messages to be used for logging.", 
            "title": "ILogger"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogger/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogger/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogger/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogMessage/", 
            "text": "ILogMessage\n\n\nILogMessage\n\n\nA message that can be logged with an ILogger. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ILogMessage"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogMessage/#ilogmessage", 
            "text": "", 
            "title": "ILogMessage"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogMessage/#ilogmessage_1", 
            "text": "A message that can be logged with an ILogger.", 
            "title": "ILogMessage"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogMessage/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogMessage/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogMessage/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/", 
            "text": "ILogSource\n\n\nILogSource\n\n\nAn object that emits log messages. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:\n\n\nMessageLogged\n\n\nEmits LogMessages. \n\n\nstability=1", 
            "title": "ILogSource"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/#ilogsource", 
            "text": "", 
            "title": "ILogSource"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/#ilogsource_1", 
            "text": "An object that emits log messages.", 
            "title": "ILogSource"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/#events", 
            "text": "MessageLogged  Emits LogMessages.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ILogSource/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/", 
            "text": "IPathManager\n\n\n\n\nMethods:\n\n\nDynamo.Interfaces.IPathManager.AddResolutionPath(String path)\n\n\nCall this method to add additional path for consideration when path resolution take place. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath:\n\n\nThe full path to be considered when PathManager attempt to resolve a file path. If this argument does not represent a valid directory path, this method throws an exception.\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nDynamoCoreDirectory\n\n\nThe directory in which DynamoCore.dll is guaranteed to be found. \n\n\nstability=1\n\n\nUserDataDirectory\n\n\nThe local directory that contains user specific data files. \n\n\nstability=1\n\n\nCommonDataDirectory\n\n\nThe local directory that contains common data files among users. \n\n\nstability=1\n\n\nDefaultUserDefinitions\n\n\nThe default directory that contains custom nodes created by the user. \n\n\nstability=1\n\n\nDefinitionDirectories\n\n\nDirectories from where custom nodes are to be loaded. The implementor of this interface method should always guarantee that a non-empty list is returned, and that the first entry represents the default custom node directory. Custom nodes created are stored in the default directory, which is specific to the current user. Changes to custom nodes may or may not be saved to their current location depeding on write access. \n\n\nstability=1\n\n\nCommonDefinitions\n\n\nThe local directory that contains custom nodes created by all users. \n\n\nstability=1\n\n\nLogDirectory\n\n\nThe local directory where log files are generated. This directory is specific to the current user. \n\n\nstability=1\n\n\nDefaultPackagesDirectory\n\n\nThe default directory for saving packages downloaded through the package manager. This directory is specific to the current user. \n\n\nstability=1\n\n\nPackagesDirectories\n\n\nDirectories from where packages are to be loaded. The implementor of this interface method should always guarantee that a non-empty list is returned, and that the first entry represents the default package directory. Packages downloaded through package manager are stored in the default package directory, which is specific to the current user. \n\n\nstability=1\n\n\nExtensionsDirectory\n\n\nThe directory, which contains ExtensionDefinition .xml files \n\n\nstability=1\n\n\nViewExtensionsDirectory\n\n\nThe directory, which contains ViewExtensionDefinition.xml files \n\n\nstability=1\n\n\nSamplesDirectory\n\n\nThe root directory where all sample files are stored. This directory is common to all users on the machine. \n\n\nstability=1\n\n\nBackupDirectory\n\n\nThe directory where the automatically saved files will be stored. \n\n\nstability=1\n\n\nPreferenceFilePath\n\n\nFull path to the preference xml file. This setting file is specific to the current user. \n\n\nstability=1\n\n\nGalleryFilePath\n\n\nFull path to the GalleryContent xml file. The file is located in the AppData/Dynamo/version/locale/ \n\n\nstability=1\n\n\nNodeDirectories\n\n\nFolders in which node assemblies can be located. \n\n\nstability=1\n\n\nPreloadedLibraries\n\n\nA list of node assembly names to be preloaded with Dynamo. \n\n\nstability=1\n\n\nMajorFileVersion\n\n\nMajor version of assembly file \n\n\nstability=1\n\n\nMinorFileVersion\n\n\nMinor version of assembly file \n\n\nstability=1\n\n\nEvents:", 
            "title": "IPathManager"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/#ipathmanager", 
            "text": "", 
            "title": "IPathManager"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/#methods", 
            "text": "Dynamo.Interfaces.IPathManager.AddResolutionPath(String path)  Call this method to add additional path for consideration when path resolution take place.      Name  Description      path:  The full path to be considered when PathManager attempt to resolve a file path. If this argument does not represent a valid directory path, this method throws an exception.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/#properties", 
            "text": "DynamoCoreDirectory  The directory in which DynamoCore.dll is guaranteed to be found.   stability=1  UserDataDirectory  The local directory that contains user specific data files.   stability=1  CommonDataDirectory  The local directory that contains common data files among users.   stability=1  DefaultUserDefinitions  The default directory that contains custom nodes created by the user.   stability=1  DefinitionDirectories  Directories from where custom nodes are to be loaded. The implementor of this interface method should always guarantee that a non-empty list is returned, and that the first entry represents the default custom node directory. Custom nodes created are stored in the default directory, which is specific to the current user. Changes to custom nodes may or may not be saved to their current location depeding on write access.   stability=1  CommonDefinitions  The local directory that contains custom nodes created by all users.   stability=1  LogDirectory  The local directory where log files are generated. This directory is specific to the current user.   stability=1  DefaultPackagesDirectory  The default directory for saving packages downloaded through the package manager. This directory is specific to the current user.   stability=1  PackagesDirectories  Directories from where packages are to be loaded. The implementor of this interface method should always guarantee that a non-empty list is returned, and that the first entry represents the default package directory. Packages downloaded through package manager are stored in the default package directory, which is specific to the current user.   stability=1  ExtensionsDirectory  The directory, which contains ExtensionDefinition .xml files   stability=1  ViewExtensionsDirectory  The directory, which contains ViewExtensionDefinition.xml files   stability=1  SamplesDirectory  The root directory where all sample files are stored. This directory is common to all users on the machine.   stability=1  BackupDirectory  The directory where the automatically saved files will be stored.   stability=1  PreferenceFilePath  Full path to the preference xml file. This setting file is specific to the current user.   stability=1  GalleryFilePath  Full path to the GalleryContent xml file. The file is located in the AppData/Dynamo/version/locale/   stability=1  NodeDirectories  Folders in which node assemblies can be located.   stability=1  PreloadedLibraries  A list of node assembly names to be preloaded with Dynamo.   stability=1  MajorFileVersion  Major version of assembly file   stability=1  MinorFileVersion  Minor version of assembly file", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathResolver/", 
            "text": "IPathResolver\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nAdditionalResolutionPaths\n\n\nAdditional directories that should be considered when path resolution is done for a library that does not contain full path information. The return value of this property should never be null. Each entry must represent a valid directory, otherwise DirectoryNotFoundException exception is thrown. \n\n\nstability=1\n\n\nAdditionalNodeDirectories\n\n\nAdditional directories in which node assemblies can be located. The return value of this property should never be null. Each entry must represent a valid directory, otherwise DirectoryNotFoundException exception is thrown. \n\n\nstability=1\n\n\nPreloadedLibraryPaths\n\n\nLibraries to be preloaded as part of Dynamo start up sequence. Each entry in this list can either represent full path to a library, or just the assembly name. If absolute path information is not supplied, the library will be looked up through both predefined and additional resolution paths. The return value of this property should never be null. \n\n\nstability=1\n\n\nUserDataRootFolder\n\n\nThis property represents the root folder where user specific data files are stored. If this property returns a null or empty string, then PathManager falls back to using \"%ProgramData%\\Dynamo\". If this property returns a string that does not represent an existing folder, PathManager will attempt to create a new directory. If the property does not represent a valid path string, an exception will be thrown by the underlying system IO API invoked. Note that this path should not include the version number as it will be appended by PathManager. \n\n\nstability=1\n\n\nCommonDataRootFolder\n\n\nThis property represents the root folder where application common data files (i.e. shared among all users on the same machine) are stored. If this property returns a null or empty string, then PathManager falls back to using \"%AppData%\\Dynamo\". If this property returns a string that does not represent an existing folder, PathManager will attempt to create a new directory. If the property does not represent a valid path string, an exception will be thrown by the underlying system IO API invoked. Note that this path should not include the version number as it will be appended by PathManager. \n\n\nstability=1\n\n\nEvents:", 
            "title": "IPathResolver"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathResolver/#ipathresolver", 
            "text": "", 
            "title": "IPathResolver"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathResolver/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathResolver/#properties", 
            "text": "AdditionalResolutionPaths  Additional directories that should be considered when path resolution is done for a library that does not contain full path information. The return value of this property should never be null. Each entry must represent a valid directory, otherwise DirectoryNotFoundException exception is thrown.   stability=1  AdditionalNodeDirectories  Additional directories in which node assemblies can be located. The return value of this property should never be null. Each entry must represent a valid directory, otherwise DirectoryNotFoundException exception is thrown.   stability=1  PreloadedLibraryPaths  Libraries to be preloaded as part of Dynamo start up sequence. Each entry in this list can either represent full path to a library, or just the assembly name. If absolute path information is not supplied, the library will be looked up through both predefined and additional resolution paths. The return value of this property should never be null.   stability=1  UserDataRootFolder  This property represents the root folder where user specific data files are stored. If this property returns a null or empty string, then PathManager falls back to using \"%ProgramData%\\Dynamo\". If this property returns a string that does not represent an existing folder, PathManager will attempt to create a new directory. If the property does not represent a valid path string, an exception will be thrown by the underlying system IO API invoked. Note that this path should not include the version number as it will be appended by PathManager.   stability=1  CommonDataRootFolder  This property represents the root folder where application common data files (i.e. shared among all users on the same machine) are stored. If this property returns a null or empty string, then PathManager falls back to using \"%AppData%\\Dynamo\". If this property returns a string that does not represent an existing folder, PathManager will attempt to create a new directory. If the property does not represent a valid path string, an exception will be thrown by the underlying system IO API invoked. Note that this path should not include the version number as it will be appended by PathManager.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathResolver/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPathResolver/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPreferences/", 
            "text": "IPreferences\n\n\n\n\nMethods:\n\n\nDynamo.Interfaces.IPreferences.Save(String filePath)\n\n\nCall this method to serialize PreferenceSettings given the output file path. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilePath:\n\n\nThe full path of the output file to serialize PreferenceSettings to.\n\n\n\n\n\n\nReturns: Returns true if the serialization is successful, or false otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IPreferences"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPreferences/#ipreferences", 
            "text": "", 
            "title": "IPreferences"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPreferences/#methods", 
            "text": "Dynamo.Interfaces.IPreferences.Save(String filePath)  Call this method to serialize PreferenceSettings given the output file path.      Name  Description      filePath:  The full path of the output file to serialize PreferenceSettings to.    Returns: Returns true if the serialization is successful, or false otherwise.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPreferences/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPreferences/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IPreferences/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/", 
            "text": "IRenderPackageFactory\n\n\nIRenderPackageFactory\n\n\nIRenderPackageFactory is used to create IRenderPackage objects suitable for a specific rednering pipeline. IRenderPackages generated from IRenderPackageFactory classes contain tessellated geometry for rendering, which may be stored in different forms depending on the rendering pipeline being used. \n\n\n\n\nMethods:\n\n\nDynamo.Interfaces.IRenderPackageFactory.CreateRenderPackage()\n\n\nCreate an IRenderPackage object of the type manufactured by this factory. \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IRenderPackageFactory"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/#irenderpackagefactory", 
            "text": "", 
            "title": "IRenderPackageFactory"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/#irenderpackagefactory_1", 
            "text": "IRenderPackageFactory is used to create IRenderPackage objects suitable for a specific rednering pipeline. IRenderPackages generated from IRenderPackageFactory classes contain tessellated geometry for rendering, which may be stored in different forms depending on the rendering pipeline being used.", 
            "title": "IRenderPackageFactory"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/#methods", 
            "text": "Dynamo.Interfaces.IRenderPackageFactory.CreateRenderPackage()  Create an IRenderPackage object of the type manufactured by this factory.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageFactory/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageSource`1/", 
            "text": "IRenderPackageSource`1\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:\n\n\nRenderPackagesUpdated\n\n\nAn event raised then the source has updated IRenderPackages. \n\n\nstability=1", 
            "title": "IRenderPackageSource`1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageSource`1/#irenderpackagesource1", 
            "text": "", 
            "title": "IRenderPackageSource`1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageSource`1/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageSource`1/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageSource`1/#events", 
            "text": "RenderPackagesUpdated  An event raised then the source has updated IRenderPackages.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IRenderPackageSource`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISchedulerThread/", 
            "text": "ISchedulerThread\n\n\n\n\nMethods:\n\n\nDynamo.Interfaces.ISchedulerThread.Initialize(\nIScheduler\n owningScheduler)\n\n\nDynamoScheduler calls this method to initialize and start this instance of scheduler thread. This call marks the point from which it is safe to call into DynamoScheduler. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nowningScheduler:\n\n\nA reference to the DynamoScheduler object which owns this instance of scheduler thread.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Interfaces.ISchedulerThread.Shutdown()\n\n\nDynamoScheduler calls this method to shutdown the scheduler thread. \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ISchedulerThread"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISchedulerThread/#ischedulerthread", 
            "text": "", 
            "title": "ISchedulerThread"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISchedulerThread/#methods", 
            "text": "Dynamo.Interfaces.ISchedulerThread.Initialize( IScheduler  owningScheduler)  DynamoScheduler calls this method to initialize and start this instance of scheduler thread. This call marks the point from which it is safe to call into DynamoScheduler.      Name  Description      owningScheduler:  A reference to the DynamoScheduler object which owns this instance of scheduler thread.     stability=1  Dynamo.Interfaces.ISchedulerThread.Shutdown()  DynamoScheduler calls this method to shutdown the scheduler thread.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISchedulerThread/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISchedulerThread/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISchedulerThread/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/", 
            "text": "ISource`1\n\n\nISource`1\n\n\nHas an event that produces items. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:\n\n\nItemProduced\n\n\nProduces items, potentially asynchronously. \n\n\nstability=1", 
            "title": "ISource`1"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/#isource1", 
            "text": "", 
            "title": "ISource`1"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/#isource1_1", 
            "text": "Has an event that produces items.", 
            "title": "ISource`1"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/#events", 
            "text": "ItemProduced  Produces items, potentially asynchronously.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Interfaces/ISource`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Interfaces/IWorkspaceModel/", 
            "text": "IWorkspaceModel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Interfaces/IWorkspaceModel/#iworkspacemodel", 
            "text": "", 
            "title": "IWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Interfaces/IWorkspaceModel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IWorkspaceModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Interfaces/IWorkspaceModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Library/TypedParameter/", 
            "text": "TypedParameter\n\n\nTypedParameter\n\n\nA tuple of parameter and its type. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "TypedParameter"
        }, 
        {
            "location": "/Dynamo_Library/TypedParameter/#typedparameter", 
            "text": "", 
            "title": "TypedParameter"
        }, 
        {
            "location": "/Dynamo_Library/TypedParameter/#typedparameter_1", 
            "text": "A tuple of parameter and its type.", 
            "title": "TypedParameter"
        }, 
        {
            "location": "/Dynamo_Library/TypedParameter/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Library/TypedParameter/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Library/TypedParameter/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/", 
            "text": "LogMessage\n\n\nLogMessage\n\n\nFactory methods for creating log messages. \n\n\n\n\nMethods:\n\n\nDynamo.Logging.LogMessage.Warning(String message,\nWarningLevel\n severity)\n\n\nCreates a LogMessage representing a warning. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nseverity:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Logging.LogMessage.Error(String message)\n\n\nCreates a LogMessage representing an error. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Logging.LogMessage.Error(Exception exception)\n\n\nCreates a LogMessage representing an error. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexception:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Logging.LogMessage.Info(String message)\n\n\nCreates a basic LogMessage. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessage:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Logging.LogMessage.Log(\nILogger\n logger,\nILogMessage\n message)\n\n\nLogs a LogMessage. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlogger:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nmessage:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "LogMessage"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/#logmessage", 
            "text": "", 
            "title": "LogMessage"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/#logmessage_1", 
            "text": "Factory methods for creating log messages.", 
            "title": "LogMessage"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/#methods", 
            "text": "Dynamo.Logging.LogMessage.Warning(String message, WarningLevel  severity)  Creates a LogMessage representing a warning.      Name  Description      message:     Name  Description    -----  ------    severity:     Returns:      stability=1  Dynamo.Logging.LogMessage.Error(String message)  Creates a LogMessage representing an error.      Name  Description      message:     Returns:      stability=1  Dynamo.Logging.LogMessage.Error(Exception exception)  Creates a LogMessage representing an error.      Name  Description      exception:     Returns:      stability=1  Dynamo.Logging.LogMessage.Info(String message)  Creates a basic LogMessage.      Name  Description      message:     Returns:      stability=1  Dynamo.Logging.LogMessage.Log( ILogger  logger, ILogMessage  message)  Logs a LogMessage.      Name  Description      logger:     Name  Description    -----  ------    message:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Logging/LogMessage/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/", 
            "text": "LogSourceBase\n\n\nLogSourceBase\n\n\nAn object that can log messages. \n\n\n\n\nMethods:\n\n\nDynamo.Logging.LogSourceBase.AsLogger()\n\n\nCreates an ILogger out of this LogSourceBase; logging to the ILogger will send messages out of the LogMessage event. \n\n\nReturns: \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:\n\n\nMessageLogged\n\n\nEmits LogMessages. \n\n\nstability=1", 
            "title": "LogSourceBase"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#logsourcebase", 
            "text": "", 
            "title": "LogSourceBase"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#logsourcebase_1", 
            "text": "An object that can log messages.", 
            "title": "LogSourceBase"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#methods", 
            "text": "Dynamo.Logging.LogSourceBase.AsLogger()  Creates an ILogger out of this LogSourceBase; logging to the ILogger will send messages out of the LogMessage event.   Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#events", 
            "text": "MessageLogged  Emits LogMessages.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Logging/LogSourceBase/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/", 
            "text": "MigrationManager\n\n\n\n\nMethods:\n\n\nDynamo.Migration.MigrationManager.AddMigrationType(\nTypeLoadData\n t)\n\n\nAdds a new type containing Migration methods into this manager. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.ProcessWorkspace(\nWorkspaceInfo\n workspaceInfo,XmlDocument xmlDoc)\n\n\nAttempts to migrate a workspace to the current version of Dynamo. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspaceInfo:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxmlDoc:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.ProcessWorkspaceMigrations(Version currentVersion,XmlDocument xmlDoc,Version workspaceVersion)\n\n\nRuns all migration methods found on the listed migration target types. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncurrentVersion:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nxmlDoc:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nworkspaceVersion:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CreateFunctionNode(XmlDocument document,XmlElement assembly,Int32 nickname,String signature)\n\n\nCall this method to create an empty DSFunction node that contains basic function node information. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndocument:\n\n\nThe XmlDocument to create the node in.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nassembly:\n\n\nName of the assembly that implements this function.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nnickname:\n\n\nThe nickname to display on the node.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nsignature:\n\n\nThe signature of the function.\n\n\n\n\n\n\nReturns: Returns the XmlElement that represents a DSFunction node with its basic function information with default attributes.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CreateFunctionNodeFrom(XmlElement srcElement,String[] attribNames)\n\n\nCall this method to create a XmlElement with a set of attributes carried over from the source XmlElement. The new XmlElement will have a name of \"Dynamo.Nodes.DSFunction\". \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrcElement:\n\n\nThe source XmlElement object.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nattribNames:\n\n\nThe list of attribute names whose values are to be carried over to the resulting XmlElement. This list is mandatory and it cannot be empty. If a specified attribute cannot be found in srcElement, an empty attribute with the same name will be created in the resulting XmlElement.\n\n\n\n\n\n\nReturns: Returns the resulting XmlElement with specified attributes duplicated from srcElement. The resulting XmlElement will also have a mandatory \"type\" attribute with value \"Dynamo.Nodes.DSFunction\".\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CreateFunctionNodeFrom(XmlElement srcElement)\n\n\nCall this method to create a duplicated XmlElement with all the attributes found from the source XmlElement. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrcElement:\n\n\nThe source XmlElement to duplicate.\n\n\n\n\n\n\nReturns: Returns the duplicated XmlElement with all attributes found in the source XmlElement. The resulting XmlElement will also have a mandatory \"type\" attribute with value \"Dynamo.Nodes.DSFunction\".\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CreateCodeBlockNodeFrom(XmlElement srcElement)\n\n\nCall this method to create an empty Code Block node, with all attributes carried over from an existing src XmlElement. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrcElement:\n\n\nThe source element from which the Code Block node XmlElement is constructed. All attributes of the source XmlElement will be copied over, and Code Block node specific attributes will be added.\n\n\n\n\n\n\nReturns: Returns an XmlElement that represents the resulting Code Block node.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CloneAndChangeName(XmlElement element,String type,String nickname,Boolean cloneInnerXml)\n\n\nCall this method to create a clone of the original XmlElement and change its type at one go. This method preserves all the attributes while updating only the type name. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nelement:\n\n\nThe XmlElement to be cloned and the type name updated.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ntype:\n\n\nThe fully qualified name of the new type.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nnickname:\n\n\nThe new nickname, by which this node is known.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncloneInnerXml:\n\n\nParameter indicating whether the inner xml of the original node should be cloned.\n\n\n\n\n\n\nReturns: Returns the cloned and updated XmlElement.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CreateDummyNode(XmlElement element,Int32 inportCount,Int32 outportCount)\n\n\nCall this method to create a dummy node, should a node failed to be migrated. This results in a dummy node with a description of what the original node type was, and also retain the number of input and output ports. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nelement:\n\n\nXmlElement representing the original node which has failed migration.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ninportCount:\n\n\nThe number of input ports required on the new dummy node. This number must be a positive number greater or equal to zero.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\noutportCount:\n\n\nThe number of output ports required on the new dummy node. This number must be a positive number greater or equal to zero.\n\n\n\n\n\n\nReturns: Returns a new XmlElement representing the dummy node.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.MigrationManager.CreateMissingNode(XmlElement element,Int32 inportCount,Int32 outportCount)\n\n\nCall this method to create a dummy node, should a node failed to be migrated. This results in a dummy node with a description of what the original node type was, and also retain the number of input and output ports. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nelement:\n\n\nXmlElement representing the original node which has failed migration.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ninportCount:\n\n\nThe number of input ports required on the new dummy node. This number must be a positive number greater or equal to zero.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\noutportCount:\n\n\nThe number of output ports required on the new dummy node. This number must be a positive number greater or equal to zero.\n\n\n\n\n\n\nReturns: Returns a new XmlElement representing the dummy node.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nMigrationTargets\n\n\nA collection of types which contain migration methods. \n\n\nstability=1\n\n\nEvents:", 
            "title": "MigrationManager"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/#migrationmanager", 
            "text": "", 
            "title": "MigrationManager"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/#methods", 
            "text": "Dynamo.Migration.MigrationManager.AddMigrationType( TypeLoadData  t)  Adds a new type containing Migration methods into this manager.      Name  Description      t:      stability=1  Dynamo.Migration.MigrationManager.ProcessWorkspace( WorkspaceInfo  workspaceInfo,XmlDocument xmlDoc)  Attempts to migrate a workspace to the current version of Dynamo.      Name  Description      workspaceInfo:     Name  Description    -----  ------    xmlDoc:     Returns:      stability=1  Dynamo.Migration.MigrationManager.ProcessWorkspaceMigrations(Version currentVersion,XmlDocument xmlDoc,Version workspaceVersion)  Runs all migration methods found on the listed migration target types.      Name  Description      currentVersion:     Name  Description    -----  ------    xmlDoc:     Name  Description    -----  ------    workspaceVersion:      stability=1  Dynamo.Migration.MigrationManager.CreateFunctionNode(XmlDocument document,XmlElement assembly,Int32 nickname,String signature)  Call this method to create an empty DSFunction node that contains basic function node information.      Name  Description      document:  The XmlDocument to create the node in.    Name  Description    -----  ------    assembly:  Name of the assembly that implements this function.    Name  Description    -----  ------    nickname:  The nickname to display on the node.    Name  Description    -----  ------    signature:  The signature of the function.    Returns: Returns the XmlElement that represents a DSFunction node with its basic function information with default attributes.      stability=1  Dynamo.Migration.MigrationManager.CreateFunctionNodeFrom(XmlElement srcElement,String[] attribNames)  Call this method to create a XmlElement with a set of attributes carried over from the source XmlElement. The new XmlElement will have a name of \"Dynamo.Nodes.DSFunction\".      Name  Description      srcElement:  The source XmlElement object.    Name  Description    -----  ------    attribNames:  The list of attribute names whose values are to be carried over to the resulting XmlElement. This list is mandatory and it cannot be empty. If a specified attribute cannot be found in srcElement, an empty attribute with the same name will be created in the resulting XmlElement.    Returns: Returns the resulting XmlElement with specified attributes duplicated from srcElement. The resulting XmlElement will also have a mandatory \"type\" attribute with value \"Dynamo.Nodes.DSFunction\".      stability=1  Dynamo.Migration.MigrationManager.CreateFunctionNodeFrom(XmlElement srcElement)  Call this method to create a duplicated XmlElement with all the attributes found from the source XmlElement.      Name  Description      srcElement:  The source XmlElement to duplicate.    Returns: Returns the duplicated XmlElement with all attributes found in the source XmlElement. The resulting XmlElement will also have a mandatory \"type\" attribute with value \"Dynamo.Nodes.DSFunction\".      stability=1  Dynamo.Migration.MigrationManager.CreateCodeBlockNodeFrom(XmlElement srcElement)  Call this method to create an empty Code Block node, with all attributes carried over from an existing src XmlElement.      Name  Description      srcElement:  The source element from which the Code Block node XmlElement is constructed. All attributes of the source XmlElement will be copied over, and Code Block node specific attributes will be added.    Returns: Returns an XmlElement that represents the resulting Code Block node.      stability=1  Dynamo.Migration.MigrationManager.CloneAndChangeName(XmlElement element,String type,String nickname,Boolean cloneInnerXml)  Call this method to create a clone of the original XmlElement and change its type at one go. This method preserves all the attributes while updating only the type name.      Name  Description      element:  The XmlElement to be cloned and the type name updated.    Name  Description    -----  ------    type:  The fully qualified name of the new type.    Name  Description    -----  ------    nickname:  The new nickname, by which this node is known.    Name  Description    -----  ------    cloneInnerXml:  Parameter indicating whether the inner xml of the original node should be cloned.    Returns: Returns the cloned and updated XmlElement.      stability=1  Dynamo.Migration.MigrationManager.CreateDummyNode(XmlElement element,Int32 inportCount,Int32 outportCount)  Call this method to create a dummy node, should a node failed to be migrated. This results in a dummy node with a description of what the original node type was, and also retain the number of input and output ports.      Name  Description      element:  XmlElement representing the original node which has failed migration.    Name  Description    -----  ------    inportCount:  The number of input ports required on the new dummy node. This number must be a positive number greater or equal to zero.    Name  Description    -----  ------    outportCount:  The number of output ports required on the new dummy node. This number must be a positive number greater or equal to zero.    Returns: Returns a new XmlElement representing the dummy node.      stability=1  Dynamo.Migration.MigrationManager.CreateMissingNode(XmlElement element,Int32 inportCount,Int32 outportCount)  Call this method to create a dummy node, should a node failed to be migrated. This results in a dummy node with a description of what the original node type was, and also retain the number of input and output ports.      Name  Description      element:  XmlElement representing the original node which has failed migration.    Name  Description    -----  ------    inportCount:  The number of input ports required on the new dummy node. This number must be a positive number greater or equal to zero.    Name  Description    -----  ------    outportCount:  The number of output ports required on the new dummy node. This number must be a positive number greater or equal to zero.    Returns: Returns a new XmlElement representing the dummy node.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/#properties", 
            "text": "MigrationTargets  A collection of types which contain migration methods.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Migration/MigrationManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/", 
            "text": "NodeMigrationAttribute\n\n\nNodeMigrationAttribute\n\n\nMarks methods on a NodeModel to be used for version migration. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nFrom\n\n\nLatest Version this migration applies to. \n\n\nstability=1\n\n\nTo\n\n\nVersion this migrates to. \n\n\nstability=1\n\n\nEvents:", 
            "title": "NodeMigrationAttribute"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/#nodemigrationattribute", 
            "text": "", 
            "title": "NodeMigrationAttribute"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/#nodemigrationattribute_1", 
            "text": "Marks methods on a NodeModel to be used for version migration.", 
            "title": "NodeMigrationAttribute"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/#properties", 
            "text": "From  Latest Version this migration applies to.   stability=1  To  Version this migrates to.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/", 
            "text": "NodeMigrationData\n\n\nNodeMigrationData\n\n\nThis class contains the resulting nodes as a result of node migration. Note that this class may contain other information (e.g. connectors) in the future in the event a migration process results in other elements. \n\n\n\n\nMethods:\n\n\nDynamo.Migration.NodeMigrationData.FindConnector(\nPortId\n startPort,\nPortId\n endPort)\n\n\nCall this method to find the connector in the associate XmlDocument, given its start and end port information. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstartPort:\n\n\nThe identity of the start port.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nendPort:\n\n\nThe identity of the end port.\n\n\n\n\n\n\nReturns: Returns the notmatching connector if one is found, or null otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.NodeMigrationData.FindFirstConnector(\nPortId\n portId)\n\n\nCall this method to retrieve the first connector given a port. This method is a near equivalent of FindConnectors, but only return the first connector found. This way the caller codes can be simplified in a way that it does not have the validate the returned list for item count before accessing its element. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nportId:\n\n\nThe identity of the port for which the first connector is to be retrieved.\n\n\n\n\n\n\nReturns: Returns the first connector found to connect to the given port, or null otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.NodeMigrationData.FindConnectors(\nPortId\n portId)\n\n\nGiven a port, get all connectors that connect to it. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nportId:\n\n\nThe identity of the port for which connectors are to be retrieved.\n\n\n\n\n\n\nReturns: Returns the list of connectors connecting to the given port, or null if no connection is found connecting to it.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Migration.NodeMigrationData.ReconnectToPort(XmlElement connector,\nPortId\n port)\n\n\nReconnect a given connector to another port identified by \"port\". \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnector:\n\n\nThe connector to update. Note that this parameter can be null, in which case there won't be any movement performed. This simplifies the caller so that it does not have to do a null-check before every call to this method (connectors may not present).\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nport:\n\n\nThe new port to connect to.\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeMigrationData"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/#nodemigrationdata", 
            "text": "", 
            "title": "NodeMigrationData"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/#nodemigrationdata_1", 
            "text": "This class contains the resulting nodes as a result of node migration. Note that this class may contain other information (e.g. connectors) in the future in the event a migration process results in other elements.", 
            "title": "NodeMigrationData"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/#methods", 
            "text": "Dynamo.Migration.NodeMigrationData.FindConnector( PortId  startPort, PortId  endPort)  Call this method to find the connector in the associate XmlDocument, given its start and end port information.      Name  Description      startPort:  The identity of the start port.    Name  Description    -----  ------    endPort:  The identity of the end port.    Returns: Returns the notmatching connector if one is found, or null otherwise.      stability=1  Dynamo.Migration.NodeMigrationData.FindFirstConnector( PortId  portId)  Call this method to retrieve the first connector given a port. This method is a near equivalent of FindConnectors, but only return the first connector found. This way the caller codes can be simplified in a way that it does not have the validate the returned list for item count before accessing its element.      Name  Description      portId:  The identity of the port for which the first connector is to be retrieved.    Returns: Returns the first connector found to connect to the given port, or null otherwise.      stability=1  Dynamo.Migration.NodeMigrationData.FindConnectors( PortId  portId)  Given a port, get all connectors that connect to it.      Name  Description      portId:  The identity of the port for which connectors are to be retrieved.    Returns: Returns the list of connectors connecting to the given port, or null if no connection is found connecting to it.      stability=1  Dynamo.Migration.NodeMigrationData.ReconnectToPort(XmlElement connector, PortId  port)  Reconnect a given connector to another port identified by \"port\".      Name  Description      connector:  The connector to update. Note that this parameter can be null, in which case there won't be any movement performed. This simplifies the caller so that it does not have to do a null-check before every call to this method (connectors may not present).    Name  Description    -----  ------    port:  The new port to connect to.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Migration/NodeMigrationData/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Migration/PortId/", 
            "text": "PortId\n\n\nPortId\n\n\nThis structure uniquely identifies a given port in the graph. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "PortId"
        }, 
        {
            "location": "/Dynamo_Migration/PortId/#portid", 
            "text": "", 
            "title": "PortId"
        }, 
        {
            "location": "/Dynamo_Migration/PortId/#portid_1", 
            "text": "This structure uniquely identifies a given port in the graph.", 
            "title": "PortId"
        }, 
        {
            "location": "/Dynamo_Migration/PortId/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Migration/PortId/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Migration/PortId/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrationAttribute/", 
            "text": "WorkspaceMigrationAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "WorkspaceMigrationAttribute"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrationAttribute/#workspacemigrationattribute", 
            "text": "", 
            "title": "WorkspaceMigrationAttribute"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrationAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrationAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrationAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrations/", 
            "text": "WorkspaceMigrations\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "WorkspaceMigrations"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrations/#workspacemigrations", 
            "text": "", 
            "title": "WorkspaceMigrations"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrations/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrations/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Migration/WorkspaceMigrations/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ActionHandler/", 
            "text": "ActionHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ActionHandler"
        }, 
        {
            "location": "/Dynamo_Models/ActionHandler/#actionhandler", 
            "text": "", 
            "title": "ActionHandler"
        }, 
        {
            "location": "/Dynamo_Models/ActionHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ActionHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ActionHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/", 
            "text": "AnnotationModel\n\n\n\n\nMethods:\n\n\nDynamo.Models.AnnotationModel.Select()\n\n\nOverriding the Select behavior because selecting the group should select the models within that group \n\n\nstability=1\n\n\nDynamo.Models.AnnotationModel.Deselect()\n\n\nOverriding the Deselect behavior because deselecting the group should deselect the models within that group \n\n\nstability=1\n\n\nProperties:\n\n\nRect\n\n\nOverriding the Rect from Modelbase This gets the actual RECT of the group. This is required to make the group as ILocatable. \n\n\nstability=1\n\n\nEvents:", 
            "title": "AnnotationModel"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/#annotationmodel", 
            "text": "", 
            "title": "AnnotationModel"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/#methods", 
            "text": "Dynamo.Models.AnnotationModel.Select()  Overriding the Select behavior because selecting the group should select the models within that group   stability=1  Dynamo.Models.AnnotationModel.Deselect()  Overriding the Deselect behavior because deselecting the group should deselect the models within that group", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/#properties", 
            "text": "Rect  Overriding the Rect from Modelbase This gets the actual RECT of the group. This is required to make the group as ILocatable.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/AnnotationModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorModel/", 
            "text": "ConnectorModel\n\n\n\n\nMethods:\n\n\nDynamo.Models.ConnectorModel.Delete(Boolean silent)\n\n\nDelete the connector. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsilent:\n\n\nIf silent is true, the start and end ports will be disconnected without raising port disconnection events.\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ConnectorModel"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorModel/#connectormodel", 
            "text": "", 
            "title": "ConnectorModel"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorModel/#methods", 
            "text": "Dynamo.Models.ConnectorModel.Delete(Boolean silent)  Delete the connector.      Name  Description      silent:  If silent is true, the start and end ports will be disconnected without raising port disconnection events.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorType/", 
            "text": "ConnectorType\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ConnectorType"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorType/#connectortype", 
            "text": "", 
            "title": "ConnectorType"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorType/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorType/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ConnectorType/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/CustomNodeWorkspaceModel/", 
            "text": "CustomNodeWorkspaceModel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nCustomNodeDependencies\n\n\nAll CustomNodeDefinitions which this Custom Node depends on. \n\n\nstability=1\n\n\nCustomNodeDefinition\n\n\nThe definition of this custom node, based on the current state of this workspace. \n\n\nstability=1\n\n\nCustomNodeInfo\n\n\nThe information about this custom node, based on the current state of this workspace. \n\n\nstability=1\n\n\nCategory\n\n\nSearch category for this workspace, if it is a Custom Node. \n\n\nstability=1\n\n\nDescription\n\n\nA description of the workspace \n\n\nstability=1\n\n\nIsVisibleInDynamoLibrary\n\n\nCustom node visibility in the Dynamo library \n\n\nstability=1\n\n\nEvents:", 
            "title": "CustomNodeWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Models/CustomNodeWorkspaceModel/#customnodeworkspacemodel", 
            "text": "", 
            "title": "CustomNodeWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Models/CustomNodeWorkspaceModel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/CustomNodeWorkspaceModel/#properties", 
            "text": "CustomNodeDependencies  All CustomNodeDefinitions which this Custom Node depends on.   stability=1  CustomNodeDefinition  The definition of this custom node, based on the current state of this workspace.   stability=1  CustomNodeInfo  The information about this custom node, based on the current state of this workspace.   stability=1  Category  Search category for this workspace, if it is a Custom Node.   stability=1  Description  A description of the workspace   stability=1  IsVisibleInDynamoLibrary  Custom node visibility in the Dynamo library", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/CustomNodeWorkspaceModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/CustomNodeWorkspaceModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/", 
            "text": "DynamoModel\n\n\nDynamoModel\n\n\nThe core model of Dynamo. \n\n\n\n\nMethods:\n\n\nDynamo.Models.DynamoModel.ShutDown(Boolean shutdownHost)\n\n\nExternal components call this method to shutdown DynamoModel. This method marks 'ShutdownRequested' property to 'true'. This method is used rather than a public virtual method to ensure that the value of ShutdownRequested is set to true. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshutdownHost:\n\n\nSet this parameter to true to shutdown the host application.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.Start()\n\n\nStart DynamoModel with all default configuration options \n\n\nReturns: \n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.Dispose()\n\n\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. \n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.ResetEngine(Boolean markNodesAsDirty)\n\n\nCall this method to reset the virtual machine, avoiding a race condition by using a thread join inside the vm executive. TODO(Luke): Push this into a resync call with the engine controller \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmarkNodesAsDirty:\n\n\nSet this parameter to true to force reset of the execution substrait. Note that setting this parameter to true will have a negative performance impact.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.ForceRun()\n\n\nForces an evaluation of the current workspace by resetting the DesignScript VM. \n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.OpenFileFromPath(String xmlPath)\n\n\nOpens a Dynamo workspace from a path to an Xml file on disk. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxmlPath:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.AddHomeWorkspace()\n\n\nAdd a new HomeWorkspace and set as current \n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.AddCustomNodeWorkspace(\nCustomNodeWorkspaceModel\n workspace)\n\n\nAdd a new, visible Custom Node workspace to Dynamo \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspace:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.RemoveWorkspace(\nWorkspaceModel\n workspace)\n\n\nRemove a workspace from the dynamo model. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkspace:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.OpenCustomNodeWorkspace(Guid guid)\n\n\nOpens an existing custom node workspace. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nguid:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.AddNodeToCurrentWorkspace(\nNodeModel\n node,Boolean centered)\n\n\nAdds a node to the current workspace. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnode:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncentered:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.Copy()\n\n\nCopy selected ISelectable objects to the clipboard. \n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.Paste()\n\n\nPaste ISelectable objects from the clipboard to the workspace. \n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.AddToSelection(Object parameters)\n\n\nAdd an ISelectable object to the selection. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparameters:\n\n\nThe object to add to the selection.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.DynamoModel.ClearCurrentWorkspace()\n\n\nClear the workspace. Removes all nodes, notes, and connectors from the current workspace. \n\n\nstability=1\n\n\nProperties:\n\n\nIsTestMode\n\n\nTesting flag is used to defer calls to run in the idle thread with the assumption that the entire test will be wrapped in an idle thread call. \n\n\nstability=1\n\n\nIsCrashing\n\n\nSpecifies whether or not Dynamo is in a crash-state. \n\n\nstability=1\n\n\nEnableMigrationLogging\n\n\nSetting this flag enables creation of an XML in following format that records node mapping information - which old node has been converted to which to new node(s) \n\n\nstability=1\n\n\nEngineController\n\n\nDesignScript VM EngineController, used for this instance of Dynamo. \n\n\nstability=1\n\n\nShutdownRequested\n\n\nFlag specifying whether a shutdown of Dynamo was requested. \n\n\nstability=1\n\n\nVersion\n\n\nThis version of Dynamo. \n\n\nstability=1\n\n\nUpdateManager\n\n\nUpdateManager to handle automatic upgrade to higher version. \n\n\nstability=1\n\n\nPathManager\n\n\nThe path manager that configures path information required for Dynamo to function properly. See IPathManager interface for more details. \n\n\nstability=1\n\n\nExtensionManager\n\n\nManages all extensions for Dynamo \n\n\nstability=1\n\n\nScheduler\n\n\nThe Dynamo Scheduler, handles scheduling of asynchronous tasks on different threads. \n\n\nstability=1\n\n\nCurrentWorkspace\n\n\nThe active workspace in Dynamo. \n\n\nstability=1\n\n\nClipBoard\n\n\nThe copy/paste clipboard. \n\n\nstability=1\n\n\nIsShowingConnectors\n\n\nSpecifies whether connectors are displayed in Dynamo. \n\n\nstability=1\n\n\nConnectorType\n\n\nSpecifies how connectors are displayed in Dynamo. \n\n\nstability=1\n\n\nTraceReconciliationProcessor\n\n\nAn object which implements the ITraceReconciliationProcessor interface, and is used for handlling the results of a trace reconciliation. \n\n\nstability=1\n\n\nEvents:\n\n\nCleaningUp\n\n\nAn event triggered when the workspace is being cleaned. \n\n\nstability=1\n\n\nWorkspaceHidden\n\n\nEvent called when a workspace is hidden \n\n\nstability=1\n\n\nRequestNodeSelect\n\n\nAn event which requests that a node be selected \n\n\nstability=1\n\n\nEvaluationCompleted\n\n\nAn event triggered when a single graph evaluation completes. \n\n\nstability=1\n\n\nRefreshCompleted\n\n\nAn event triggered when all tasks in scheduler are completed. \n\n\nstability=1\n\n\nWorkspaceOpening\n\n\nEvent that is fired during the opening of the workspace. Use the XmlDocument object provided to conduct additional workspace opening operations. \n\n\nstability=1\n\n\nShutdownStarted\n\n\nThis event is raised right before the shutdown of DynamoModel started. When this event is raised, the shutdown is guaranteed to take place (i.e. user has had a chance to save the work and decided to proceed with shutting down Dynamo). Handlers of this event can still safely access the DynamoModel, the WorkspaceModel (along with its contents), and the DynamoScheduler. \n\n\nstability=1\n\n\nShutdownCompleted\n\n\nThis event is raised after DynamoModel has been shut down. At this point the DynamoModel is no longer valid and access to it should be avoided. \n\n\nstability=1", 
            "title": "DynamoModel"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#dynamomodel", 
            "text": "", 
            "title": "DynamoModel"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#dynamomodel_1", 
            "text": "The core model of Dynamo.", 
            "title": "DynamoModel"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#methods", 
            "text": "Dynamo.Models.DynamoModel.ShutDown(Boolean shutdownHost)  External components call this method to shutdown DynamoModel. This method marks 'ShutdownRequested' property to 'true'. This method is used rather than a public virtual method to ensure that the value of ShutdownRequested is set to true.      Name  Description      shutdownHost:  Set this parameter to true to shutdown the host application.     stability=1  Dynamo.Models.DynamoModel.Start()  Start DynamoModel with all default configuration options   Returns:   stability=1  Dynamo.Models.DynamoModel.Dispose()  Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.   stability=1  Dynamo.Models.DynamoModel.ResetEngine(Boolean markNodesAsDirty)  Call this method to reset the virtual machine, avoiding a race condition by using a thread join inside the vm executive. TODO(Luke): Push this into a resync call with the engine controller      Name  Description      markNodesAsDirty:  Set this parameter to true to force reset of the execution substrait. Note that setting this parameter to true will have a negative performance impact.     stability=1  Dynamo.Models.DynamoModel.ForceRun()  Forces an evaluation of the current workspace by resetting the DesignScript VM.   stability=1  Dynamo.Models.DynamoModel.OpenFileFromPath(String xmlPath)  Opens a Dynamo workspace from a path to an Xml file on disk.      Name  Description      xmlPath:      stability=1  Dynamo.Models.DynamoModel.AddHomeWorkspace()  Add a new HomeWorkspace and set as current   stability=1  Dynamo.Models.DynamoModel.AddCustomNodeWorkspace( CustomNodeWorkspaceModel  workspace)  Add a new, visible Custom Node workspace to Dynamo      Name  Description      workspace:      stability=1  Dynamo.Models.DynamoModel.RemoveWorkspace( WorkspaceModel  workspace)  Remove a workspace from the dynamo model.      Name  Description      workspace:      stability=1  Dynamo.Models.DynamoModel.OpenCustomNodeWorkspace(Guid guid)  Opens an existing custom node workspace.      Name  Description      guid:     Returns:      stability=1  Dynamo.Models.DynamoModel.AddNodeToCurrentWorkspace( NodeModel  node,Boolean centered)  Adds a node to the current workspace.      Name  Description      node:     Name  Description    -----  ------    centered:      stability=1  Dynamo.Models.DynamoModel.Copy()  Copy selected ISelectable objects to the clipboard.   stability=1  Dynamo.Models.DynamoModel.Paste()  Paste ISelectable objects from the clipboard to the workspace.   stability=1  Dynamo.Models.DynamoModel.AddToSelection(Object parameters)  Add an ISelectable object to the selection.      Name  Description      parameters:  The object to add to the selection.     stability=1  Dynamo.Models.DynamoModel.ClearCurrentWorkspace()  Clear the workspace. Removes all nodes, notes, and connectors from the current workspace.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#properties", 
            "text": "IsTestMode  Testing flag is used to defer calls to run in the idle thread with the assumption that the entire test will be wrapped in an idle thread call.   stability=1  IsCrashing  Specifies whether or not Dynamo is in a crash-state.   stability=1  EnableMigrationLogging  Setting this flag enables creation of an XML in following format that records node mapping information - which old node has been converted to which to new node(s)   stability=1  EngineController  DesignScript VM EngineController, used for this instance of Dynamo.   stability=1  ShutdownRequested  Flag specifying whether a shutdown of Dynamo was requested.   stability=1  Version  This version of Dynamo.   stability=1  UpdateManager  UpdateManager to handle automatic upgrade to higher version.   stability=1  PathManager  The path manager that configures path information required for Dynamo to function properly. See IPathManager interface for more details.   stability=1  ExtensionManager  Manages all extensions for Dynamo   stability=1  Scheduler  The Dynamo Scheduler, handles scheduling of asynchronous tasks on different threads.   stability=1  CurrentWorkspace  The active workspace in Dynamo.   stability=1  ClipBoard  The copy/paste clipboard.   stability=1  IsShowingConnectors  Specifies whether connectors are displayed in Dynamo.   stability=1  ConnectorType  Specifies how connectors are displayed in Dynamo.   stability=1  TraceReconciliationProcessor  An object which implements the ITraceReconciliationProcessor interface, and is used for handlling the results of a trace reconciliation.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#events", 
            "text": "CleaningUp  An event triggered when the workspace is being cleaned.   stability=1  WorkspaceHidden  Event called when a workspace is hidden   stability=1  RequestNodeSelect  An event which requests that a node be selected   stability=1  EvaluationCompleted  An event triggered when a single graph evaluation completes.   stability=1  RefreshCompleted  An event triggered when all tasks in scheduler are completed.   stability=1  WorkspaceOpening  Event that is fired during the opening of the workspace. Use the XmlDocument object provided to conduct additional workspace opening operations.   stability=1  ShutdownStarted  This event is raised right before the shutdown of DynamoModel started. When this event is raised, the shutdown is guaranteed to take place (i.e. user has had a chance to save the work and decided to proceed with shutting down Dynamo). Handlers of this event can still safely access the DynamoModel, the WorkspaceModel (along with its contents), and the DynamoScheduler.   stability=1  ShutdownCompleted  This event is raised after DynamoModel has been shut down. At this point the DynamoModel is no longer valid and access to it should be avoided.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModel/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModelHandler/", 
            "text": "DynamoModelHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DynamoModelHandler"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModelHandler/#dynamomodelhandler", 
            "text": "", 
            "title": "DynamoModelHandler"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModelHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModelHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/DynamoModelHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ElementState/", 
            "text": "ElementState\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ElementState"
        }, 
        {
            "location": "/Dynamo_Models/ElementState/#elementstate", 
            "text": "", 
            "title": "ElementState"
        }, 
        {
            "location": "/Dynamo_Models/ElementState/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ElementState/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ElementState/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/EvaluationCompletedEventArgs/", 
            "text": "EvaluationCompletedEventArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "EvaluationCompletedEventArgs"
        }, 
        {
            "location": "/Dynamo_Models/EvaluationCompletedEventArgs/#evaluationcompletedeventargs", 
            "text": "", 
            "title": "EvaluationCompletedEventArgs"
        }, 
        {
            "location": "/Dynamo_Models/EvaluationCompletedEventArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/EvaluationCompletedEventArgs/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/EvaluationCompletedEventArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/", 
            "text": "HomeWorkspaceModel\n\n\n\n\nMethods:\n\n\nDynamo.Models.HomeWorkspaceModel.Clear()\n\n\nClears this workspace of nodes, notes, and connectors. \n\n\nstability=1\n\n\nDynamo.Models.HomeWorkspaceModel.StartPeriodicEvaluation()\n\n\nStart periodic evaluation using the currently set RunPeriod \n\n\nstability=1\n\n\nDynamo.Models.HomeWorkspaceModel.StopPeriodicEvaluation()\n\n\nStop the on-going periodic evaluation, if there is any. \n\n\nstability=1\n\n\nDynamo.Models.HomeWorkspaceModel.ResetEngine(\nEngineController\n controller,Boolean markNodesAsDirty)\n\n\nCall this method to reset the virtual machine, avoiding a race condition by using a thread join inside the vm executive. TODO(Luke): Push this into a resync call with the engine controller \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontroller:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nmarkNodesAsDirty:\n\n\nSet this parameter to true to force reset of the execution substrait. Note that setting this parameter to true will have a negative performance impact.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.HomeWorkspaceModel.Run()\n\n\nThis method is typically called from the main application thread (as a result of user actions such as button click or node UI changes) to schedule an update of the graph. This call may or may not represent an actual update. In the event that the user action does not result in actual graph update (e.g. moving of node on UI), the update task will not be scheduled for execution. \n\n\nstability=1\n\n\nDynamo.Models.HomeWorkspaceModel.GetExecutingNodes(Boolean showRunPreview)\n\n\nThis function gets the set of nodes that will get executed in the next run. This function will be called when the nodes are modified or when showrunpreview is set the executing nodes will be sent via SetNodeDeltaState event. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshowRunPreview:\n\n\nThis parameter controls the delta state computation\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.HomeWorkspaceModel.GetOrphanedSerializablesAndClearHistoricalTraceData()\n\n\nReturns a list of ISerializable items which exist in the preloaded trace data but do not exist in the current CallSite data. \n\n\nReturns: \n\n\nstability=1\n\n\nProperties:\n\n\nIsTestMode\n\n\nFlag specifying if this workspace is operating in \"test mode\". \n\n\nstability=1\n\n\nHasRunWithoutCrash\n\n\nIndicates whether a run has completed successfully. This flag is critical to ensuring that crashing run-auto files are not left in run-auto upon reopening. \n\n\nstability=1\n\n\nEvaluationCount\n\n\nEvaluation count is incremented whenever the graph is evaluated. It is set to zero when the graph is Cleared. \n\n\nstability=1\n\n\nEvents:", 
            "title": "HomeWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/#homeworkspacemodel", 
            "text": "", 
            "title": "HomeWorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/#methods", 
            "text": "Dynamo.Models.HomeWorkspaceModel.Clear()  Clears this workspace of nodes, notes, and connectors.   stability=1  Dynamo.Models.HomeWorkspaceModel.StartPeriodicEvaluation()  Start periodic evaluation using the currently set RunPeriod   stability=1  Dynamo.Models.HomeWorkspaceModel.StopPeriodicEvaluation()  Stop the on-going periodic evaluation, if there is any.   stability=1  Dynamo.Models.HomeWorkspaceModel.ResetEngine( EngineController  controller,Boolean markNodesAsDirty)  Call this method to reset the virtual machine, avoiding a race condition by using a thread join inside the vm executive. TODO(Luke): Push this into a resync call with the engine controller      Name  Description      controller:     Name  Description    -----  ------    markNodesAsDirty:  Set this parameter to true to force reset of the execution substrait. Note that setting this parameter to true will have a negative performance impact.     stability=1  Dynamo.Models.HomeWorkspaceModel.Run()  This method is typically called from the main application thread (as a result of user actions such as button click or node UI changes) to schedule an update of the graph. This call may or may not represent an actual update. In the event that the user action does not result in actual graph update (e.g. moving of node on UI), the update task will not be scheduled for execution.   stability=1  Dynamo.Models.HomeWorkspaceModel.GetExecutingNodes(Boolean showRunPreview)  This function gets the set of nodes that will get executed in the next run. This function will be called when the nodes are modified or when showrunpreview is set the executing nodes will be sent via SetNodeDeltaState event.      Name  Description      showRunPreview:  This parameter controls the delta state computation     stability=1  Dynamo.Models.HomeWorkspaceModel.GetOrphanedSerializablesAndClearHistoricalTraceData()  Returns a list of ISerializable items which exist in the preloaded trace data but do not exist in the current CallSite data.   Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/#properties", 
            "text": "IsTestMode  Flag specifying if this workspace is operating in \"test mode\".   stability=1  HasRunWithoutCrash  Indicates whether a run has completed successfully. This flag is critical to ensuring that crashing run-auto files are not left in run-auto upon reopening.   stability=1  EvaluationCount  Evaluation count is incremented whenever the graph is evaluated. It is set to zero when the graph is Cleared.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/HomeWorkspaceModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/IEngineControllerManager/", 
            "text": "IEngineControllerManager\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IEngineControllerManager"
        }, 
        {
            "location": "/Dynamo_Models/IEngineControllerManager/#ienginecontrollermanager", 
            "text": "", 
            "title": "IEngineControllerManager"
        }, 
        {
            "location": "/Dynamo_Models/IEngineControllerManager/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/IEngineControllerManager/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/IEngineControllerManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ILocatable/", 
            "text": "ILocatable\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ILocatable"
        }, 
        {
            "location": "/Dynamo_Models/ILocatable/#ilocatable", 
            "text": "", 
            "title": "ILocatable"
        }, 
        {
            "location": "/Dynamo_Models/ILocatable/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ILocatable/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ILocatable/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/", 
            "text": "INodeFactory`1\n\n\nINodeFactory`1\n\n\nAn object which can create a new NodeModel. \n\n\n\n\nMethods:\n\n\nDynamo.Models.INodeFactory`1.CreateNode()\n\n\nCreates a new NodeModel instance. \n\n\nReturns: \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "INodeFactory`1"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/#inodefactory1", 
            "text": "", 
            "title": "INodeFactory`1"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/#inodefactory1_1", 
            "text": "An object which can create a new NodeModel.", 
            "title": "INodeFactory`1"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/#methods", 
            "text": "Dynamo.Models.INodeFactory`1.CreateNode()  Creates a new NodeModel instance.   Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/INodeFactory`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/", 
            "text": "INodeLoader`1\n\n\nINodeLoader`1\n\n\nAn object which can load a NodeModel from Xml. \n\n\n\n\nMethods:\n\n\nDynamo.Models.INodeLoader`1.CreateNodeFromXml(XmlElement elNode,\nSaveContext\n context,ElementResolver resolver)\n\n\nCreate a new NodeModel from its serialized form. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nelNode:\n\n\nSerialized NodeModel\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncontext:\n\n\nSerialization context\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nresolver:\n\n\nElement resolver for resolve namespace conflict\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "INodeLoader`1"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/#inodeloader1", 
            "text": "", 
            "title": "INodeLoader`1"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/#inodeloader1_1", 
            "text": "An object which can load a NodeModel from Xml.", 
            "title": "INodeLoader`1"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/#methods", 
            "text": "Dynamo.Models.INodeLoader`1.CreateNodeFromXml(XmlElement elNode, SaveContext  context,ElementResolver resolver)  Create a new NodeModel from its serialized form.      Name  Description      elNode:  Serialized NodeModel    Name  Description    -----  ------    context:  Serialization context    Name  Description    -----  ------    resolver:  Element resolver for resolve namespace conflict    Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/INodeLoader`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/LacingStrategy/", 
            "text": "LacingStrategy\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "LacingStrategy"
        }, 
        {
            "location": "/Dynamo_Models/LacingStrategy/#lacingstrategy", 
            "text": "", 
            "title": "LacingStrategy"
        }, 
        {
            "location": "/Dynamo_Models/LacingStrategy/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/LacingStrategy/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/LacingStrategy/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/", 
            "text": "ModelBase\n\n\n\n\nMethods:\n\n\nDynamo.Models.ModelBase.SetSize(Double w,Double h)\n\n\nSet the width and the height of the node model and report once. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nw:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nh:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nX\n\n\nThe X coordinate of the node in canvas space. \n\n\nstability=1\n\n\nY\n\n\nThe Y coordinate of the node in canvas space. \n\n\nstability=1\n\n\nPosition\n\n\nA position defined by the x and y components. Used for notification in situations where you don't want to have property notifications for X and Y \n\n\nstability=1\n\n\nHeight\n\n\nThe height of the node. \n\n\nstability=1\n\n\nWidth\n\n\nThe width of the node. \n\n\nstability=1\n\n\nEvents:\n\n\nDisposed\n\n\nFired when this Model is disposed. \n\n\nstability=1", 
            "title": "ModelBase"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#modelbase", 
            "text": "", 
            "title": "ModelBase"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#methods", 
            "text": "Dynamo.Models.ModelBase.SetSize(Double w,Double h)  Set the width and the height of the node model and report once.      Name  Description      w:     Name  Description    -----  ------    h:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#properties", 
            "text": "X  The X coordinate of the node in canvas space.   stability=1  Y  The Y coordinate of the node in canvas space.   stability=1  Position  A position defined by the x and y components. Used for notification in situations where you don't want to have property notifications for X and Y   stability=1  Height  The height of the node.   stability=1  Width  The width of the node.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#events", 
            "text": "Disposed  Fired when this Model is disposed.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ModelBase/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeEventHandler/", 
            "text": "NodeEventHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeEventHandler"
        }, 
        {
            "location": "/Dynamo_Models/NodeEventHandler/#nodeeventhandler", 
            "text": "", 
            "title": "NodeEventHandler"
        }, 
        {
            "location": "/Dynamo_Models/NodeEventHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NodeEventHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NodeEventHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/", 
            "text": "NodeFactory\n\n\nNodeFactory\n\n\nManages factories and loaders for NodeModels. Can use registered factories and loaders to instantiate and load new NodeModels. \n\n\n\n\nMethods:\n\n\nDynamo.Models.NodeFactory.AddTypeFactoryAndLoader\nT\n()\n\n\nAttempts to create a new factory and loader for a given type. \n\n\nstability=1\n\n\nDynamo.Models.NodeFactory.AddTypeFactoryAndLoader(Type nodeType)\n\n\nAttempts to create a new factory and loader for a given type. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnodeType:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeFactory.AddAlsoKnownAs(Type realType,String aka,Boolean overwrite)\n\n\nRegisters a type with another name that it may go by. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrealType:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\naka:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\noverwrite:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeFactory.CreateNodeFromXml(XmlElement elNode,\nSaveContext\n context)\n\n\nCreates and Loads a new NodeModel from its Serialized form, using the node loaders registered in this factory. If loading fails, a Dummy Node is produced. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nelNode:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncontext:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeFactory"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/#nodefactory", 
            "text": "", 
            "title": "NodeFactory"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/#nodefactory_1", 
            "text": "Manages factories and loaders for NodeModels. Can use registered factories and loaders to instantiate and load new NodeModels.", 
            "title": "NodeFactory"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/#methods", 
            "text": "Dynamo.Models.NodeFactory.AddTypeFactoryAndLoader T ()  Attempts to create a new factory and loader for a given type.   stability=1  Dynamo.Models.NodeFactory.AddTypeFactoryAndLoader(Type nodeType)  Attempts to create a new factory and loader for a given type.      Name  Description      nodeType:      stability=1  Dynamo.Models.NodeFactory.AddAlsoKnownAs(Type realType,String aka,Boolean overwrite)  Registers a type with another name that it may go by.      Name  Description      realType:     Name  Description    -----  ------    aka:     Name  Description    -----  ------    overwrite:      stability=1  Dynamo.Models.NodeFactory.CreateNodeFromXml(XmlElement elNode, SaveContext  context)  Creates and Loads a new NodeModel from its Serialized form, using the node loaders registered in this factory. If loading fails, a Dummy Node is produced.      Name  Description      elNode:     Name  Description    -----  ------    context:     Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NodeFactory/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/NodeHandler/", 
            "text": "NodeHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeHandler"
        }, 
        {
            "location": "/Dynamo_Models/NodeHandler/#nodehandler", 
            "text": "", 
            "title": "NodeHandler"
        }, 
        {
            "location": "/Dynamo_Models/NodeHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NodeHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NodeHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/", 
            "text": "NodeModel\n\n\n\n\nMethods:\n\n\nDynamo.Models.NodeModel.HasInput(Int32 data)\n\n\nChecks if there is an input for a certain port. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata:\n\n\nIndex of the port to look for an input for.\n\n\n\n\n\n\nReturns: True if there is an input, false otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.HasConnectedInput(Int32 data)\n\n\nChecks if there is a connected input for a certain port. This does not count default values as an input. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata:\n\n\nIndex of the port to look for an input for.\n\n\n\n\n\n\nReturns: True if there is an input, false otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.HasOutput(Int32 portData)\n\n\nChecks if there is an output for a certain port. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nportData:\n\n\nIndex of the port to look for an output for.\n\n\n\n\n\n\nReturns: True if there is an output, false otherwise.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.ClearRuntimeError()\n\n\nClears the errors/warnings that are generated when running the graph. If the node has a value supplied for the persistentWarning, then the node's State will be set to ElementState.Persistent and the ToolTipText will be set to the persistent warning. Otherwise, the State will be set to ElementState.Dead \n\n\nstability=1\n\n\nDynamo.Models.NodeModel.Warning(String p,Boolean isPersistent)\n\n\nSet a warning on a node. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\np:\n\n\nThe warning text.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisPersistent:\n\n\nIs the warning persistent? If true, the warning will not be cleared when the node is next evaluated and any additional warning messages will be concatenated to the persistent error message. If false, the warning will be cleared on the next evaluation.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.NotifyAstBuildBroken(String p)\n\n\nChange the state of node to ElementState.AstBuildBroken and display \"p\" in tooltip window. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\np:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.RegisterInputPorts()\n\n\nReads inputs list and adds ports for each input. \n\n\nstability=1\n\n\nDynamo.Models.NodeModel.RegisterOutputPorts()\n\n\nReads outputs list and adds ports for each output \n\n\nstability=1\n\n\nDynamo.Models.NodeModel.RegisterAllPorts()\n\n\nUpdates UI so that all ports reflect current state of InPortData and OutPortData. \n\n\nstability=1\n\n\nDynamo.Models.NodeModel.AddPort(\nPortType\n portType,\nPortData\n data,Int32 index)\n\n\nAdd a port to this node. If the port already exists, return that port. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nportType:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ndata:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nindex:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.PrintExpression()\n\n\nCreates a Scheme representation of this dynNode and all connected dynNodes. \n\n\nReturns: S-Expression\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.RequestVisualUpdateAsync(\nIScheduler\n scheduler,\nEngineController\n engine,\nIRenderPackageFactory\n factory)\n\n\nCall this method to asynchronously regenerate render package for this node. This method accesses core properties of a NodeModel and therefore is typically called on the main/UI thread. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscheduler:\n\n\nAn IScheduler on which the task will be scheduled.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nengine:\n\n\nThe EngineController which will be used to get MirrorData for the node.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nfactory:\n\n\nAn IRenderPackageFactory which will be used to generate IRenderPackage objects.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.DispatchOnUIThread(Action a)\n\n\nCalled by nodes for behavior that they want to dispatch on the UI thread Triggers event to be received by the UI. If no UI exists, behavior will not be executed. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.GetDescriptionStringFromAttributes()\n\n\nGet the description from type information \n\n\nReturns: The value or \"No description provided\"\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.GetAstIdentifierForOutputIndex(Int32 outputIndex)\n\n\nFetches the ProtoAST Identifier for a given output port. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noutputIndex:\n\n\nIndex of the output port.\n\n\n\n\n\n\nReturns: Identifier corresponding to the given output port.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.GetTypeHintForOutput()\n\n\nThe possible type of output at specified port. This type information is not necessary to be accurate. \n\n\nReturns: \n\n\nstability=1\n\n\nDynamo.Models.NodeModel.GetValue(Int32 outPortIndex,\nEngineController\n engine)\n\n\nGets the most recent value of this node stored in an EngineController that has evaluated it. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noutPortIndex:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nengine:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.NodeModel.SetNickNameFromAttribute()\n\n\nSets the nickname of this node from the attributes on the class definining it. \n\n\nstability=1\n\n\nProperties:\n\n\nCreationName\n\n\nThe unique name that was created the node by \n\n\nstability=1\n\n\nInPortData\n\n\nDefinitions for the Input Ports of this NodeModel. \n\n\nstability=1\n\n\nOutPortData\n\n\nDefinitions for the Output Ports of this NodeModel. \n\n\nstability=1\n\n\nAllConnectors\n\n\nAll of the connectors entering and exiting the NodeModel. \n\n\nstability=1\n\n\nIsCustomFunction\n\n\nReturns whether this node represents a built-in or custom function. \n\n\nstability=1\n\n\nIsVisible\n\n\nReturns whether the node is to be included in visualizations. \n\n\nstability=1\n\n\nIsUpstreamVisible\n\n\nReturns whether the node aggregates its upstream connections for visualizations. \n\n\nstability=1\n\n\nIsInputNode\n\n\nInput nodes are used in Customizer and Presets. Input nodes can be numbers, number sliders, strings, bool, code blocks and custom nodes, which don't specify path. \n\n\nstability=1\n\n\nIsSelectedInput\n\n\nSpecifies whether an input node should be included in a preset. By default, this field is set to true. \n\n\nstability=1\n\n\nState\n\n\nThe Node's state, which determines the coloring of the Node in the canvas. \n\n\nstability=1\n\n\nIsInErrorState\n\n\nIf the state of node is Error or AstBuildBroken \n\n\nstability=1\n\n\nToolTipText\n\n\nText that is displayed as this Node's tooltip. \n\n\nstability=1\n\n\nOverrideNameWithNickName\n\n\nShould we override the displayed name with this Node's NickName property? \n\n\nstability=1\n\n\nNickName\n\n\nThe name that is displayed in the UI for this NodeModel. \n\n\nstability=1\n\n\nInPorts\n\n\nCollection of PortModels representing all Input ports. \n\n\nstability=1\n\n\nOutPorts\n\n\nCollection of PortModels representing all Output ports. \n\n\nstability=1\n\n\nArgumentLacing\n\n\nControl how arguments lists of various sizes are laced. \n\n\nstability=1\n\n\nName\n\n\nName property \n\n\nstability=1\n\n\nCategory\n\n\nCategory property \n\n\nstability=1\n\n\nIsUpdated\n\n\nIf the node is updated in LiveRunner's execution \n\n\nstability=1\n\n\nTags\n\n\nSearch tags for this Node. \n\n\nstability=1\n\n\nDescription\n\n\nDescription of this Node. \n\n\nstability=1\n\n\nAstIdentifierForPreview\n\n\nProtoAST Identifier for result of the node before any output unpacking has taken place. If there is only one output for the node, this is equivalent to GetAstIdentifierForOutputIndex(0). \n\n\nstability=1\n\n\nIsConvertible\n\n\nIf this node is allowed to be converted to AST node in nodes to code conversion. \n\n\nstability=1\n\n\nAstIdentifierBase\n\n\nReturn a variable whose value will be displayed in preview window. Derived nodes may overwrite this function to display default value of this node. E.g., code block node may want to display the value of the left hand side variable of last statement. \n\n\nstability=1\n\n\nDisplayLabels\n\n\nEnable or disable label display. Default is false. \n\n\nstability=1\n\n\nIsPartiallyApplied\n\n\nIs this node being applied partially, resulting in a partial function? \n\n\nstability=1\n\n\nRaisesModificationEvents\n\n\nIndicate if the node should respond to NodeModified event. It always should be true, unless is temporarily set to false to avoid flood of Modified event. \n\n\nstability=1\n\n\nIsTopMostNode\n\n\nIf node is connected to some other node(other than Output) then it is not a 'top' node \n\n\nstability=1\n\n\nEvents:\n\n\nModified\n\n\nEvent fired when the node's DesignScript AST should be recompiled \n\n\nstability=1\n\n\nConnectorAdded\n\n\nEvent fired when a new ConnectorModel has been attached to one of this node's inputs. \n\n\nstability=1", 
            "title": "NodeModel"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#nodemodel", 
            "text": "", 
            "title": "NodeModel"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#methods", 
            "text": "Dynamo.Models.NodeModel.HasInput(Int32 data)  Checks if there is an input for a certain port.      Name  Description      data:  Index of the port to look for an input for.    Returns: True if there is an input, false otherwise.      stability=1  Dynamo.Models.NodeModel.HasConnectedInput(Int32 data)  Checks if there is a connected input for a certain port. This does not count default values as an input.      Name  Description      data:  Index of the port to look for an input for.    Returns: True if there is an input, false otherwise.      stability=1  Dynamo.Models.NodeModel.HasOutput(Int32 portData)  Checks if there is an output for a certain port.      Name  Description      portData:  Index of the port to look for an output for.    Returns: True if there is an output, false otherwise.      stability=1  Dynamo.Models.NodeModel.ClearRuntimeError()  Clears the errors/warnings that are generated when running the graph. If the node has a value supplied for the persistentWarning, then the node's State will be set to ElementState.Persistent and the ToolTipText will be set to the persistent warning. Otherwise, the State will be set to ElementState.Dead   stability=1  Dynamo.Models.NodeModel.Warning(String p,Boolean isPersistent)  Set a warning on a node.      Name  Description      p:  The warning text.    Name  Description    -----  ------    isPersistent:  Is the warning persistent? If true, the warning will not be cleared when the node is next evaluated and any additional warning messages will be concatenated to the persistent error message. If false, the warning will be cleared on the next evaluation.     stability=1  Dynamo.Models.NodeModel.NotifyAstBuildBroken(String p)  Change the state of node to ElementState.AstBuildBroken and display \"p\" in tooltip window.      Name  Description      p:      stability=1  Dynamo.Models.NodeModel.RegisterInputPorts()  Reads inputs list and adds ports for each input.   stability=1  Dynamo.Models.NodeModel.RegisterOutputPorts()  Reads outputs list and adds ports for each output   stability=1  Dynamo.Models.NodeModel.RegisterAllPorts()  Updates UI so that all ports reflect current state of InPortData and OutPortData.   stability=1  Dynamo.Models.NodeModel.AddPort( PortType  portType, PortData  data,Int32 index)  Add a port to this node. If the port already exists, return that port.      Name  Description      portType:     Name  Description    -----  ------    data:     Name  Description    -----  ------    index:     Returns:      stability=1  Dynamo.Models.NodeModel.PrintExpression()  Creates a Scheme representation of this dynNode and all connected dynNodes.   Returns: S-Expression  stability=1  Dynamo.Models.NodeModel.RequestVisualUpdateAsync( IScheduler  scheduler, EngineController  engine, IRenderPackageFactory  factory)  Call this method to asynchronously regenerate render package for this node. This method accesses core properties of a NodeModel and therefore is typically called on the main/UI thread.      Name  Description      scheduler:  An IScheduler on which the task will be scheduled.    Name  Description    -----  ------    engine:  The EngineController which will be used to get MirrorData for the node.    Name  Description    -----  ------    factory:  An IRenderPackageFactory which will be used to generate IRenderPackage objects.     stability=1  Dynamo.Models.NodeModel.DispatchOnUIThread(Action a)  Called by nodes for behavior that they want to dispatch on the UI thread Triggers event to be received by the UI. If no UI exists, behavior will not be executed.      Name  Description      a:      stability=1  Dynamo.Models.NodeModel.GetDescriptionStringFromAttributes()  Get the description from type information   Returns: The value or \"No description provided\"  stability=1  Dynamo.Models.NodeModel.GetAstIdentifierForOutputIndex(Int32 outputIndex)  Fetches the ProtoAST Identifier for a given output port.      Name  Description      outputIndex:  Index of the output port.    Returns: Identifier corresponding to the given output port.      stability=1  Dynamo.Models.NodeModel.GetTypeHintForOutput()  The possible type of output at specified port. This type information is not necessary to be accurate.   Returns:   stability=1  Dynamo.Models.NodeModel.GetValue(Int32 outPortIndex, EngineController  engine)  Gets the most recent value of this node stored in an EngineController that has evaluated it.      Name  Description      outPortIndex:     Name  Description    -----  ------    engine:     Returns:      stability=1  Dynamo.Models.NodeModel.SetNickNameFromAttribute()  Sets the nickname of this node from the attributes on the class definining it.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#properties", 
            "text": "CreationName  The unique name that was created the node by   stability=1  InPortData  Definitions for the Input Ports of this NodeModel.   stability=1  OutPortData  Definitions for the Output Ports of this NodeModel.   stability=1  AllConnectors  All of the connectors entering and exiting the NodeModel.   stability=1  IsCustomFunction  Returns whether this node represents a built-in or custom function.   stability=1  IsVisible  Returns whether the node is to be included in visualizations.   stability=1  IsUpstreamVisible  Returns whether the node aggregates its upstream connections for visualizations.   stability=1  IsInputNode  Input nodes are used in Customizer and Presets. Input nodes can be numbers, number sliders, strings, bool, code blocks and custom nodes, which don't specify path.   stability=1  IsSelectedInput  Specifies whether an input node should be included in a preset. By default, this field is set to true.   stability=1  State  The Node's state, which determines the coloring of the Node in the canvas.   stability=1  IsInErrorState  If the state of node is Error or AstBuildBroken   stability=1  ToolTipText  Text that is displayed as this Node's tooltip.   stability=1  OverrideNameWithNickName  Should we override the displayed name with this Node's NickName property?   stability=1  NickName  The name that is displayed in the UI for this NodeModel.   stability=1  InPorts  Collection of PortModels representing all Input ports.   stability=1  OutPorts  Collection of PortModels representing all Output ports.   stability=1  ArgumentLacing  Control how arguments lists of various sizes are laced.   stability=1  Name  Name property   stability=1  Category  Category property   stability=1  IsUpdated  If the node is updated in LiveRunner's execution   stability=1  Tags  Search tags for this Node.   stability=1  Description  Description of this Node.   stability=1  AstIdentifierForPreview  ProtoAST Identifier for result of the node before any output unpacking has taken place. If there is only one output for the node, this is equivalent to GetAstIdentifierForOutputIndex(0).   stability=1  IsConvertible  If this node is allowed to be converted to AST node in nodes to code conversion.   stability=1  AstIdentifierBase  Return a variable whose value will be displayed in preview window. Derived nodes may overwrite this function to display default value of this node. E.g., code block node may want to display the value of the left hand side variable of last statement.   stability=1  DisplayLabels  Enable or disable label display. Default is false.   stability=1  IsPartiallyApplied  Is this node being applied partially, resulting in a partial function?   stability=1  RaisesModificationEvents  Indicate if the node should respond to NodeModified event. It always should be true, unless is temporarily set to false to avoid flood of Modified event.   stability=1  IsTopMostNode  If node is connected to some other node(other than Output) then it is not a 'top' node", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#events", 
            "text": "Modified  Event fired when the node's DesignScript AST should be recompiled   stability=1  ConnectorAdded  Event fired when a new ConnectorModel has been attached to one of this node's inputs.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModel/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/", 
            "text": "NodeModelAssemblyLoader\n\n\nNodeModelAssemblyLoader\n\n\nThis class is responsible for loading types that derive from NodeModel. For information about package loading see the PackageLoader. For information about loading other libraries, see LibraryServices. \n\n\n\n\nMethods:\n\n\nDynamo.Models.NodeModelAssemblyLoader.IsNodeSubType()\n\n\nDetermine if a Type is a node. Used by LoadNodesFromAssembly to figure out what nodes to load from other libraries (.dlls). \n\n\nReturns: True if the type is node.\n\n\nstability=1\n\n\nProperties:\n\n\nLoadedAssemblies\n\n\nAll assemblies that have been loaded into Dynamo. \n\n\nstability=1\n\n\nEvents:", 
            "title": "NodeModelAssemblyLoader"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#nodemodelassemblyloader", 
            "text": "", 
            "title": "NodeModelAssemblyLoader"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#nodemodelassemblyloader_1", 
            "text": "This class is responsible for loading types that derive from NodeModel. For information about package loading see the PackageLoader. For information about loading other libraries, see LibraryServices.", 
            "title": "NodeModelAssemblyLoader"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#methods", 
            "text": "Dynamo.Models.NodeModelAssemblyLoader.IsNodeSubType()  Determine if a Type is a node. Used by LoadNodesFromAssembly to figure out what nodes to load from other libraries (.dlls).   Returns: True if the type is node.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#properties", 
            "text": "LoadedAssemblies  All assemblies that have been loaded into Dynamo.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelAssemblyLoader/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelExtensions/", 
            "text": "NodeModelExtensions\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeModelExtensions"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelExtensions/#nodemodelextensions", 
            "text": "", 
            "title": "NodeModelExtensions"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelExtensions/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelExtensions/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NodeModelExtensions/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/NoteModel/", 
            "text": "NoteModel\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NoteModel"
        }, 
        {
            "location": "/Dynamo_Models/NoteModel/#notemodel", 
            "text": "", 
            "title": "NoteModel"
        }, 
        {
            "location": "/Dynamo_Models/NoteModel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/NoteModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/NoteModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PortData/", 
            "text": "PortData\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "PortData"
        }, 
        {
            "location": "/Dynamo_Models/PortData/#portdata", 
            "text": "", 
            "title": "PortData"
        }, 
        {
            "location": "/Dynamo_Models/PortData/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PortData/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PortData/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PortEventType/", 
            "text": "PortEventType\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "PortEventType"
        }, 
        {
            "location": "/Dynamo_Models/PortEventType/#porteventtype", 
            "text": "", 
            "title": "PortEventType"
        }, 
        {
            "location": "/Dynamo_Models/PortEventType/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PortEventType/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PortEventType/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/", 
            "text": "PortModel\n\n\n\n\nMethods:\n\n\nDynamo.Models.PortModel.DestroyConnectors()\n\n\nDeletes all connectors attached to this PortModel. \n\n\nstability=1\n\n\nProperties:\n\n\nCenter\n\n\nCenter is used by connected connectors to update their shape The \"center\" of a port is derived from the type of port and offsets from the node origin based on the port's index in the ports collection. \n\n\nstability=1\n\n\nUsingDefaultValue\n\n\nControls whether this port is set to use it's default value (true) or yield a closure (false). \n\n\nstability=1\n\n\nDefaultValueEnabled\n\n\nControls whether the Use Default Value option is available. \n\n\nstability=1\n\n\nMarginThickness\n\n\nControls the space between successive output ports \n\n\nstability=1\n\n\nEvents:\n\n\nPortConnected\n\n\nEvent triggered when a port is connected. \n\n\nstability=1\n\n\nPortDisconnected\n\n\nEvent triggered when a port is disconnected. \n\n\nstability=1", 
            "title": "PortModel"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#portmodel", 
            "text": "", 
            "title": "PortModel"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#methods", 
            "text": "Dynamo.Models.PortModel.DestroyConnectors()  Deletes all connectors attached to this PortModel.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#properties", 
            "text": "Center  Center is used by connected connectors to update their shape The \"center\" of a port is derived from the type of port and offsets from the node origin based on the port's index in the ports collection.   stability=1  UsingDefaultValue  Controls whether this port is set to use it's default value (true) or yield a closure (false).   stability=1  DefaultValueEnabled  Controls whether the Use Default Value option is available.   stability=1  MarginThickness  Controls the space between successive output ports", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#events", 
            "text": "PortConnected  Event triggered when a port is connected.   stability=1  PortDisconnected  Event triggered when a port is disconnected.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PortModel/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/PortPosition/", 
            "text": "PortPosition\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "PortPosition"
        }, 
        {
            "location": "/Dynamo_Models/PortPosition/#portposition", 
            "text": "", 
            "title": "PortPosition"
        }, 
        {
            "location": "/Dynamo_Models/PortPosition/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PortPosition/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PortPosition/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PortsChangedHandler/", 
            "text": "PortsChangedHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "PortsChangedHandler"
        }, 
        {
            "location": "/Dynamo_Models/PortsChangedHandler/#portschangedhandler", 
            "text": "", 
            "title": "PortsChangedHandler"
        }, 
        {
            "location": "/Dynamo_Models/PortsChangedHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PortsChangedHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PortsChangedHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PortType/", 
            "text": "PortType\n\n\nPortType\n\n\nInteraction logic for dynPort.xaml \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "PortType"
        }, 
        {
            "location": "/Dynamo_Models/PortType/#porttype", 
            "text": "", 
            "title": "PortType"
        }, 
        {
            "location": "/Dynamo_Models/PortType/#porttype_1", 
            "text": "Interaction logic for dynPort.xaml", 
            "title": "PortType"
        }, 
        {
            "location": "/Dynamo_Models/PortType/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PortType/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PortType/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/", 
            "text": "PresetModel\n\n\nPresetModel\n\n\nThis class references a set of nodemodels, and a set of serialized versions of those nodemodels a client can use this class to store the state of a set of nodes from a graph \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nNodes\n\n\nlist of nodemodels that this state serializes \n\n\nstability=1\n\n\nSerializedNodes\n\n\nlist of serialized nodes \n\n\nstability=1\n\n\nEvents:", 
            "title": "PresetModel"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/#presetmodel", 
            "text": "", 
            "title": "PresetModel"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/#presetmodel_1", 
            "text": "This class references a set of nodemodels, and a set of serialized versions of those nodemodels a client can use this class to store the state of a set of nodes from a graph", 
            "title": "PresetModel"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/#properties", 
            "text": "Nodes  list of nodemodels that this state serializes   stability=1  SerializedNodes  list of serialized nodes", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/PresetModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/", 
            "text": "RunSettings\n\n\nRunSettings\n\n\nThe RunSettings object contains properties which control how execution is carried out. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nRunPeriod\n\n\nThe length, in milliseconds, of the period between requests to execute. \n\n\nstability=1\n\n\nRunType\n\n\nThe current RunType. \n\n\nstability=1\n\n\nRunEnabled\n\n\nA flag which indicates whether running is possible. This flag is set to false during execution and is set to true when execution is completed. \n\n\nstability=1\n\n\nEvents:", 
            "title": "RunSettings"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/#runsettings", 
            "text": "", 
            "title": "RunSettings"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/#runsettings_1", 
            "text": "The RunSettings object contains properties which control how execution is carried out.", 
            "title": "RunSettings"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/#properties", 
            "text": "RunPeriod  The length, in milliseconds, of the period between requests to execute.   stability=1  RunType  The current RunType.   stability=1  RunEnabled  A flag which indicates whether running is possible. This flag is set to false during execution and is set to true when execution is completed.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/RunSettings/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/RunType/", 
            "text": "RunType\n\n\nRunType\n\n\nThe RunType enumeration provides values for specifying the type of run that will be conducted. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "RunType"
        }, 
        {
            "location": "/Dynamo_Models/RunType/#runtype", 
            "text": "", 
            "title": "RunType"
        }, 
        {
            "location": "/Dynamo_Models/RunType/#runtype_1", 
            "text": "The RunType enumeration provides values for specifying the type of run that will be conducted.", 
            "title": "RunType"
        }, 
        {
            "location": "/Dynamo_Models/RunType/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/RunType/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/RunType/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/SaveContext/", 
            "text": "SaveContext\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "SaveContext"
        }, 
        {
            "location": "/Dynamo_Models/SaveContext/#savecontext", 
            "text": "", 
            "title": "SaveContext"
        }, 
        {
            "location": "/Dynamo_Models/SaveContext/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/SaveContext/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/SaveContext/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/", 
            "text": "ScopedNodeModel\n\n\nScopedNodeModel\n\n\nScopedNodeModel will put its children in its scope so that they won't get compiled in global scope. \n\n\n\n\nMethods:\n\n\nDynamo.Models.ScopedNodeModel.GetInScopeNodesForInport(Int32 portIndex,Boolean checkEscape,Boolean isInclusive)\n\n\nGet all nodes that in its input ports's scope. A node is in its scope if that node is one of its upstream nodes. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nportIndex:\n\n\nInport index\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncheckEscape:\n\n\nIf need to exclude nodes that one of their downstream nodes are not in the scope\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisInclusive:\n\n\nIf a upstream node is ScopedNodeModel, need to include all upstream nodes of that node.\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.ScopedNodeModel.GetInScopeNodes(Boolean checkEscape,Boolean isInclusive)\n\n\nReturn all nodes that are in the scope of this node. nodes are not in the scope. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncheckEscape:\n\n\nSpecifies if need to exclude nodes that one of their downstream nodes are not in the scope\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisInclusive:\n\n\nIf one of its upstream node is ScopedNodeModel, if need to include all upstream nodes of that node.\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ScopedNodeModel"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/#scopednodemodel", 
            "text": "", 
            "title": "ScopedNodeModel"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/#scopednodemodel_1", 
            "text": "ScopedNodeModel will put its children in its scope so that they won't get compiled in global scope.", 
            "title": "ScopedNodeModel"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/#methods", 
            "text": "Dynamo.Models.ScopedNodeModel.GetInScopeNodesForInport(Int32 portIndex,Boolean checkEscape,Boolean isInclusive)  Get all nodes that in its input ports's scope. A node is in its scope if that node is one of its upstream nodes.      Name  Description      portIndex:  Inport index    Name  Description    -----  ------    checkEscape:  If need to exclude nodes that one of their downstream nodes are not in the scope    Name  Description    -----  ------    isInclusive:  If a upstream node is ScopedNodeModel, need to include all upstream nodes of that node.    Returns:      stability=1  Dynamo.Models.ScopedNodeModel.GetInScopeNodes(Boolean checkEscape,Boolean isInclusive)  Return all nodes that are in the scope of this node. nodes are not in the scope.      Name  Description      checkEscape:  Specifies if need to exclude nodes that one of their downstream nodes are not in the scope    Name  Description    -----  ------    isInclusive:  If one of its upstream node is ScopedNodeModel, if need to include all upstream nodes of that node.    Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/ScopedNodeModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/SnapExtensionEdges/", 
            "text": "SnapExtensionEdges\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "SnapExtensionEdges"
        }, 
        {
            "location": "/Dynamo_Models/SnapExtensionEdges/#snapextensionedges", 
            "text": "", 
            "title": "SnapExtensionEdges"
        }, 
        {
            "location": "/Dynamo_Models/SnapExtensionEdges/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/SnapExtensionEdges/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/SnapExtensionEdges/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/TypeLoadData/", 
            "text": "TypeLoadData\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nAssembly\n\n\nAssembly containing the type. \n\n\nstability=1\n\n\nIsObsolete\n\n\nSpecifies whether or not this Type is obsolete. \n\n\nstability=1\n\n\nCategory\n\n\nThe category of this type, used in search. \n\n\nstability=1\n\n\nEvents:", 
            "title": "TypeLoadData"
        }, 
        {
            "location": "/Dynamo_Models/TypeLoadData/#typeloaddata", 
            "text": "", 
            "title": "TypeLoadData"
        }, 
        {
            "location": "/Dynamo_Models/TypeLoadData/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/TypeLoadData/#properties", 
            "text": "Assembly  Assembly containing the type.   stability=1  IsObsolete  Specifies whether or not this Type is obsolete.   stability=1  Category  The category of this type, used in search.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/TypeLoadData/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/TypeLoadData/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/UIDispatcherEventArgs/", 
            "text": "UIDispatcherEventArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "UIDispatcherEventArgs"
        }, 
        {
            "location": "/Dynamo_Models/UIDispatcherEventArgs/#uidispatchereventargs", 
            "text": "", 
            "title": "UIDispatcherEventArgs"
        }, 
        {
            "location": "/Dynamo_Models/UIDispatcherEventArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/UIDispatcherEventArgs/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/UIDispatcherEventArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/UpdateValueParams/", 
            "text": "UpdateValueParams\n\n\nUpdateValueParams\n\n\nThis class encapsulates the input parameters that need to be passed into nodes when they are updated in the UI. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "UpdateValueParams"
        }, 
        {
            "location": "/Dynamo_Models/UpdateValueParams/#updatevalueparams", 
            "text": "", 
            "title": "UpdateValueParams"
        }, 
        {
            "location": "/Dynamo_Models/UpdateValueParams/#updatevalueparams_1", 
            "text": "This class encapsulates the input parameters that need to be passed into nodes when they are updated in the UI.", 
            "title": "UpdateValueParams"
        }, 
        {
            "location": "/Dynamo_Models/UpdateValueParams/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/UpdateValueParams/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/UpdateValueParams/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceHandler/", 
            "text": "WorkspaceHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "WorkspaceHandler"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceHandler/#workspacehandler", 
            "text": "", 
            "title": "WorkspaceHandler"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceInfo/", 
            "text": "WorkspaceInfo\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "WorkspaceInfo"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceInfo/#workspaceinfo", 
            "text": "", 
            "title": "WorkspaceInfo"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceInfo/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceInfo/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceInfo/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/", 
            "text": "WorkspaceModel\n\n\n\n\nMethods:\n\n\nDynamo.Models.WorkspaceModel.Dispose()\n\n\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. \n\n\nstability=1\n\n\nDynamo.Models.WorkspaceModel.Clear()\n\n\nClears this workspace of nodes, notes, and connectors. \n\n\nstability=1\n\n\nDynamo.Models.WorkspaceModel.SaveAs(String newPath,RuntimeCore core,Boolean isBackup)\n\n\nSave to a specific file path, if the path is null or empty, does nothing. If successful, the CurrentWorkspace.FilePath field is updated as a side effect \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPath:\n\n\nThe path to save to\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\ncore:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nisBackup:\n\n\nIndicates whether saved workspace is backup or not. If it's not backup, we should add it to recent files. Otherwise leave it.\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.WorkspaceModel.AddAndRegisterNode()\n\n\nAdds a node to this workspace. \n\n\nstability=1\n\n\nDynamo.Models.WorkspaceModel.RemoveNode(\nNodeModel\n model)\n\n\nRemoves a node from this workspace. This method does not raise a NodesModified event. (LC notes this is clearly not true) \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodel:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Models.WorkspaceModel.Save()\n\n\nSave assuming that the Filepath attribute is set. \n\n\nstability=1\n\n\nProperties:\n\n\nPresets\n\n\nA set of input parameter states, this can be used to set the graph to a serialized state. \n\n\nstability=1\n\n\nLastSaved\n\n\nThe date of the last save. \n\n\nstability=1\n\n\nAuthor\n\n\nAn author of the workspace \n\n\nstability=1\n\n\nDescription\n\n\nA description of the workspace \n\n\nstability=1\n\n\nHasUnsavedChanges\n\n\nAre there unsaved changes in the workspace? \n\n\nstability=1\n\n\nNodes\n\n\nAll of the nodes currently in the workspace. \n\n\nstability=1\n\n\nConnectors\n\n\nAll of the connectors currently in the workspace. \n\n\nstability=1\n\n\nNotes\n\n\nAll of the notes currently in the workspace. \n\n\nstability=1\n\n\nFileName\n\n\nPath to the file this workspace is associated with. If null or empty, this workspace has never been saved. \n\n\nstability=1\n\n\nName\n\n\nThe name of this workspace. \n\n\nstability=1\n\n\nX\n\n\nGet or set the X position of the workspace. \n\n\nstability=1\n\n\nY\n\n\nGet or set the Y position of the workspace \n\n\nstability=1\n\n\nHeight\n\n\nGet the height of the workspace's bounds. \n\n\nstability=1\n\n\nWidth\n\n\nGet the width of the workspace's bounds. \n\n\nstability=1\n\n\nRect\n\n\nGet the bounds of the workspace. \n\n\nstability=1\n\n\nCanUndo\n\n\nDetermine if undo operation is currently possible. \n\n\nstability=1\n\n\nCanRedo\n\n\nDetermine if redo operation is currently possible. \n\n\nstability=1\n\n\nGuid\n\n\nA unique identifier for the workspace. \n\n\nstability=1\n\n\nEvents:\n\n\nRequestNodeCentered\n\n\nEvent that is fired when a workspace requests that a Node or Note model is centered. \n\n\nstability=1\n\n\nZoomChanged\n\n\nEvent that is fired every time the zoom factor of a workspace changes. \n\n\nstability=1\n\n\nCurrentOffsetChanged\n\n\nEvent that is fired every time the position offset of a workspace changes. \n\n\nstability=1\n\n\nWorkspaceSaved\n\n\nEvent that is fired when the workspace is saved. \n\n\nstability=1\n\n\nNodeAdded\n\n\nEvent that is fired when a node is added to the workspace. \n\n\nstability=1\n\n\nNodeRemoved\n\n\nEvent that is fired when a node is removed from the workspace. \n\n\nstability=1\n\n\nNodesCleared\n\n\nEvent that is fired when nodes are cleared from the workspace. \n\n\nstability=1\n\n\nNoteAdded\n\n\nEvent that is fired when a note is added to the workspace. \n\n\nstability=1\n\n\nNoteRemoved\n\n\nEvent that is fired when a note is removed from the workspace. \n\n\nstability=1\n\n\nNotesCleared\n\n\nEvent that is fired when notes are cleared from the workspace. \n\n\nstability=1\n\n\nAnnotationAdded\n\n\nEvent that is fired when an annotation is added to the workspace. \n\n\nstability=1\n\n\nAnnotationRemoved\n\n\nEvent that is fired when an annotation is removed from the workspace. \n\n\nstability=1\n\n\nAnnotationsCleared\n\n\nEvent that is fired when annotations are cleared from the workspace. \n\n\nstability=1\n\n\nConnectorAdded\n\n\nEvent that is fired when a connector is added to the workspace. \n\n\nstability=1\n\n\nConnectorDeleted\n\n\nEvent that is fired when a connector is deleted from a workspace. \n\n\nstability=1\n\n\nDisposed\n\n\nEvent that is fired when this workspace is disposed of. \n\n\nstability=1\n\n\nSaving\n\n\nEvent that is fired during the saving of the workspace. Add additional XmlNode objects to the XmlDocument provided, in order to save data to the file. \n\n\nstability=1", 
            "title": "WorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#workspacemodel", 
            "text": "", 
            "title": "WorkspaceModel"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#methods", 
            "text": "Dynamo.Models.WorkspaceModel.Dispose()  Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.   stability=1  Dynamo.Models.WorkspaceModel.Clear()  Clears this workspace of nodes, notes, and connectors.   stability=1  Dynamo.Models.WorkspaceModel.SaveAs(String newPath,RuntimeCore core,Boolean isBackup)  Save to a specific file path, if the path is null or empty, does nothing. If successful, the CurrentWorkspace.FilePath field is updated as a side effect      Name  Description      newPath:  The path to save to    Name  Description    -----  ------    core:     Name  Description    -----  ------    isBackup:  Indicates whether saved workspace is backup or not. If it's not backup, we should add it to recent files. Otherwise leave it.     stability=1  Dynamo.Models.WorkspaceModel.AddAndRegisterNode()  Adds a node to this workspace.   stability=1  Dynamo.Models.WorkspaceModel.RemoveNode( NodeModel  model)  Removes a node from this workspace. This method does not raise a NodesModified event. (LC notes this is clearly not true)      Name  Description      model:      stability=1  Dynamo.Models.WorkspaceModel.Save()  Save assuming that the Filepath attribute is set.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#properties", 
            "text": "Presets  A set of input parameter states, this can be used to set the graph to a serialized state.   stability=1  LastSaved  The date of the last save.   stability=1  Author  An author of the workspace   stability=1  Description  A description of the workspace   stability=1  HasUnsavedChanges  Are there unsaved changes in the workspace?   stability=1  Nodes  All of the nodes currently in the workspace.   stability=1  Connectors  All of the connectors currently in the workspace.   stability=1  Notes  All of the notes currently in the workspace.   stability=1  FileName  Path to the file this workspace is associated with. If null or empty, this workspace has never been saved.   stability=1  Name  The name of this workspace.   stability=1  X  Get or set the X position of the workspace.   stability=1  Y  Get or set the Y position of the workspace   stability=1  Height  Get the height of the workspace's bounds.   stability=1  Width  Get the width of the workspace's bounds.   stability=1  Rect  Get the bounds of the workspace.   stability=1  CanUndo  Determine if undo operation is currently possible.   stability=1  CanRedo  Determine if redo operation is currently possible.   stability=1  Guid  A unique identifier for the workspace.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#events", 
            "text": "RequestNodeCentered  Event that is fired when a workspace requests that a Node or Note model is centered.   stability=1  ZoomChanged  Event that is fired every time the zoom factor of a workspace changes.   stability=1  CurrentOffsetChanged  Event that is fired every time the position offset of a workspace changes.   stability=1  WorkspaceSaved  Event that is fired when the workspace is saved.   stability=1  NodeAdded  Event that is fired when a node is added to the workspace.   stability=1  NodeRemoved  Event that is fired when a node is removed from the workspace.   stability=1  NodesCleared  Event that is fired when nodes are cleared from the workspace.   stability=1  NoteAdded  Event that is fired when a note is added to the workspace.   stability=1  NoteRemoved  Event that is fired when a note is removed from the workspace.   stability=1  NotesCleared  Event that is fired when notes are cleared from the workspace.   stability=1  AnnotationAdded  Event that is fired when an annotation is added to the workspace.   stability=1  AnnotationRemoved  Event that is fired when an annotation is removed from the workspace.   stability=1  AnnotationsCleared  Event that is fired when annotations are cleared from the workspace.   stability=1  ConnectorAdded  Event that is fired when a connector is added to the workspace.   stability=1  ConnectorDeleted  Event that is fired when a connector is deleted from a workspace.   stability=1  Disposed  Event that is fired when this workspace is disposed of.   stability=1  Saving  Event that is fired during the saving of the workspace. Add additional XmlNode objects to the XmlDocument provided, in order to save data to the file.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Models/WorkspaceModel/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/AlsoKnownAsAttribute/", 
            "text": "AlsoKnownAsAttribute\n\n\nAlsoKnownAsAttribute\n\n\nThe AlsoKnownAs attribute allows the node implementor to define an array of names that this node might have had in the past. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "AlsoKnownAsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/AlsoKnownAsAttribute/#alsoknownasattribute", 
            "text": "", 
            "title": "AlsoKnownAsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/AlsoKnownAsAttribute/#alsoknownasattribute_1", 
            "text": "The AlsoKnownAs attribute allows the node implementor to define an array of names that this node might have had in the past.", 
            "title": "AlsoKnownAsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/AlsoKnownAsAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/AlsoKnownAsAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/AlsoKnownAsAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/BuiltinNodeCategories/", 
            "text": "BuiltinNodeCategories\n\n\nBuiltinNodeCategories\n\n\nBuilt-in Dynamo Categories. If you want your node to appear in one of the existing Dynamo categories, then use these constants. This ensures that if the names of the categories change down the road, your node will still be placed there. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "BuiltinNodeCategories"
        }, 
        {
            "location": "/Dynamo_Nodes/BuiltinNodeCategories/#builtinnodecategories", 
            "text": "", 
            "title": "BuiltinNodeCategories"
        }, 
        {
            "location": "/Dynamo_Nodes/BuiltinNodeCategories/#builtinnodecategories_1", 
            "text": "Built-in Dynamo Categories. If you want your node to appear in one of the existing Dynamo categories, then use these constants. This ensures that if the names of the categories change down the road, your node will still be placed there.", 
            "title": "BuiltinNodeCategories"
        }, 
        {
            "location": "/Dynamo_Nodes/BuiltinNodeCategories/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/BuiltinNodeCategories/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/BuiltinNodeCategories/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/", 
            "text": "CodeBlockNodeModel\n\n\n\n\nMethods:\n\n\nDynamo.Nodes.CodeBlockNodeModel.GetDefinedVariableNames()\n\n\nReturns the names of all the variables defined in this code block. \n\n\nReturns: List containing all the names\n\n\nstability=1\n\n\nDynamo.Nodes.CodeBlockNodeModel.GetInportIndex(\nCodeBlockNodeModel\n variableName)\n\n\nReturns the index of the port corresponding to the variable name given \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvariableName:\n\n\nName of the variable corresponding to an input port\n\n\n\n\n\n\nReturns:  Index of the required port in the InPorts collection\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.CodeBlockNodeModel.GetOutportIndex(String variableName)\n\n\nReturns the corresponding output port index for a given defined variable \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvariableName:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.CodeBlockNodeModel.GetTypeHintForOutput(Int32 index)\n\n\nReturn possible type of the output at specified output port. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nTempVariables\n\n\nTemporary variables that generated in code. \n\n\nstability=1\n\n\nEvents:", 
            "title": "CodeBlockNodeModel"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/#codeblocknodemodel", 
            "text": "", 
            "title": "CodeBlockNodeModel"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/#methods", 
            "text": "Dynamo.Nodes.CodeBlockNodeModel.GetDefinedVariableNames()  Returns the names of all the variables defined in this code block.   Returns: List containing all the names  stability=1  Dynamo.Nodes.CodeBlockNodeModel.GetInportIndex( CodeBlockNodeModel  variableName)  Returns the index of the port corresponding to the variable name given      Name  Description      variableName:  Name of the variable corresponding to an input port    Returns:  Index of the required port in the InPorts collection      stability=1  Dynamo.Nodes.CodeBlockNodeModel.GetOutportIndex(String variableName)  Returns the corresponding output port index for a given defined variable      Name  Description      variableName:     Returns:      stability=1  Dynamo.Nodes.CodeBlockNodeModel.GetTypeHintForOutput(Int32 index)  Return possible type of the output at specified output port.      Name  Description      index:     Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/#properties", 
            "text": "TempVariables  Temporary variables that generated in code.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockNodeModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockUtils/", 
            "text": "CodeBlockUtils\n\n\n\n\nMethods:\n\n\nDynamo.Nodes.CodeBlockUtils.NormalizeLineBreaks(String text)\n\n\nCall this method to turn all \"\\r\\n\" and \"\\r\" occurrences in the given string into \"\\n\". \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext:\n\n\nThe text to be normalized\n\n\n\n\n\n\nReturns: Returns the normalized string.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.CodeBlockUtils.FormatUserText(String inputCode)\n\n\nCall this method to format user codes in the following ways: 1. Leading and trailing whitespaces are removed from the original string. Characters that qualify as \"whitespaces\" are: '\\n', '\\t' and ' '. 2. Multiple statements on a single line will be broken down further into multiple statements. For example, \"a = 1; b = 2;\" will be broken down into two lines: \"a = 1;\\nb = 2;\" (line break denoted by the new \\n character). 3. Leading whitespaces will be removed ony for the first line. This is to preserve the indentation for lines other than the first. 4. If the resulting codes do not end with a closing curly bracket '}', then a semi-colon is appended to the code. This ensures codes like \"a\" will result in codes becoming \"a;\" \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninputCode:\n\n\nOriginal code content as typed in by the user.\n\n\n\n\n\n\nReturns: Returns the formatted code with the above process.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "CodeBlockUtils"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockUtils/#codeblockutils", 
            "text": "", 
            "title": "CodeBlockUtils"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockUtils/#methods", 
            "text": "Dynamo.Nodes.CodeBlockUtils.NormalizeLineBreaks(String text)  Call this method to turn all \"\\r\\n\" and \"\\r\" occurrences in the given string into \"\\n\".      Name  Description      text:  The text to be normalized    Returns: Returns the normalized string.      stability=1  Dynamo.Nodes.CodeBlockUtils.FormatUserText(String inputCode)  Call this method to format user codes in the following ways: 1. Leading and trailing whitespaces are removed from the original string. Characters that qualify as \"whitespaces\" are: '\\n', '\\t' and ' '. 2. Multiple statements on a single line will be broken down further into multiple statements. For example, \"a = 1; b = 2;\" will be broken down into two lines: \"a = 1;\\nb = 2;\" (line break denoted by the new \\n character). 3. Leading whitespaces will be removed ony for the first line. This is to preserve the indentation for lines other than the first. 4. If the resulting codes do not end with a closing curly bracket '}', then a semi-colon is appended to the code. This ensures codes like \"a\" will result in codes becoming \"a;\"      Name  Description      inputCode:  Original code content as typed in by the user.    Returns: Returns the formatted code with the above process.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockUtils/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockUtils/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/CodeBlockUtils/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/", 
            "text": "CustomNodeController`1\n\n\nCustomNodeController`1\n\n\nController that synchronizes a node with a custom node definition. \n\n\n\n\nMethods:\n\n\nDynamo.Nodes.CustomNodeController`1.IsInSyncWithNode()\n\n\nReturn if the custom node instance is in sync with its definition. It may be out of sync if .dyf file is opened and updated and then .dyn file is opened. \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "CustomNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/#customnodecontroller1", 
            "text": "", 
            "title": "CustomNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/#customnodecontroller1_1", 
            "text": "Controller that synchronizes a node with a custom node definition.", 
            "title": "CustomNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/#methods", 
            "text": "Dynamo.Nodes.CustomNodeController`1.IsInSyncWithNode()  Return if the custom node instance is in sync with its definition. It may be out of sync if .dyf file is opened and updated and then .dyn file is opened.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/CustomNodeController`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/DoNotLoadOnPlatformsAttribute/", 
            "text": "DoNotLoadOnPlatformsAttribute\n\n\nDoNotLoadOnPlatformsAttribute\n\n\nThe DoNotLoadOnPlatforms attribute allows the node implementor to define an array of contexts in which the node will not be loaded. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DoNotLoadOnPlatformsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/DoNotLoadOnPlatformsAttribute/#donotloadonplatformsattribute", 
            "text": "", 
            "title": "DoNotLoadOnPlatformsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/DoNotLoadOnPlatformsAttribute/#donotloadonplatformsattribute_1", 
            "text": "The DoNotLoadOnPlatforms attribute allows the node implementor to define an array of contexts in which the node will not be loaded.", 
            "title": "DoNotLoadOnPlatformsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/DoNotLoadOnPlatformsAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/DoNotLoadOnPlatformsAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/DoNotLoadOnPlatformsAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunction/", 
            "text": "DSFunction\n\n\nDSFunction\n\n\nDesignScript function node. All functions from DesignScript share the same function node but internally have different procedure. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DSFunction"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunction/#dsfunction", 
            "text": "", 
            "title": "DSFunction"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunction/#dsfunction_1", 
            "text": "DesignScript function node. All functions from DesignScript share the same function node but internally have different procedure.", 
            "title": "DSFunction"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunction/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunction/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunction/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunctionBase/", 
            "text": "DSFunctionBase\n\n\nDSFunctionBase\n\n\nBase class for NodeModels representing zero-touch-imported-function calls. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DSFunctionBase"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunctionBase/#dsfunctionbase", 
            "text": "", 
            "title": "DSFunctionBase"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunctionBase/#dsfunctionbase_1", 
            "text": "Base class for NodeModels representing zero-touch-imported-function calls.", 
            "title": "DSFunctionBase"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunctionBase/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunctionBase/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSFunctionBase/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/", 
            "text": "DSVarArgFunction\n\n\nDSVarArgFunction\n\n\nDesignScript var-arg function node. All functions from DesignScript share the same function node but internally have different procedure. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nVarInputController\n\n\nCustom VariableInput controller for DSVarArgFunctions. \n\n\nstability=1\n\n\nEvents:", 
            "title": "DSVarArgFunction"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/#dsvarargfunction", 
            "text": "", 
            "title": "DSVarArgFunction"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/#dsvarargfunction_1", 
            "text": "DesignScript var-arg function node. All functions from DesignScript share the same function node but internally have different procedure.", 
            "title": "DSVarArgFunction"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/#properties", 
            "text": "VarInputController  Custom VariableInput controller for DSVarArgFunctions.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/DSVarArgFunction/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/DummyNode/", 
            "text": "DummyNode\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DummyNode"
        }, 
        {
            "location": "/Dynamo_Nodes/DummyNode/#dummynode", 
            "text": "", 
            "title": "DummyNode"
        }, 
        {
            "location": "/Dynamo_Nodes/DummyNode/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/DummyNode/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/DummyNode/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/Function/", 
            "text": "Function\n\n\nFunction\n\n\nDesignScript Custom Node instance. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Function"
        }, 
        {
            "location": "/Dynamo_Nodes/Function/#function", 
            "text": "", 
            "title": "Function"
        }, 
        {
            "location": "/Dynamo_Nodes/Function/#function_1", 
            "text": "DesignScript Custom Node instance.", 
            "title": "Function"
        }, 
        {
            "location": "/Dynamo_Nodes/Function/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/Function/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/Function/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/", 
            "text": "FunctionCallBase`2\n\n\nFunctionCallBase`2\n\n\nNode base class for all nodes that produce a DS function call. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nController\n\n\nController used to sync node with a function definition. \n\n\nstability=1\n\n\nCreationName\n\n\nThe unique name that the node was created by \n\n\nstability=1\n\n\nEvents:", 
            "title": "FunctionCallBase`2"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/#functioncallbase2", 
            "text": "", 
            "title": "FunctionCallBase`2"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/#functioncallbase2_1", 
            "text": "Node base class for all nodes that produce a DS function call.", 
            "title": "FunctionCallBase`2"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/#properties", 
            "text": "Controller  Controller used to sync node with a function definition.   stability=1  CreationName  The unique name that the node was created by", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallBase`2/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/", 
            "text": "FunctionCallNodeController`1\n\n\nFunctionCallNodeController`1\n\n\nController for nodes that act as function calls. \n\n\n\n\nMethods:\n\n\nDynamo.Nodes.FunctionCallNodeController`1.DeserializeCore()\n\n\nDeserializes Controller information from XML. \n\n\nstability=1\n\n\nDynamo.Nodes.FunctionCallNodeController`1.SerializeCore()\n\n\nSerializes Controller information from XML. \n\n\nstability=1\n\n\nDynamo.Nodes.FunctionCallNodeController`1.SyncNodeWithDefinition(\nNodeModel\n model)\n\n\nSynchronizes a node with this controller, based on the underlying function. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodel:\n\n\nNode to sync.\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nDefinition\n\n\nA FunctionDescriptor describing the function that this controller will call. \n\n\nstability=1\n\n\nNickName\n\n\nNickName for nodes using this controller, based on the underlying FunctionDescriptor. \n\n\nstability=1\n\n\nReturnKeys\n\n\nReturnKeys for multi-output functions. \n\n\nstability=1\n\n\nEvents:", 
            "title": "FunctionCallNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#functioncallnodecontroller1", 
            "text": "", 
            "title": "FunctionCallNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#functioncallnodecontroller1_1", 
            "text": "Controller for nodes that act as function calls.", 
            "title": "FunctionCallNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#methods", 
            "text": "Dynamo.Nodes.FunctionCallNodeController`1.DeserializeCore()  Deserializes Controller information from XML.   stability=1  Dynamo.Nodes.FunctionCallNodeController`1.SerializeCore()  Serializes Controller information from XML.   stability=1  Dynamo.Nodes.FunctionCallNodeController`1.SyncNodeWithDefinition( NodeModel  model)  Synchronizes a node with this controller, based on the underlying function.      Name  Description      model:  Node to sync.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#properties", 
            "text": "Definition  A FunctionDescriptor describing the function that this controller will call.   stability=1  NickName  NickName for nodes using this controller, based on the underlying FunctionDescriptor.   stability=1  ReturnKeys  ReturnKeys for multi-output functions.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/FunctionCallNodeController`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsDesignScriptCompatibleAttribute/", 
            "text": "IsDesignScriptCompatibleAttribute\n\n\nIsDesignScriptCompatibleAttribute\n\n\nThe IsDesignScriptCompatibleAttribute indicates if the node is able to work with DesignScript evaluation engine. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IsDesignScriptCompatibleAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsDesignScriptCompatibleAttribute/#isdesignscriptcompatibleattribute", 
            "text": "", 
            "title": "IsDesignScriptCompatibleAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsDesignScriptCompatibleAttribute/#isdesignscriptcompatibleattribute_1", 
            "text": "The IsDesignScriptCompatibleAttribute indicates if the node is able to work with DesignScript evaluation engine.", 
            "title": "IsDesignScriptCompatibleAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsDesignScriptCompatibleAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsDesignScriptCompatibleAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsDesignScriptCompatibleAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsInteractiveAttribute/", 
            "text": "IsInteractiveAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IsInteractiveAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsInteractiveAttribute/#isinteractiveattribute", 
            "text": "", 
            "title": "IsInteractiveAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsInteractiveAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsInteractiveAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsInteractiveAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsMetaNodeAttribute/", 
            "text": "IsMetaNodeAttribute\n\n\nIsMetaNodeAttribute\n\n\nThe MetaNode attribute means this node shouldn't be added to the category, only its instances are allowed \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IsMetaNodeAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsMetaNodeAttribute/#ismetanodeattribute", 
            "text": "", 
            "title": "IsMetaNodeAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsMetaNodeAttribute/#ismetanodeattribute_1", 
            "text": "The MetaNode attribute means this node shouldn't be added to the category, only its instances are allowed", 
            "title": "IsMetaNodeAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/IsMetaNodeAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsMetaNodeAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/IsMetaNodeAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeCategoryAttribute/", 
            "text": "NodeCategoryAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeCategoryAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeCategoryAttribute/#nodecategoryattribute", 
            "text": "", 
            "title": "NodeCategoryAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeCategoryAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeCategoryAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeCategoryAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDeprecatedAttribute/", 
            "text": "NodeDeprecatedAttribute\n\n\nNodeDeprecatedAttribute\n\n\nFlag to hide deprecated nodes in search, but allow in workflows \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeDeprecatedAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDeprecatedAttribute/#nodedeprecatedattribute", 
            "text": "", 
            "title": "NodeDeprecatedAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDeprecatedAttribute/#nodedeprecatedattribute_1", 
            "text": "Flag to hide deprecated nodes in search, but allow in workflows", 
            "title": "NodeDeprecatedAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDeprecatedAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDeprecatedAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDeprecatedAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDescriptionAttribute/", 
            "text": "NodeDescriptionAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeDescriptionAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDescriptionAttribute/#nodedescriptionattribute", 
            "text": "", 
            "title": "NodeDescriptionAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDescriptionAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDescriptionAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeDescriptionAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeNameAttribute/", 
            "text": "NodeNameAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeNameAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeNameAttribute/#nodenameattribute", 
            "text": "", 
            "title": "NodeNameAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeNameAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeNameAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeNameAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeObsoleteAttribute/", 
            "text": "NodeObsoleteAttribute\n\n\nNodeObsoleteAttribute\n\n\nThe NodeDescriptionAttribute indicates this node is obsolete \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeObsoleteAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeObsoleteAttribute/#nodeobsoleteattribute", 
            "text": "", 
            "title": "NodeObsoleteAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeObsoleteAttribute/#nodeobsoleteattribute_1", 
            "text": "The NodeDescriptionAttribute indicates this node is obsolete", 
            "title": "NodeObsoleteAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeObsoleteAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeObsoleteAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeObsoleteAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchableAttribute/", 
            "text": "NodeSearchableAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeSearchableAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchableAttribute/#nodesearchableattribute", 
            "text": "", 
            "title": "NodeSearchableAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchableAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchableAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchableAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchTagsAttribute/", 
            "text": "NodeSearchTagsAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeSearchTagsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchTagsAttribute/#nodesearchtagsattribute", 
            "text": "", 
            "title": "NodeSearchTagsAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchTagsAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchTagsAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeSearchTagsAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeTypeIdAttribute/", 
            "text": "NodeTypeIdAttribute\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeTypeIdAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeTypeIdAttribute/#nodetypeidattribute", 
            "text": "", 
            "title": "NodeTypeIdAttribute"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeTypeIdAttribute/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeTypeIdAttribute/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NodeTypeIdAttribute/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInCustomNodeWorkspace/", 
            "text": "NotSearchableInCustomNodeWorkspace\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NotSearchableInCustomNodeWorkspace"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInCustomNodeWorkspace/#notsearchableincustomnodeworkspace", 
            "text": "", 
            "title": "NotSearchableInCustomNodeWorkspace"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInCustomNodeWorkspace/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInCustomNodeWorkspace/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInCustomNodeWorkspace/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInHomeWorkspace/", 
            "text": "NotSearchableInHomeWorkspace\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NotSearchableInHomeWorkspace"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInHomeWorkspace/#notsearchableinhomeworkspace", 
            "text": "", 
            "title": "NotSearchableInHomeWorkspace"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInHomeWorkspace/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInHomeWorkspace/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/NotSearchableInHomeWorkspace/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/Output/", 
            "text": "Output\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Output"
        }, 
        {
            "location": "/Dynamo_Nodes/Output/#output", 
            "text": "", 
            "title": "Output"
        }, 
        {
            "location": "/Dynamo_Nodes/Output/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/Output/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/Output/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/Statement/", 
            "text": "Statement\n\n\n\n\nMethods:\n\n\nDynamo.Nodes.Statement.GetReferencedVariableNames(\nStatement\n s,Boolean onlyTopLevel)\n\n\nReturns the names of the variables that have been referenced in the statement \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns:\n\n\nStatement whose variable names to be got.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nonlyTopLevel:\n\n\nBool to check if required to return reference variables in sub statements as well\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.Statement.GetDefinedVariableNames(\nStatement\n s,Boolean onlyTopLevel)\n\n\nReturns the names of the variables that have been declared in the statement \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns:\n\n\nStatement whose variable names to be got.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nonlyTopLevel:\n\n\nBool to check if required to return reference variables in sub statements as well\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Statement"
        }, 
        {
            "location": "/Dynamo_Nodes/Statement/#statement", 
            "text": "", 
            "title": "Statement"
        }, 
        {
            "location": "/Dynamo_Nodes/Statement/#methods", 
            "text": "Dynamo.Nodes.Statement.GetReferencedVariableNames( Statement  s,Boolean onlyTopLevel)  Returns the names of the variables that have been referenced in the statement      Name  Description      s:  Statement whose variable names to be got.    Name  Description    -----  ------    onlyTopLevel:  Bool to check if required to return reference variables in sub statements as well    Returns:      stability=1  Dynamo.Nodes.Statement.GetDefinedVariableNames( Statement  s,Boolean onlyTopLevel)  Returns the names of the variables that have been declared in the statement      Name  Description      s:  Statement whose variable names to be got.    Name  Description    -----  ------    onlyTopLevel:  Bool to check if required to return reference variables in sub statements as well    Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/Statement/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/Statement/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/Statement/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/Symbol/", 
            "text": "Symbol\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Symbol"
        }, 
        {
            "location": "/Dynamo_Nodes/Symbol/#symbol", 
            "text": "", 
            "title": "Symbol"
        }, 
        {
            "location": "/Dynamo_Nodes/Symbol/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/Symbol/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/Symbol/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/UnresolvedFunctionException/", 
            "text": "UnresolvedFunctionException\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "UnresolvedFunctionException"
        }, 
        {
            "location": "/Dynamo_Nodes/UnresolvedFunctionException/#unresolvedfunctionexception", 
            "text": "", 
            "title": "UnresolvedFunctionException"
        }, 
        {
            "location": "/Dynamo_Nodes/UnresolvedFunctionException/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/UnresolvedFunctionException/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/UnresolvedFunctionException/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/Utilities/", 
            "text": "Utilities\n\n\n\n\nMethods:\n\n\nDynamo.Nodes.Utilities.PreprocessTypeName(String fullyQualifiedName)\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfullyQualifiedName:\n\n\nA fully qualified name. An example of this would be \"Dynamo.Elements.dynNode\".\n\n\n\n\n\n\nReturns: The processed fully qualified name. For an example, the name \"Dynamo.Elements.UV\" will be returned as \"Dynamo.Nodes.Uv\".\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.Utilities.TypedParametersToString(\nFunctionDescriptor\n descriptor,String overridePrefix)\n\n\nThis method returns a name for the icon based on name of the node. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndescriptor:\n\n\nFunction descriptor, that contains all info about node.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\noverridePrefix:\n\n\noverridePrefix is used as default value for generating node icon name. If overridePrefix is empty, it uses QualifiedName property. e.g. Autodesk.DesignScript.Geometry.CoordinateSystem.ByOrigin\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.Utilities.LoadTraceDataFromXmlDocument(XmlDocument document)\n\n\nCall this method to load serialized node-data-list pairs (through a prior call to SaveTraceDataToXmlDocument) from a given XmlDocument. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndocument:\n\n\nThe XmlDocument from which serialized node- data-list pairs are to be deserialized.\n\n\n\n\n\n\nReturns: Returns a dictionary of deserialized node-data-list pairs loaded from the given XmlDocument.\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Utilities"
        }, 
        {
            "location": "/Dynamo_Nodes/Utilities/#utilities", 
            "text": "", 
            "title": "Utilities"
        }, 
        {
            "location": "/Dynamo_Nodes/Utilities/#methods", 
            "text": "Dynamo.Nodes.Utilities.PreprocessTypeName(String fullyQualifiedName)     Name  Description      fullyQualifiedName:  A fully qualified name. An example of this would be \"Dynamo.Elements.dynNode\".    Returns: The processed fully qualified name. For an example, the name \"Dynamo.Elements.UV\" will be returned as \"Dynamo.Nodes.Uv\".      stability=1  Dynamo.Nodes.Utilities.TypedParametersToString( FunctionDescriptor  descriptor,String overridePrefix)  This method returns a name for the icon based on name of the node.      Name  Description      descriptor:  Function descriptor, that contains all info about node.    Name  Description    -----  ------    overridePrefix:  overridePrefix is used as default value for generating node icon name. If overridePrefix is empty, it uses QualifiedName property. e.g. Autodesk.DesignScript.Geometry.CoordinateSystem.ByOrigin     stability=1  Dynamo.Nodes.Utilities.LoadTraceDataFromXmlDocument(XmlDocument document)  Call this method to load serialized node-data-list pairs (through a prior call to SaveTraceDataToXmlDocument) from a given XmlDocument.      Name  Description      document:  The XmlDocument from which serialized node- data-list pairs are to be deserialized.    Returns: Returns a dictionary of deserialized node-data-list pairs loaded from the given XmlDocument.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/Utilities/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/Utilities/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/Utilities/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/Variable/", 
            "text": "Variable\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Variable"
        }, 
        {
            "location": "/Dynamo_Nodes/Variable/#variable", 
            "text": "", 
            "title": "Variable"
        }, 
        {
            "location": "/Dynamo_Nodes/Variable/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/Variable/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/Variable/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNode/", 
            "text": "VariableInputNode\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "VariableInputNode"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNode/#variableinputnode", 
            "text": "", 
            "title": "VariableInputNode"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNode/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNode/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNode/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNodeController/", 
            "text": "VariableInputNodeController\n\n\n\n\nMethods:\n\n\nDynamo.Nodes.VariableInputNodeController.GetInputIndexFromModel()\n\n\nFetches the index number to use for the next port. \n\n\nstability=1\n\n\nDynamo.Nodes.VariableInputNodeController.RemoveInputFromModel()\n\n\nRemoves an input from this node. Called when the '-' button is clicked. \n\n\nstability=1\n\n\nDynamo.Nodes.VariableInputNodeController.AddInputToModel()\n\n\nAdds an input to this node. Called when the '+' button is clicked. \n\n\nstability=1\n\n\nDynamo.Nodes.VariableInputNodeController.SetNumInputs(Int32 numInputs)\n\n\nSet the number of inputs. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumInputs:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Nodes.VariableInputNodeController.SerializeInputCount(XmlElement nodeElement,Int32 amount)\n\n\nSerializes the input count of a VariableInputNode to Xml. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnodeElement:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\namount:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "VariableInputNodeController"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNodeController/#variableinputnodecontroller", 
            "text": "", 
            "title": "VariableInputNodeController"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNodeController/#methods", 
            "text": "Dynamo.Nodes.VariableInputNodeController.GetInputIndexFromModel()  Fetches the index number to use for the next port.   stability=1  Dynamo.Nodes.VariableInputNodeController.RemoveInputFromModel()  Removes an input from this node. Called when the '-' button is clicked.   stability=1  Dynamo.Nodes.VariableInputNodeController.AddInputToModel()  Adds an input to this node. Called when the '+' button is clicked.   stability=1  Dynamo.Nodes.VariableInputNodeController.SetNumInputs(Int32 numInputs)  Set the number of inputs.      Name  Description      numInputs:      stability=1  Dynamo.Nodes.VariableInputNodeController.SerializeInputCount(XmlElement nodeElement,Int32 amount)  Serializes the input count of a VariableInputNode to Xml.      Name  Description      nodeElement:     Name  Description    -----  ------    amount:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNodeController/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNodeController/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/VariableInputNodeController/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/", 
            "text": "ZeroTouchNodeController`1\n\n\nZeroTouchNodeController`1\n\n\nController that synchronizes a node with a zero-touch function definition. \n\n\n\n\nMethods:\n\n\nDynamo.Nodes.ZeroTouchNodeController`1.IsInstanceMember()\n\n\nIs this function an instance member of a class? \n\n\nstability=1\n\n\nDynamo.Nodes.ZeroTouchNodeController`1.IsStaticMember()\n\n\nIs this function a static member of a class? \n\n\nstability=1\n\n\nDynamo.Nodes.ZeroTouchNodeController`1.IsConstructor()\n\n\nIs this function a constructor of a class? \n\n\nstability=1\n\n\nProperties:\n\n\nDescription\n\n\nDescription of function, taken from Definition. \n\n\nstability=1\n\n\nCategory\n\n\nCategory of function, taken from Definition. \n\n\nstability=1\n\n\nMangledName\n\n\nMangledName of function, taken from Definition. \n\n\nstability=1\n\n\nEvents:", 
            "title": "ZeroTouchNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#zerotouchnodecontroller1", 
            "text": "", 
            "title": "ZeroTouchNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#zerotouchnodecontroller1_1", 
            "text": "Controller that synchronizes a node with a zero-touch function definition.", 
            "title": "ZeroTouchNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#methods", 
            "text": "Dynamo.Nodes.ZeroTouchNodeController`1.IsInstanceMember()  Is this function an instance member of a class?   stability=1  Dynamo.Nodes.ZeroTouchNodeController`1.IsStaticMember()  Is this function a static member of a class?   stability=1  Dynamo.Nodes.ZeroTouchNodeController`1.IsConstructor()  Is this function a constructor of a class?", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#properties", 
            "text": "Description  Description of function, taken from Definition.   stability=1  Category  Category of function, taken from Definition.   stability=1  MangledName  MangledName of function, taken from Definition.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchNodeController`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchVarArgNodeController`1/", 
            "text": "ZeroTouchVarArgNodeController`1\n\n\nZeroTouchVarArgNodeController`1\n\n\nController that extends Zero Touch synchronization with VarArg function compilation. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ZeroTouchVarArgNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchVarArgNodeController`1/#zerotouchvarargnodecontroller1", 
            "text": "", 
            "title": "ZeroTouchVarArgNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchVarArgNodeController`1/#zerotouchvarargnodecontroller1_1", 
            "text": "Controller that extends Zero Touch synchronization with VarArg function compilation.", 
            "title": "ZeroTouchVarArgNodeController`1"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchVarArgNodeController`1/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchVarArgNodeController`1/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Nodes/ZeroTouchVarArgNodeController`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/", 
            "text": "Resources\n\n\nResources\n\n\nA strongly-typed resource class, for looking up localized strings, etc. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nResourceManager\n\n\nReturns the cached ResourceManager instance used by this class. \n\n\nstability=1\n\n\nCulture\n\n\nOverrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. \n\n\nstability=1\n\n\nArggOKButton\n\n\nLooks up a localized string similar to Arrrrg, ok. \n\n\nstability=1\n\n\nBackUpOriginalFileMessage\n\n\nLooks up a localized string similar to Original file '{0}' gets backed up at '{1}'. \n\n\nstability=1\n\n\nBadIdentifierSyntax\n\n\nLooks up a localized string similar to Bad identifier syntax: \"{0}\". \n\n\nstability=1\n\n\nBadRangeSyntax\n\n\nLooks up a localized string similar to Bad range syntax: not of format \\\"start..end[..(increment|#count)]\\\". \n\n\nstability=1\n\n\nBuildSublistsDescription\n\n\nLooks up a localized string similar to Build sublists from a list using DesignScript range syntax.. \n\n\nstability=1\n\n\nButtonDownloadLastest\n\n\nLooks up a localized string similar to Download latest version. \n\n\nstability=1\n\n\nButtonProcess\n\n\nLooks up a localized string similar to Proceed anyway. \n\n\nstability=1\n\n\nCancelButton\n\n\nLooks up a localized string similar to Cancel. \n\n\nstability=1\n\n\nCannotHave0Step\n\n\nLooks up a localized string similar to Can't have 0 step.. \n\n\nstability=1\n\n\nCannotOpenFile\n\n\nLooks up a localized string similar to Your file cannot be opened. \n\n\nstability=1\n\n\nClearingWorkflow\n\n\nLooks up a localized string similar to Clearing workflow.... \n\n\nstability=1\n\n\nClearingWorkSpace\n\n\nLooks up a localized string similar to Clearing workspace.... \n\n\nstability=1\n\n\nCodeBlockDescription\n\n\nLooks up a localized string similar to Allows for DesignScript code to be authored directly. \n\n\nstability=1\n\n\nCodeBlockNodeDescription\n\n\nLooks up a localized string similar to Allows for DesignScript code to be authored directly. \n\n\nstability=1\n\n\nCodeBlockSearchTags\n\n\nLooks up a localized string similar to codeblock;. \n\n\nstability=1\n\n\nComposeFunctionNodeDescription\n\n\nLooks up a localized string similar to Composes two single parameter functions into one function.. \n\n\nstability=1\n\n\nComposeFunctionPortDataFunctionToolTip\n\n\nLooks up a localized string similar to A Function. \n\n\nstability=1\n\n\nComposeFunctionPortDataResultToolTip\n\n\nLooks up a localized string similar to Composed function: g(f(x)). \n\n\nstability=1\n\n\nCouldNotCompressFile\n\n\nLooks up a localized string similar to Could not compress file. Is the file in use?. \n\n\nstability=1\n\n\nCouldNotGetLatestBuild\n\n\nLooks up a localized string similar to Couldn't get the latest build from S3. \n\n\nstability=1\n\n\nCouldNotGetUpdateData\n\n\nLooks up a localized string similar to Couldn't get update data from {0}. \n\n\nstability=1\n\n\nCouldNotLoadTypes\n\n\nLooks up a localized string similar to Could not load types.. \n\n\nstability=1\n\n\nCouldNotRepairOneNodeHoles\n\n\nLooks up a localized string similar to Could not repair 1-node holes. \n\n\nstability=1\n\n\nCreatingConnectorError\n\n\nLooks up a localized string similar to ERROR : Could not create connector between {0} and {1}.. \n\n\nstability=1\n\n\nCustomNodeCouldNotBeInitialized\n\n\nLooks up a localized string similar to Custom node \\\"{0}\\\" could not be initialized.. \n\n\nstability=1\n\n\nCustomNodeDesciption\n\n\nLooks up a localized string similar to Instance of a Custom Node. \n\n\nstability=1\n\n\nCustomNodeFolderLoadFailure\n\n\nLooks up a localized string similar to Failed to load custom node directory. Do you have permission to access {0}?. \n\n\nstability=1\n\n\nCustomNodeNotLoaded\n\n\nLooks up a localized string similar to Custom node definition is not loaded!. \n\n\nstability=1\n\n\nDefaultCustomNodeCategory\n\n\nLooks up a localized string similar to Custom nodes. \n\n\nstability=1\n\n\nDefaultValue\n\n\nLooks up a localized string similar to Default value. \n\n\nstability=1\n\n\nDefaultValueDisabled\n\n\nLooks up a localized string similar to (disabled). \n\n\nstability=1\n\n\nDisplayEngineFailureMessageDescription\n\n\nLooks up a localized string similar to The virtual machine that powers Dynamo is experiencing some unexpected errors internally and is likely \"having great difficulties pulling itself together. It is \"recommended that you save your work now and reload the file. Giving the Dynamo VM a new lease of life can potentially make it feel happier and behave better. If you don't mind, it would be helpful for you to send us your file. That will make it quicker for us to get these issues fixed.. \n\n\nstability=1\n\n\nDllLoadException\n\n\nLooks up a localized string similar to Dll Load Exception:. \n\n\nstability=1\n\n\nDownloadLatestButton\n\n\nLooks up a localized string similar to Download latest version. \n\n\nstability=1\n\n\nDSFunctionNodeDescription\n\n\nLooks up a localized string similar to DesignScript Builtin Functions. \n\n\nstability=1\n\n\nDulicatedPackage\n\n\nLooks up a localized string similar to A duplicate of the package called {0} was found at {1}. Ignoring it.. \n\n\nstability=1\n\n\nDummyNodeDescription\n\n\nLooks up a localized string similar to This is an obsolete node. \n\n\nstability=1\n\n\nDuplicateMigrationTypeRegistered\n\n\nLooks up a localized string similar to Duplicate migration type registered for {0}. \n\n\nstability=1\n\n\nDynamoUpToDate\n\n\nLooks up a localized string similar to Dynamo is up to date.. \n\n\nstability=1\n\n\nElapsedWhenLoadingXml\n\n\nLooks up a localized string similar to {0} elapsed for loading xml.. \n\n\nstability=1\n\n\nEvaluationCompleted\n\n\nLooks up a localized string similar to Evaluation completed in {0}. \n\n\nstability=1\n\n\nExceptionEncountered\n\n\nLooks up a localized string similar to Exception encountered scanning the package directory at {0}. \n\n\nstability=1\n\n\nFailedToGetMirrorVariable\n\n\nLooks up a localized string similar to Failed to get mirror for variable: {0}; reason: {1}.. \n\n\nstability=1\n\n\nFailedToLoad\n\n\nLooks up a localized string similar to Failed to load {0}\\n, Exception: {1}. \n\n\nstability=1\n\n\nFailedToLoadCustomNode\n\n\nLooks up a localized string similar to Failed to load custom node: {0}. Replacing with proxy custom node.. \n\n\nstability=1\n\n\nFailedToLoadHeader\n\n\nLooks up a localized string similar to ERROR: The header for the custom node at {0} failed to load. It will be left out of search.. \n\n\nstability=1\n\n\nFailedToLoadType\n\n\nLooks up a localized string similar to Failed to load type from {0}. The type was {1}.. \n\n\nstability=1\n\n\nFailedToSave\n\n\nLooks up a localized string similar to Failed to save {0}\\n, Exception: {1}. \n\n\nstability=1\n\n\nFileBackUpLocation\n\n\nLooks up a localized string similar to Original file '{0}' gets backed up at '{1}'. \n\n\nstability=1\n\n\nFileCannotBeOpened\n\n\nLooks up a localized string similar to Your file cannot be opened.. \n\n\nstability=1\n\n\nFileNotOpenedCorrectly\n\n\nLooks up a localized string similar to Your file may not open correctly. \n\n\nstability=1\n\n\nFunctionDescription\n\n\nLooks up a localized string similar to Instance of a Custom Node. \n\n\nstability=1\n\n\nFunctionNodeDescription\n\n\nLooks up a localized string similar to DesignScript Builtin Functions. \n\n\nstability=1\n\n\nFutureFileDescription\n\n\nLooks up a localized string similar to Your file '{0}' was created in future version '{1}' and may not open correctly in your installed version of Dynamo '{2}'. \n\n\nstability=1\n\n\nFutureFileSummary\n\n\nLooks up a localized string similar to Your file may not open correctly. \n\n\nstability=1\n\n\nFutureFileTitle\n\n\nLooks up a localized string similar to Future File. \n\n\nstability=1\n\n\nGoodByeLog\n\n\nLooks up a localized string similar to Goodbye. \n\n\nstability=1\n\n\nGroupDefaultText\n\n\nLooks up a localized string similar to \n. \n\n\nstability=1\n\n\nHeaderAction\n\n\nLooks up a localized string similar to ACTIONS. \n\n\nstability=1\n\n\nHeaderCreate\n\n\nLooks up a localized string similar to CREATE. \n\n\nstability=1\n\n\nHeaderQuery\n\n\nLooks up a localized string similar to QUERY. \n\n\nstability=1\n\n\nIdentifiersNotFound\n\n\nLooks up a localized string similar to No identifiers found.. \n\n\nstability=1\n\n\nIncompatibleOfFileAndDynamo\n\n\nLooks up a localized string similar to Your file '{0}' of version '{1}' cannot be opened by this version of Dynamo ({2}). \n\n\nstability=1\n\n\nIncorrectlyFormattedNodeLibraryDisplay\n\n\nLooks up a localized string similar to This is the incorrectly formatted library name:. \n\n\nstability=1\n\n\nIncorrectlyFormattedNodeLibraryWarning\n\n\nLooks up a localized string similar to Incorrectly formatted package node library encountered, this may result in a package assembly not being loaded!. \n\n\nstability=1\n\n\nIncorrectVersionToOpenFile\n\n\nLooks up a localized string similar to Your file '{0}' was created in future version '{1}' and may not open correctly in your installed version of Dynamo '{2}'. \n\n\nstability=1\n\n\nInputLabel\n\n\nLooks up a localized string similar to INPUT. \n\n\nstability=1\n\n\nInputNodeDescription\n\n\nLooks up a localized string similar to A function parameter, use with custom nodes. \n\n\nstability=1\n\n\nInputNodeSearchTags\n\n\nLooks up a localized string similar to variable;argument;parameter. \n\n\nstability=1\n\n\nInvalidCustomNodeFolderWarning\n\n\nLooks up a localized string similar to The folder '{0}' does not exist. \n\n\nstability=1\n\n\nInvalidLibraryFormat\n\n\nLooks up a localized string similar to Invalid library format.. \n\n\nstability=1\n\n\nInvalidStartOrEndOfRange\n\n\nLooks up a localized string similar to The start or end of a range is greater than the number of available elements in the list.. \n\n\nstability=1\n\n\nLibraryBuildError\n\n\nLooks up a localized string similar to Build error for library: {0}. \n\n\nstability=1\n\n\nLibraryHasBeenLoaded\n\n\nLooks up a localized string similar to Library {0} has been loaded.. \n\n\nstability=1\n\n\nLibraryIsDumped\n\n\nLooks up a localized string similar to Library is dumped to \\\"{0}\\\".. \n\n\nstability=1\n\n\nLibraryPathCannotBeFound\n\n\nLooks up a localized string similar to Cannot find library path: {0}.. \n\n\nstability=1\n\n\nLoadingNodeDefinition\n\n\nLooks up a localized string similar to Loading node definition for \"{0}\" from: {1}. \n\n\nstability=1\n\n\nLocateInDisk\n\n\nLooks up a localized string similar to Locate in Disk... \n\n\nstability=1\n\n\nMalformedHeaderPackage\n\n\nLooks up a localized string similar to {0} contains a package with a malformed header. Ignoring it.. \n\n\nstability=1\n\n\nMoreButtonTextFormat\n\n\nLooks up a localized string similar to SHOW MORE ({0}). \n\n\nstability=1\n\n\nMoveLabel\n\n\nLooks up a localized string similar to Move. \n\n\nstability=1\n\n\nNewNoteString\n\n\nLooks up a localized string similar to New Note. \n\n\nstability=1\n\n\nNoBinFolder\n\n\nLooks up a localized string similar to {0} contains a package without a bin folder. Ignoring it.. \n\n\nstability=1\n\n\nNodeProblemEncountered\n\n\nLooks up a localized string similar to Whilst preparing to run, this node encountered a problem. Please talk to the creators of the node, and give them this message:. \n\n\nstability=1\n\n\nNoDescriptionAvailable\n\n\nLooks up a localized string similar to No description available. \n\n\nstability=1\n\n\nNoHeaderPackage\n\n\nLooks up a localized string similar to {0} contains a package without a header. Ignoring it.. \n\n\nstability=1\n\n\nNoMatchesFound\n\n\nLooks up a localized string similar to No matches found. \n\n\nstability=1\n\n\nNothingIsSelectedWarning\n\n\nLooks up a localized string similar to Nothing is selected.. \n\n\nstability=1\n\n\nNumberNodeDescription\n\n\nLooks up a localized string similar to Creates a number.. \n\n\nstability=1\n\n\nObsoleteFileDescription\n\n\nLooks up a localized string similar to Your file '{0}' of version '{1}' cannot be opened by this version of Dynamo ({2}). \n\n\nstability=1\n\n\nObsoleteFileTitle\n\n\nLooks up a localized string similar to Obsolete File. \n\n\nstability=1\n\n\nOKButton\n\n\nLooks up a localized string similar to OK. \n\n\nstability=1\n\n\nOpeningHomeWorkspace\n\n\nLooks up a localized string similar to Opening home workspace {0}.... \n\n\nstability=1\n\n\nOpenWorkbenchError\n\n\nLooks up a localized string similar to There was an error opening the workbench.. \n\n\nstability=1\n\n\nOpenWorkspaceError\n\n\nLooks up a localized string similar to There was an error opening the workspace.. \n\n\nstability=1\n\n\nOutputLabel\n\n\nLooks up a localized string similar to OUTPUT. \n\n\nstability=1\n\n\nOutputNodeDescription\n\n\nLooks up a localized string similar to A function output, use with custom nodes. \n\n\nstability=1\n\n\nPackageEmpty\n\n\nLooks up a localized string similar to The package was found to be empty and was not installed.. \n\n\nstability=1\n\n\nPackageTooLarge\n\n\nLooks up a localized string similar to The package is too large! The package must be less than 15 MB!. \n\n\nstability=1\n\n\nPathNotRegconizableAsStableOrDailyBuild\n\n\nLooks up a localized string similar to The specified file path is not recognizable as a stable or a daily build. \n\n\nstability=1\n\n\nPortDataFunctionOutputToolTip\n\n\nLooks up a localized string similar to function output. \n\n\nstability=1\n\n\nPortDataInputToolTip\n\n\nLooks up a localized string similar to Input #{0}. \n\n\nstability=1\n\n\nPortDataOutputToolTip\n\n\nLooks up a localized string similar to Output #{0}. \n\n\nstability=1\n\n\nPortDataParameterToolTip\n\n\nLooks up a localized string similar to parameter. \n\n\nstability=1\n\n\nPortDataPathToFileToolTip\n\n\nLooks up a localized string similar to Path to the file. \n\n\nstability=1\n\n\nPortDataReturnValueToolTip\n\n\nLooks up a localized string similar to return value. \n\n\nstability=1\n\n\nPortDataSymbolToolTip\n\n\nLooks up a localized string similar to Symbol. \n\n\nstability=1\n\n\nPortDataVariableToolTip\n\n\nLooks up a localized string similar to variable. \n\n\nstability=1\n\n\nProceedButton\n\n\nLooks up a localized string similar to Proceed anyway. \n\n\nstability=1\n\n\nRangeEndCouldNotBeParsed\n\n\nLooks up a localized string similar to Range end could not be parsed.. \n\n\nstability=1\n\n\nRangeOrApprIdentifierAlrUsed\n\n\nLooks up a localized string similar to Cannot use range or approx. identifier on increment field when one has already been used to specify a count.. \n\n\nstability=1\n\n\nRangePortDataAmountToolTip\n\n\nLooks up a localized string similar to Amount of numbers in the sequence. \n\n\nstability=1\n\n\nRangePortDataEndToolTip\n\n\nLooks up a localized string similar to Number or letter to end the sequence at. \n\n\nstability=1\n\n\nRangePortDataSeqToolTip\n\n\nLooks up a localized string similar to New sequence. \n\n\nstability=1\n\n\nRangePortDataStartToolTip\n\n\nLooks up a localized string similar to Number or letter to start the sequence at. \n\n\nstability=1\n\n\nRangePortDataStepToolTip\n\n\nLooks up a localized string similar to Space between numbers or letters. \n\n\nstability=1\n\n\nRangeStepCouldNotBeParsed\n\n\nLooks up a localized string similar to Range step could not be parsed.. \n\n\nstability=1\n\n\nRangeValuesGreaterThanZero\n\n\nLooks up a localized string similar to Range values must be greater than zero.. \n\n\nstability=1\n\n\nRemoveLabel\n\n\nLooks up a localized string similar to Remove. \n\n\nstability=1\n\n\nRequestingVersionUpdate\n\n\nLooks up a localized string similar to Requesting version update info.... \n\n\nstability=1\n\n\nRunTypeToolTipAutomatically\n\n\nLooks up a localized string similar to Run whenever an input to the graph is updated.. \n\n\nstability=1\n\n\nRunTypeToolTipManually\n\n\nLooks up a localized string similar to Run when you click the Run button.. \n\n\nstability=1\n\n\nRunTypeToolTipPeriodicallyDisabled\n\n\nLooks up a localized string similar to Run Periodic is only available when there are nodes in the graph that support periodic update.. \n\n\nstability=1\n\n\nRunTypeToolTipPeriodicallyEnabled\n\n\nLooks up a localized string similar to Run at the specified interval.. \n\n\nstability=1\n\n\nSavingInProgress\n\n\nLooks up a localized string similar to Saving {0} .... \n\n\nstability=1\n\n\nSearchTextBlockText\n\n\nLooks up a localized string similar to SEARCH LIBRARY. \n\n\nstability=1\n\n\nStringNodeDescription\n\n\nLooks up a localized string similar to Creates a string.. \n\n\nstability=1\n\n\nSublistPortDataResultToolTip\n\n\nLooks up a localized string similar to The sublists.. \n\n\nstability=1\n\n\nSublistsPortDataListToolTip\n\n\nLooks up a localized string similar to The list from which to create sublists.. \n\n\nstability=1\n\n\nSublistsPortDataOffsetToolTip\n\n\nLooks up a localized string similar to The offset to apply to the sub-list. Ex. The range \"0..2\" with an offset of 1 will yield sublists {0,1,2}{1,2,3}{2,3,4}.... \n\n\nstability=1\n\n\nSubmitBugButton\n\n\nLooks up a localized string similar to Submit Bug To Github. \n\n\nstability=1\n\n\nSubmitBugToGithub\n\n\nLooks up a localized string similar to Submit Bug To Github. \n\n\nstability=1\n\n\nSymbolNodeDescription\n\n\nLooks up a localized string similar to A function parameter, use with custom nodes. You can specify the type and default value for parameter. E.g., input : var[]..[] value : bool = false. \n\n\nstability=1\n\n\nSymbolSearchTags\n\n\nLooks up a localized string similar to variable;argument;parameter. \n\n\nstability=1\n\n\nToolTipForTempVar\n\n\nLooks up a localized string similar to Statement Output. \n\n\nstability=1\n\n\nToolTipFunctionOutput\n\n\nLooks up a localized string similar to function output. \n\n\nstability=1\n\n\nToolTipInput\n\n\nLooks up a localized string similar to Input #. \n\n\nstability=1\n\n\nToolTipOutput\n\n\nLooks up a localized string similar to Output #. \n\n\nstability=1\n\n\nToolTipReturnValue\n\n\nLooks up a localized string similar to return value. \n\n\nstability=1\n\n\nToolTipSymbol\n\n\nLooks up a localized string similar to Symbol. \n\n\nstability=1\n\n\nTopResult\n\n\nLooks up a localized string similar to Top Result. \n\n\nstability=1\n\n\nUnableToCreateCustomNodeID\n\n\nLooks up a localized string similar to Unable to create instance of custom node with id: \\\". \n\n\nstability=1\n\n\nUnhandledExceptionInDynamoEngine\n\n\nLooks up a localized string similar to Unhandled exception in Dynamo engine. \n\n\nstability=1\n\n\nUnhandledExceptionSummary\n\n\nLooks up a localized string similar to Unhandled exception in Dynamo engine. \n\n\nstability=1\n\n\nUnhandledExceptionTitle\n\n\nLooks up a localized string similar to Unhandled Exception. \n\n\nstability=1\n\n\nUnknownVersion\n\n\nLooks up a localized string similar to Unknown. \n\n\nstability=1\n\n\nUpdateAvailable\n\n\nLooks up a localized string similar to Update available: {0}. \n\n\nstability=1\n\n\nUpdateDownloadComplete\n\n\nLooks up a localized string similar to Update download complete.. \n\n\nstability=1\n\n\nUpdateDownloadProgress\n\n\nLooks up a localized string similar to Update download progress: {0}%. \n\n\nstability=1\n\n\nUpdateDownloadStarted\n\n\nLooks up a localized string similar to Update download started.... \n\n\nstability=1\n\n\nUsageReportingErrorMessage\n\n\nLooks up a localized string similar to Uh oh... We're sorry - we tried to save your decisions, but something went wrong. The decision probably hasn't been saved. This really shouldn't have happened. Please get in touch via GitHub and send us this information. You can also try deleting [FILEPATH] and trying again. Depending on your previous choice, instrumentation may still be running, if you're worried about this, please consider not using Dynamo until we've got back to you to solve the problem. Sorry about that.. \n\n\nstability=1\n\n\nWarningCannotFindType\n\n\nLooks up a localized string similar to Cannot find type '{0}'. \n\n\nstability=1\n\n\nWarningInvalidInput\n\n\nLooks up a localized string similar to Invalid input. The name of parameter should start with alphabetic character. You can specify its type and default value. E.g., input : var[]..[] value: bool = false. \n\n\nstability=1\n\n\nWatermarkLabelText\n\n\nLooks up a localized string similar to Your code goes here. \n\n\nstability=1\n\n\nWelcomeMessage\n\n\nLooks up a localized string similar to Welcome to Dynamo!. \n\n\nstability=1\n\n\nWorkbenchNotOpen\n\n\nLooks up a localized string similar to Workbench could not be opened.. \n\n\nstability=1\n\n\nEvents:", 
            "title": "Resources"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/#resources_1", 
            "text": "A strongly-typed resource class, for looking up localized strings, etc.", 
            "title": "Resources"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/#properties", 
            "text": "ResourceManager  Returns the cached ResourceManager instance used by this class.   stability=1  Culture  Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class.   stability=1  ArggOKButton  Looks up a localized string similar to Arrrrg, ok.   stability=1  BackUpOriginalFileMessage  Looks up a localized string similar to Original file '{0}' gets backed up at '{1}'.   stability=1  BadIdentifierSyntax  Looks up a localized string similar to Bad identifier syntax: \"{0}\".   stability=1  BadRangeSyntax  Looks up a localized string similar to Bad range syntax: not of format \\\"start..end[..(increment|#count)]\\\".   stability=1  BuildSublistsDescription  Looks up a localized string similar to Build sublists from a list using DesignScript range syntax..   stability=1  ButtonDownloadLastest  Looks up a localized string similar to Download latest version.   stability=1  ButtonProcess  Looks up a localized string similar to Proceed anyway.   stability=1  CancelButton  Looks up a localized string similar to Cancel.   stability=1  CannotHave0Step  Looks up a localized string similar to Can't have 0 step..   stability=1  CannotOpenFile  Looks up a localized string similar to Your file cannot be opened.   stability=1  ClearingWorkflow  Looks up a localized string similar to Clearing workflow....   stability=1  ClearingWorkSpace  Looks up a localized string similar to Clearing workspace....   stability=1  CodeBlockDescription  Looks up a localized string similar to Allows for DesignScript code to be authored directly.   stability=1  CodeBlockNodeDescription  Looks up a localized string similar to Allows for DesignScript code to be authored directly.   stability=1  CodeBlockSearchTags  Looks up a localized string similar to codeblock;.   stability=1  ComposeFunctionNodeDescription  Looks up a localized string similar to Composes two single parameter functions into one function..   stability=1  ComposeFunctionPortDataFunctionToolTip  Looks up a localized string similar to A Function.   stability=1  ComposeFunctionPortDataResultToolTip  Looks up a localized string similar to Composed function: g(f(x)).   stability=1  CouldNotCompressFile  Looks up a localized string similar to Could not compress file. Is the file in use?.   stability=1  CouldNotGetLatestBuild  Looks up a localized string similar to Couldn't get the latest build from S3.   stability=1  CouldNotGetUpdateData  Looks up a localized string similar to Couldn't get update data from {0}.   stability=1  CouldNotLoadTypes  Looks up a localized string similar to Could not load types..   stability=1  CouldNotRepairOneNodeHoles  Looks up a localized string similar to Could not repair 1-node holes.   stability=1  CreatingConnectorError  Looks up a localized string similar to ERROR : Could not create connector between {0} and {1}..   stability=1  CustomNodeCouldNotBeInitialized  Looks up a localized string similar to Custom node \\\"{0}\\\" could not be initialized..   stability=1  CustomNodeDesciption  Looks up a localized string similar to Instance of a Custom Node.   stability=1  CustomNodeFolderLoadFailure  Looks up a localized string similar to Failed to load custom node directory. Do you have permission to access {0}?.   stability=1  CustomNodeNotLoaded  Looks up a localized string similar to Custom node definition is not loaded!.   stability=1  DefaultCustomNodeCategory  Looks up a localized string similar to Custom nodes.   stability=1  DefaultValue  Looks up a localized string similar to Default value.   stability=1  DefaultValueDisabled  Looks up a localized string similar to (disabled).   stability=1  DisplayEngineFailureMessageDescription  Looks up a localized string similar to The virtual machine that powers Dynamo is experiencing some unexpected errors internally and is likely \"having great difficulties pulling itself together. It is \"recommended that you save your work now and reload the file. Giving the Dynamo VM a new lease of life can potentially make it feel happier and behave better. If you don't mind, it would be helpful for you to send us your file. That will make it quicker for us to get these issues fixed..   stability=1  DllLoadException  Looks up a localized string similar to Dll Load Exception:.   stability=1  DownloadLatestButton  Looks up a localized string similar to Download latest version.   stability=1  DSFunctionNodeDescription  Looks up a localized string similar to DesignScript Builtin Functions.   stability=1  DulicatedPackage  Looks up a localized string similar to A duplicate of the package called {0} was found at {1}. Ignoring it..   stability=1  DummyNodeDescription  Looks up a localized string similar to This is an obsolete node.   stability=1  DuplicateMigrationTypeRegistered  Looks up a localized string similar to Duplicate migration type registered for {0}.   stability=1  DynamoUpToDate  Looks up a localized string similar to Dynamo is up to date..   stability=1  ElapsedWhenLoadingXml  Looks up a localized string similar to {0} elapsed for loading xml..   stability=1  EvaluationCompleted  Looks up a localized string similar to Evaluation completed in {0}.   stability=1  ExceptionEncountered  Looks up a localized string similar to Exception encountered scanning the package directory at {0}.   stability=1  FailedToGetMirrorVariable  Looks up a localized string similar to Failed to get mirror for variable: {0}; reason: {1}..   stability=1  FailedToLoad  Looks up a localized string similar to Failed to load {0}\\n, Exception: {1}.   stability=1  FailedToLoadCustomNode  Looks up a localized string similar to Failed to load custom node: {0}. Replacing with proxy custom node..   stability=1  FailedToLoadHeader  Looks up a localized string similar to ERROR: The header for the custom node at {0} failed to load. It will be left out of search..   stability=1  FailedToLoadType  Looks up a localized string similar to Failed to load type from {0}. The type was {1}..   stability=1  FailedToSave  Looks up a localized string similar to Failed to save {0}\\n, Exception: {1}.   stability=1  FileBackUpLocation  Looks up a localized string similar to Original file '{0}' gets backed up at '{1}'.   stability=1  FileCannotBeOpened  Looks up a localized string similar to Your file cannot be opened..   stability=1  FileNotOpenedCorrectly  Looks up a localized string similar to Your file may not open correctly.   stability=1  FunctionDescription  Looks up a localized string similar to Instance of a Custom Node.   stability=1  FunctionNodeDescription  Looks up a localized string similar to DesignScript Builtin Functions.   stability=1  FutureFileDescription  Looks up a localized string similar to Your file '{0}' was created in future version '{1}' and may not open correctly in your installed version of Dynamo '{2}'.   stability=1  FutureFileSummary  Looks up a localized string similar to Your file may not open correctly.   stability=1  FutureFileTitle  Looks up a localized string similar to Future File.   stability=1  GoodByeLog  Looks up a localized string similar to Goodbye.   stability=1  GroupDefaultText  Looks up a localized string similar to  .   stability=1  HeaderAction  Looks up a localized string similar to ACTIONS.   stability=1  HeaderCreate  Looks up a localized string similar to CREATE.   stability=1  HeaderQuery  Looks up a localized string similar to QUERY.   stability=1  IdentifiersNotFound  Looks up a localized string similar to No identifiers found..   stability=1  IncompatibleOfFileAndDynamo  Looks up a localized string similar to Your file '{0}' of version '{1}' cannot be opened by this version of Dynamo ({2}).   stability=1  IncorrectlyFormattedNodeLibraryDisplay  Looks up a localized string similar to This is the incorrectly formatted library name:.   stability=1  IncorrectlyFormattedNodeLibraryWarning  Looks up a localized string similar to Incorrectly formatted package node library encountered, this may result in a package assembly not being loaded!.   stability=1  IncorrectVersionToOpenFile  Looks up a localized string similar to Your file '{0}' was created in future version '{1}' and may not open correctly in your installed version of Dynamo '{2}'.   stability=1  InputLabel  Looks up a localized string similar to INPUT.   stability=1  InputNodeDescription  Looks up a localized string similar to A function parameter, use with custom nodes.   stability=1  InputNodeSearchTags  Looks up a localized string similar to variable;argument;parameter.   stability=1  InvalidCustomNodeFolderWarning  Looks up a localized string similar to The folder '{0}' does not exist.   stability=1  InvalidLibraryFormat  Looks up a localized string similar to Invalid library format..   stability=1  InvalidStartOrEndOfRange  Looks up a localized string similar to The start or end of a range is greater than the number of available elements in the list..   stability=1  LibraryBuildError  Looks up a localized string similar to Build error for library: {0}.   stability=1  LibraryHasBeenLoaded  Looks up a localized string similar to Library {0} has been loaded..   stability=1  LibraryIsDumped  Looks up a localized string similar to Library is dumped to \\\"{0}\\\"..   stability=1  LibraryPathCannotBeFound  Looks up a localized string similar to Cannot find library path: {0}..   stability=1  LoadingNodeDefinition  Looks up a localized string similar to Loading node definition for \"{0}\" from: {1}.   stability=1  LocateInDisk  Looks up a localized string similar to Locate in Disk...   stability=1  MalformedHeaderPackage  Looks up a localized string similar to {0} contains a package with a malformed header. Ignoring it..   stability=1  MoreButtonTextFormat  Looks up a localized string similar to SHOW MORE ({0}).   stability=1  MoveLabel  Looks up a localized string similar to Move.   stability=1  NewNoteString  Looks up a localized string similar to New Note.   stability=1  NoBinFolder  Looks up a localized string similar to {0} contains a package without a bin folder. Ignoring it..   stability=1  NodeProblemEncountered  Looks up a localized string similar to Whilst preparing to run, this node encountered a problem. Please talk to the creators of the node, and give them this message:.   stability=1  NoDescriptionAvailable  Looks up a localized string similar to No description available.   stability=1  NoHeaderPackage  Looks up a localized string similar to {0} contains a package without a header. Ignoring it..   stability=1  NoMatchesFound  Looks up a localized string similar to No matches found.   stability=1  NothingIsSelectedWarning  Looks up a localized string similar to Nothing is selected..   stability=1  NumberNodeDescription  Looks up a localized string similar to Creates a number..   stability=1  ObsoleteFileDescription  Looks up a localized string similar to Your file '{0}' of version '{1}' cannot be opened by this version of Dynamo ({2}).   stability=1  ObsoleteFileTitle  Looks up a localized string similar to Obsolete File.   stability=1  OKButton  Looks up a localized string similar to OK.   stability=1  OpeningHomeWorkspace  Looks up a localized string similar to Opening home workspace {0}....   stability=1  OpenWorkbenchError  Looks up a localized string similar to There was an error opening the workbench..   stability=1  OpenWorkspaceError  Looks up a localized string similar to There was an error opening the workspace..   stability=1  OutputLabel  Looks up a localized string similar to OUTPUT.   stability=1  OutputNodeDescription  Looks up a localized string similar to A function output, use with custom nodes.   stability=1  PackageEmpty  Looks up a localized string similar to The package was found to be empty and was not installed..   stability=1  PackageTooLarge  Looks up a localized string similar to The package is too large! The package must be less than 15 MB!.   stability=1  PathNotRegconizableAsStableOrDailyBuild  Looks up a localized string similar to The specified file path is not recognizable as a stable or a daily build.   stability=1  PortDataFunctionOutputToolTip  Looks up a localized string similar to function output.   stability=1  PortDataInputToolTip  Looks up a localized string similar to Input #{0}.   stability=1  PortDataOutputToolTip  Looks up a localized string similar to Output #{0}.   stability=1  PortDataParameterToolTip  Looks up a localized string similar to parameter.   stability=1  PortDataPathToFileToolTip  Looks up a localized string similar to Path to the file.   stability=1  PortDataReturnValueToolTip  Looks up a localized string similar to return value.   stability=1  PortDataSymbolToolTip  Looks up a localized string similar to Symbol.   stability=1  PortDataVariableToolTip  Looks up a localized string similar to variable.   stability=1  ProceedButton  Looks up a localized string similar to Proceed anyway.   stability=1  RangeEndCouldNotBeParsed  Looks up a localized string similar to Range end could not be parsed..   stability=1  RangeOrApprIdentifierAlrUsed  Looks up a localized string similar to Cannot use range or approx. identifier on increment field when one has already been used to specify a count..   stability=1  RangePortDataAmountToolTip  Looks up a localized string similar to Amount of numbers in the sequence.   stability=1  RangePortDataEndToolTip  Looks up a localized string similar to Number or letter to end the sequence at.   stability=1  RangePortDataSeqToolTip  Looks up a localized string similar to New sequence.   stability=1  RangePortDataStartToolTip  Looks up a localized string similar to Number or letter to start the sequence at.   stability=1  RangePortDataStepToolTip  Looks up a localized string similar to Space between numbers or letters.   stability=1  RangeStepCouldNotBeParsed  Looks up a localized string similar to Range step could not be parsed..   stability=1  RangeValuesGreaterThanZero  Looks up a localized string similar to Range values must be greater than zero..   stability=1  RemoveLabel  Looks up a localized string similar to Remove.   stability=1  RequestingVersionUpdate  Looks up a localized string similar to Requesting version update info....   stability=1  RunTypeToolTipAutomatically  Looks up a localized string similar to Run whenever an input to the graph is updated..   stability=1  RunTypeToolTipManually  Looks up a localized string similar to Run when you click the Run button..   stability=1  RunTypeToolTipPeriodicallyDisabled  Looks up a localized string similar to Run Periodic is only available when there are nodes in the graph that support periodic update..   stability=1  RunTypeToolTipPeriodicallyEnabled  Looks up a localized string similar to Run at the specified interval..   stability=1  SavingInProgress  Looks up a localized string similar to Saving {0} ....   stability=1  SearchTextBlockText  Looks up a localized string similar to SEARCH LIBRARY.   stability=1  StringNodeDescription  Looks up a localized string similar to Creates a string..   stability=1  SublistPortDataResultToolTip  Looks up a localized string similar to The sublists..   stability=1  SublistsPortDataListToolTip  Looks up a localized string similar to The list from which to create sublists..   stability=1  SublistsPortDataOffsetToolTip  Looks up a localized string similar to The offset to apply to the sub-list. Ex. The range \"0..2\" with an offset of 1 will yield sublists {0,1,2}{1,2,3}{2,3,4}....   stability=1  SubmitBugButton  Looks up a localized string similar to Submit Bug To Github.   stability=1  SubmitBugToGithub  Looks up a localized string similar to Submit Bug To Github.   stability=1  SymbolNodeDescription  Looks up a localized string similar to A function parameter, use with custom nodes. You can specify the type and default value for parameter. E.g., input : var[]..[] value : bool = false.   stability=1  SymbolSearchTags  Looks up a localized string similar to variable;argument;parameter.   stability=1  ToolTipForTempVar  Looks up a localized string similar to Statement Output.   stability=1  ToolTipFunctionOutput  Looks up a localized string similar to function output.   stability=1  ToolTipInput  Looks up a localized string similar to Input #.   stability=1  ToolTipOutput  Looks up a localized string similar to Output #.   stability=1  ToolTipReturnValue  Looks up a localized string similar to return value.   stability=1  ToolTipSymbol  Looks up a localized string similar to Symbol.   stability=1  TopResult  Looks up a localized string similar to Top Result.   stability=1  UnableToCreateCustomNodeID  Looks up a localized string similar to Unable to create instance of custom node with id: \\\".   stability=1  UnhandledExceptionInDynamoEngine  Looks up a localized string similar to Unhandled exception in Dynamo engine.   stability=1  UnhandledExceptionSummary  Looks up a localized string similar to Unhandled exception in Dynamo engine.   stability=1  UnhandledExceptionTitle  Looks up a localized string similar to Unhandled Exception.   stability=1  UnknownVersion  Looks up a localized string similar to Unknown.   stability=1  UpdateAvailable  Looks up a localized string similar to Update available: {0}.   stability=1  UpdateDownloadComplete  Looks up a localized string similar to Update download complete..   stability=1  UpdateDownloadProgress  Looks up a localized string similar to Update download progress: {0}%.   stability=1  UpdateDownloadStarted  Looks up a localized string similar to Update download started....   stability=1  UsageReportingErrorMessage  Looks up a localized string similar to Uh oh... We're sorry - we tried to save your decisions, but something went wrong. The decision probably hasn't been saved. This really shouldn't have happened. Please get in touch via GitHub and send us this information. You can also try deleting [FILEPATH] and trying again. Depending on your previous choice, instrumentation may still be running, if you're worried about this, please consider not using Dynamo until we've got back to you to solve the problem. Sorry about that..   stability=1  WarningCannotFindType  Looks up a localized string similar to Cannot find type '{0}'.   stability=1  WarningInvalidInput  Looks up a localized string similar to Invalid input. The name of parameter should start with alphabetic character. You can specify its type and default value. E.g., input : var[]..[] value: bool = false.   stability=1  WatermarkLabelText  Looks up a localized string similar to Your code goes here.   stability=1  WelcomeMessage  Looks up a localized string similar to Welcome to Dynamo!.   stability=1  WorkbenchNotOpen  Looks up a localized string similar to Workbench could not be opened..", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Properties/Resources/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/BrowserInternalElement/", 
            "text": "BrowserInternalElement\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "BrowserInternalElement"
        }, 
        {
            "location": "/Dynamo_Search/BrowserInternalElement/#browserinternalelement", 
            "text": "", 
            "title": "BrowserInternalElement"
        }, 
        {
            "location": "/Dynamo_Search/BrowserInternalElement/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/BrowserInternalElement/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/BrowserInternalElement/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/", 
            "text": "BrowserItem\n\n\n\n\nMethods:\n\n\nDynamo.Search.BrowserItem.CollapseToLeaves()\n\n\nCollapse element and all its children \n\n\nstability=1\n\n\nDynamo.Search.BrowserItem.SetVisibilityToLeaves()\n\n\nHide element and all its children \n\n\nstability=1\n\n\nProperties:\n\n\nName\n\n\nA name (title) field for the BrowserItem \n\n\nstability=1\n\n\nEvents:", 
            "title": "BrowserItem"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/#browseritem", 
            "text": "", 
            "title": "BrowserItem"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/#methods", 
            "text": "Dynamo.Search.BrowserItem.CollapseToLeaves()  Collapse element and all its children   stability=1  Dynamo.Search.BrowserItem.SetVisibilityToLeaves()  Hide element and all its children", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/#properties", 
            "text": "Name  A name (title) field for the BrowserItem", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search/BrowserItem/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/ElementTypes/", 
            "text": "ElementTypes\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ElementTypes"
        }, 
        {
            "location": "/Dynamo_Search/ElementTypes/#elementtypes", 
            "text": "", 
            "title": "ElementTypes"
        }, 
        {
            "location": "/Dynamo_Search/ElementTypes/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/ElementTypes/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/ElementTypes/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/", 
            "text": "NodeSearchModel\n\n\nNodeSearchModel\n\n\nSearchable library of NodeSearchElements that can produce NodeModels. \n\n\n\n\nMethods:\n\n\nDynamo.Search.NodeSearchModel.DumpLibraryToXml(String fileName)\n\n\nDumps the contents of search into an Xml file. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfileName:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Search.NodeSearchModel.ComposeXmlForLibrary()\n\n\nSerializes the contents of search into Xml. \n\n\nReturns: \n\n\nstability=1\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeSearchModel"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/#nodesearchmodel", 
            "text": "", 
            "title": "NodeSearchModel"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/#nodesearchmodel_1", 
            "text": "Searchable library of NodeSearchElements that can produce NodeModels.", 
            "title": "NodeSearchModel"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/#methods", 
            "text": "Dynamo.Search.NodeSearchModel.DumpLibraryToXml(String fileName)  Dumps the contents of search into an Xml file.      Name  Description      fileName:      stability=1  Dynamo.Search.NodeSearchModel.ComposeXmlForLibrary()  Serializes the contents of search into Xml.   Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/NodeSearchModel/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/SearchCategoryUtil/", 
            "text": "SearchCategoryUtil\n\n\nSearchCategoryUtil\n\n\nUtility methods for categorizing search elements. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "SearchCategoryUtil"
        }, 
        {
            "location": "/Dynamo_Search/SearchCategoryUtil/#searchcategoryutil", 
            "text": "", 
            "title": "SearchCategoryUtil"
        }, 
        {
            "location": "/Dynamo_Search/SearchCategoryUtil/#searchcategoryutil_1", 
            "text": "Utility methods for categorizing search elements.", 
            "title": "SearchCategoryUtil"
        }, 
        {
            "location": "/Dynamo_Search/SearchCategoryUtil/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/SearchCategoryUtil/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/SearchCategoryUtil/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/", 
            "text": "SearchDictionary`1\n\n\nSearchDictionary`1\n\n\nA dictionary of objects for search \n\n\n\n\nMethods:\n\n\nDynamo.Search.SearchDictionary`1.ByTag(String tag)\n\n\nGet the elements with a given tag \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntag:\n\n\nThe tag to match\n\n\n\n\n\n\nReturns:  The elements with the given tag\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Search.SearchDictionary`1.Search(String query,Int32 minResultsForTolerantSearch)\n\n\nSearch for elements in the dictionary based on the query \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquery:\n\n\nThe query\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nminResultsForTolerantSearch:\n\n\nMinimum number of results in the original search strategy to justify doing more tolerant search\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nSearchEntries\n\n\nAll the current entries in search. \n\n\nstability=1\n\n\nNumTags\n\n\nThe number of tags in the dictionary \n\n\nstability=1\n\n\nNumElements\n\n\nThe number of elements in the dictionary \n\n\nstability=1\n\n\nEvents:", 
            "title": "SearchDictionary`1"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#searchdictionary1", 
            "text": "", 
            "title": "SearchDictionary`1"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#searchdictionary1_1", 
            "text": "A dictionary of objects for search", 
            "title": "SearchDictionary`1"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#methods", 
            "text": "Dynamo.Search.SearchDictionary`1.ByTag(String tag)  Get the elements with a given tag      Name  Description      tag:  The tag to match    Returns:  The elements with the given tag      stability=1  Dynamo.Search.SearchDictionary`1.Search(String query,Int32 minResultsForTolerantSearch)  Search for elements in the dictionary based on the query      Name  Description      query:  The query    Name  Description    -----  ------    minResultsForTolerantSearch:  Minimum number of results in the original search strategy to justify doing more tolerant search", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#properties", 
            "text": "SearchEntries  All the current entries in search.   stability=1  NumTags  The number of tags in the dictionary   stability=1  NumElements  The number of elements in the dictionary", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search/SearchDictionary`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/SearchElementGroup/", 
            "text": "SearchElementGroup\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "SearchElementGroup"
        }, 
        {
            "location": "/Dynamo_Search/SearchElementGroup/#searchelementgroup", 
            "text": "", 
            "title": "SearchElementGroup"
        }, 
        {
            "location": "/Dynamo_Search/SearchElementGroup/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/SearchElementGroup/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/SearchElementGroup/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/", 
            "text": "SearchLibrary`2\n\n\nSearchLibrary`2\n\n\nSearchable library of item sources. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:\n\n\nItemProduced\n\n\nProduces an item whenever a search element produces an item. \n\n\nstability=1", 
            "title": "SearchLibrary`2"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/#searchlibrary2", 
            "text": "", 
            "title": "SearchLibrary`2"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/#searchlibrary2_1", 
            "text": "Searchable library of item sources.", 
            "title": "SearchLibrary`2"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/#events", 
            "text": "ItemProduced  Produces an item whenever a search element produces an item.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search/SearchLibrary`2/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/", 
            "text": "ISearchCategory`1\n\n\nISearchCategory`1\n\n\nA search category. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nName\n\n\nThe name of this category. \n\n\nstability=1\n\n\nEntries\n\n\nEntries contained in this category. \n\n\nstability=1\n\n\nSubCategories\n\n\nSub-categories contained in this category \n\n\nstability=1\n\n\nEvents:", 
            "title": "ISearchCategory`1"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/#isearchcategory1", 
            "text": "", 
            "title": "ISearchCategory`1"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/#isearchcategory1_1", 
            "text": "A search category.", 
            "title": "ISearchCategory`1"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/#properties", 
            "text": "Name  The name of this category.   stability=1  Entries  Entries contained in this category.   stability=1  SubCategories  Sub-categories contained in this category", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchCategory`1/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/", 
            "text": "ISearchEntry\n\n\nISearchEntry\n\n\nHas a collection of strings that can be used to identifiy the instance in a search. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nName\n\n\nName of this search entry. \n\n\nstability=1\n\n\nSearchTags\n\n\nTags which can be used to search for this entry. \n\n\nstability=1\n\n\nSearchTagWeights\n\n\nEvery search tag should have weight. This weight will be taken into account during search. \n\n\nstability=1\n\n\nDescription\n\n\nDescription of this search entry. \n\n\nstability=1\n\n\nEvents:", 
            "title": "ISearchEntry"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/#isearchentry", 
            "text": "", 
            "title": "ISearchEntry"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/#isearchentry_1", 
            "text": "Has a collection of strings that can be used to identifiy the instance in a search.", 
            "title": "ISearchEntry"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/#properties", 
            "text": "Name  Name of this search entry.   stability=1  SearchTags  Tags which can be used to search for this entry.   stability=1  SearchTagWeights  Every search tag should have weight. This weight will be taken into account during search.   stability=1  Description  Description of this search entry.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_Interfaces/ISearchEntry/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CodeBlockNodeSearchElement/", 
            "text": "CodeBlockNodeSearchElement\n\n\nCodeBlockNodeSearchElement\n\n\nSearch element for Code Block nodes. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "CodeBlockNodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CodeBlockNodeSearchElement/#codeblocknodesearchelement", 
            "text": "", 
            "title": "CodeBlockNodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CodeBlockNodeSearchElement/#codeblocknodesearchelement_1", 
            "text": "Search element for Code Block nodes.", 
            "title": "CodeBlockNodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CodeBlockNodeSearchElement/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CodeBlockNodeSearchElement/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CodeBlockNodeSearchElement/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/", 
            "text": "CustomNodeSearchElement\n\n\nCustomNodeSearchElement\n\n\nSearch element for custom nodes. \n\n\n\n\nMethods:\n\n\nDynamo.Search.SearchElements.CustomNodeSearchElement.SyncWithCustomNodeInfo(\nCustomNodeInfo\n info)\n\n\nUpdates the properties of this search element. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninfo:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nPath\n\n\nPath to this custom node in disk, used in the Edit context menu. \n\n\nstability=1\n\n\nEvents:", 
            "title": "CustomNodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#customnodesearchelement", 
            "text": "", 
            "title": "CustomNodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#customnodesearchelement_1", 
            "text": "Search element for custom nodes.", 
            "title": "CustomNodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#methods", 
            "text": "Dynamo.Search.SearchElements.CustomNodeSearchElement.SyncWithCustomNodeInfo( CustomNodeInfo  info)  Updates the properties of this search element.      Name  Description      info:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#properties", 
            "text": "Path  Path to this custom node in disk, used in the Edit context menu.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/CustomNodeSearchElement/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/DragDropNodeSearchElementInfo/", 
            "text": "DragDropNodeSearchElementInfo\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "DragDropNodeSearchElementInfo"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/DragDropNodeSearchElementInfo/#dragdropnodesearchelementinfo", 
            "text": "", 
            "title": "DragDropNodeSearchElementInfo"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/DragDropNodeSearchElementInfo/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/DragDropNodeSearchElementInfo/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/DragDropNodeSearchElementInfo/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElement/", 
            "text": "NodeModelSearchElement\n\n\nNodeModelSearchElement\n\n\nSearch element for basic NodeModels. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeModelSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElement/#nodemodelsearchelement", 
            "text": "", 
            "title": "NodeModelSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElement/#nodemodelsearchelement_1", 
            "text": "Search element for basic NodeModels.", 
            "title": "NodeModelSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElement/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElement/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElement/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElementBase/", 
            "text": "NodeModelSearchElementBase\n\n\nNodeModelSearchElementBase\n\n\nBase class for node search elements that can be initialized from TypeLoadData. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "NodeModelSearchElementBase"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElementBase/#nodemodelsearchelementbase", 
            "text": "", 
            "title": "NodeModelSearchElementBase"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElementBase/#nodemodelsearchelementbase_1", 
            "text": "Base class for node search elements that can be initialized from TypeLoadData.", 
            "title": "NodeModelSearchElementBase"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElementBase/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElementBase/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeModelSearchElementBase/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/", 
            "text": "NodeSearchElement\n\n\nNodeSearchElement\n\n\nBase class for all Dynamo Node search elements. \n\n\n\n\nMethods:\n\n\nDynamo.Search.SearchElements.NodeSearchElement.SplitCategoryName(String categoryName)\n\n\nSplit a category name into individual category names splitting be DEFAULT_DELIMITER \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncategoryName:\n\n\nThe name\n\n\n\n\n\n\nReturns: A list of output\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.Search.SearchElements.NodeSearchElement.ProduceNode()\n\n\nProduces a new Node, via the ItemProduced event. \n\n\nstability=1\n\n\nProperties:\n\n\nIsVisibleInSearch\n\n\nSpecified whether or not this entry should appear in search. \n\n\nstability=1\n\n\nCreationName\n\n\nThe name that is used during node creation \n\n\nstability=1\n\n\nCategories\n\n\nList of nested categories this search element is contained in. \n\n\nstability=1\n\n\nFullName\n\n\nThe full name of entry which consists of category name and entry name. \n\n\nstability=1\n\n\nFullCategoryName\n\n\nThe category name of this node. \n\n\nstability=1\n\n\nName\n\n\nThe name of this entry as it appears in the library. \n\n\nstability=1\n\n\nParameters\n\n\nThe parameters of this entry, used for overloaded nodes. \n\n\nstability=1\n\n\nSearchKeywords\n\n\nCollection of keywords which can be used to search for this element. \n\n\nstability=1\n\n\nDescription\n\n\nDescription of the node. \n\n\nstability=1\n\n\nGroup\n\n\nGroup to which Node belongs to \n\n\nstability=1\n\n\nAssembly\n\n\nGroup to which Node belongs to \n\n\nstability=1\n\n\nElementType\n\n\nIndicates whether it is custom node or zero-touch element. And whether this element comes from package or not. \n\n\nstability=1\n\n\nEvents:\n\n\nItemProduced\n\n\nEvent fired when this search element produces a new NodeModel. This typically happens when it is selected in the library by the user. \n\n\nstability=1", 
            "title": "NodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#nodesearchelement", 
            "text": "", 
            "title": "NodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#nodesearchelement_1", 
            "text": "Base class for all Dynamo Node search elements.", 
            "title": "NodeSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#methods", 
            "text": "Dynamo.Search.SearchElements.NodeSearchElement.SplitCategoryName(String categoryName)  Split a category name into individual category names splitting be DEFAULT_DELIMITER      Name  Description      categoryName:  The name    Returns: A list of output      stability=1  Dynamo.Search.SearchElements.NodeSearchElement.ProduceNode()  Produces a new Node, via the ItemProduced event.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#properties", 
            "text": "IsVisibleInSearch  Specified whether or not this entry should appear in search.   stability=1  CreationName  The name that is used during node creation   stability=1  Categories  List of nested categories this search element is contained in.   stability=1  FullName  The full name of entry which consists of category name and entry name.   stability=1  FullCategoryName  The category name of this node.   stability=1  Name  The name of this entry as it appears in the library.   stability=1  Parameters  The parameters of this entry, used for overloaded nodes.   stability=1  SearchKeywords  Collection of keywords which can be used to search for this element.   stability=1  Description  Description of the node.   stability=1  Group  Group to which Node belongs to   stability=1  Assembly  Group to which Node belongs to   stability=1  ElementType  Indicates whether it is custom node or zero-touch element. And whether this element comes from package or not.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#events", 
            "text": "ItemProduced  Event fired when this search element produces a new NodeModel. This typically happens when it is selected in the library by the user.", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/NodeSearchElement/#stability1_2", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/", 
            "text": "SearchElementBase\n\n\nSearchElementBase\n\n\nA base class for elements found in search \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nCreationName\n\n\nThe name that is used during node creation \n\n\nstability=1\n\n\nSearchable\n\n\nSearchable property \n\n\nstability=1\n\n\nType\n\n\nType property \n\n\nstability=1\n\n\nDescription\n\n\nDescription property \n\n\nstability=1\n\n\nKeywords\n\n\nKeywords property\n\n\nstability=1\n\n\nWeight\n\n\nWeight property \n\n\nstability=1\n\n\nEvents:", 
            "title": "SearchElementBase"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/#searchelementbase", 
            "text": "", 
            "title": "SearchElementBase"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/#searchelementbase_1", 
            "text": "A base class for elements found in search", 
            "title": "SearchElementBase"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/#properties", 
            "text": "CreationName  The name that is used during node creation   stability=1  Searchable  Searchable property   stability=1  Type  Type property   stability=1  Description  Description property   stability=1  Keywords  Keywords property  stability=1  Weight  Weight property", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/SearchElementBase/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/", 
            "text": "ZeroTouchSearchElement\n\n\nZeroTouchSearchElement\n\n\nSearch element for a Zero Touch node (DSFunction / DSVarArgFunction) \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nCreationName\n\n\nThe name that is used during node creation \n\n\nstability=1\n\n\nEvents:", 
            "title": "ZeroTouchSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/#zerotouchsearchelement", 
            "text": "", 
            "title": "ZeroTouchSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/#zerotouchsearchelement_1", 
            "text": "Search element for a Zero Touch node (DSFunction / DSVarArgFunction)", 
            "title": "ZeroTouchSearchElement"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/#properties", 
            "text": "CreationName  The name that is used during node creation", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_Search_SearchElements/ZeroTouchSearchElement/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_Selection/ISelectable/", 
            "text": "ISelectable\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ISelectable"
        }, 
        {
            "location": "/Dynamo_Selection/ISelectable/#iselectable", 
            "text": "", 
            "title": "ISelectable"
        }, 
        {
            "location": "/Dynamo_Selection/ISelectable/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_Selection/ISelectable/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_Selection/ISelectable/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UI/Configurations/", 
            "text": "Configurations\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "Configurations"
        }, 
        {
            "location": "/Dynamo_UI/Configurations/#configurations", 
            "text": "", 
            "title": "Configurations"
        }, 
        {
            "location": "/Dynamo_UI/Configurations/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UI/Configurations/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UI/Configurations/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/AppVersionInfo/", 
            "text": "AppVersionInfo\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "AppVersionInfo"
        }, 
        {
            "location": "/Dynamo_UpdateManager/AppVersionInfo/#appversioninfo", 
            "text": "", 
            "title": "AppVersionInfo"
        }, 
        {
            "location": "/Dynamo_UpdateManager/AppVersionInfo/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/AppVersionInfo/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/AppVersionInfo/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/BinaryVersion/", 
            "text": "BinaryVersion\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "BinaryVersion"
        }, 
        {
            "location": "/Dynamo_UpdateManager/BinaryVersion/#binaryversion", 
            "text": "", 
            "title": "BinaryVersion"
        }, 
        {
            "location": "/Dynamo_UpdateManager/BinaryVersion/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/BinaryVersion/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/BinaryVersion/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAppVersionInfo/", 
            "text": "IAppVersionInfo\n\n\nIAppVersionInfo\n\n\nAn interface to describe available application update info. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IAppVersionInfo"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAppVersionInfo/#iappversioninfo", 
            "text": "", 
            "title": "IAppVersionInfo"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAppVersionInfo/#iappversioninfo_1", 
            "text": "An interface to describe available application update info.", 
            "title": "IAppVersionInfo"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAppVersionInfo/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAppVersionInfo/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAppVersionInfo/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAsynchronousRequest/", 
            "text": "IAsynchronousRequest\n\n\nIAsynchronousRequest\n\n\nAn interface to describe an asynchronous web request for update data. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IAsynchronousRequest"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAsynchronousRequest/#iasynchronousrequest", 
            "text": "", 
            "title": "IAsynchronousRequest"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAsynchronousRequest/#iasynchronousrequest_1", 
            "text": "An interface to describe an asynchronous web request for update data.", 
            "title": "IAsynchronousRequest"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAsynchronousRequest/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAsynchronousRequest/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IAsynchronousRequest/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/", 
            "text": "IDynamoLookUp\n\n\n\n\nMethods:\n\n\nDynamo.UpdateManager.IDynamoLookUp.GetDynamoInstallLocations()\n\n\nGets installation path for all version of this Dynamo Product installed on this system. \n\n\nstability=1\n\n\nProperties:\n\n\nLatestProduct\n\n\nGets the version of latest installed product \n\n\nstability=1\n\n\nEvents:", 
            "title": "IDynamoLookUp"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/#idynamolookup", 
            "text": "", 
            "title": "IDynamoLookUp"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/#methods", 
            "text": "Dynamo.UpdateManager.IDynamoLookUp.GetDynamoInstallLocations()  Gets installation path for all version of this Dynamo Product installed on this system.", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/#properties", 
            "text": "LatestProduct  Gets the version of latest installed product", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IDynamoLookUp/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManager/", 
            "text": "IUpdateManager\n\n\nIUpdateManager\n\n\nAn interface which describes properties and methods for updating the application. \n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "IUpdateManager"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManager/#iupdatemanager", 
            "text": "", 
            "title": "IUpdateManager"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManager/#iupdatemanager_1", 
            "text": "An interface which describes properties and methods for updating the application.", 
            "title": "IUpdateManager"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManager/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManager/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManager/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManagerConfiguration/", 
            "text": "IUpdateManagerConfiguration\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\nDownloadSourcePath\n\n\nDefines download location for new installer \n\n\nstability=1\n\n\nSignatureSourcePath\n\n\nDefines location for signature file to validate the new installer. \n\n\nstability=1\n\n\nCheckNewerDailyBuild\n\n\nDefines whether to consider daily builds for update, default is false. \n\n\nstability=1\n\n\nForceUpdate\n\n\nDefines whether to force update, default vlaue is false. \n\n\nstability=1\n\n\nInstallerNameBase\n\n\nGets the base name of the installer to be used for upgrade. \n\n\nstability=1\n\n\nDynamoLookUp\n\n\nGets IDynamoLookUp interface to search Dynamo installations on the system. \n\n\nstability=1\n\n\nEvents:", 
            "title": "IUpdateManagerConfiguration"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManagerConfiguration/#iupdatemanagerconfiguration", 
            "text": "", 
            "title": "IUpdateManagerConfiguration"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManagerConfiguration/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManagerConfiguration/#properties", 
            "text": "DownloadSourcePath  Defines download location for new installer   stability=1  SignatureSourcePath  Defines location for signature file to validate the new installer.   stability=1  CheckNewerDailyBuild  Defines whether to consider daily builds for update, default is false.   stability=1  ForceUpdate  Defines whether to force update, default vlaue is false.   stability=1  InstallerNameBase  Gets the base name of the installer to be used for upgrade.   stability=1  DynamoLookUp  Gets IDynamoLookUp interface to search Dynamo installations on the system.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManagerConfiguration/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_UpdateManager/IUpdateManagerConfiguration/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/ShutdownRequestedEventHandler/", 
            "text": "ShutdownRequestedEventHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "ShutdownRequestedEventHandler"
        }, 
        {
            "location": "/Dynamo_UpdateManager/ShutdownRequestedEventHandler/#shutdownrequestedeventhandler", 
            "text": "", 
            "title": "ShutdownRequestedEventHandler"
        }, 
        {
            "location": "/Dynamo_UpdateManager/ShutdownRequestedEventHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/ShutdownRequestedEventHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/ShutdownRequestedEventHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventArgs/", 
            "text": "UpdateDownloadedEventArgs\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "UpdateDownloadedEventArgs"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventArgs/#updatedownloadedeventargs", 
            "text": "", 
            "title": "UpdateDownloadedEventArgs"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventArgs/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventArgs/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventArgs/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventHandler/", 
            "text": "UpdateDownloadedEventHandler\n\n\n\n\nMethods:\n\n\n\n\nProperties:\n\n\n\n\nEvents:", 
            "title": "UpdateDownloadedEventHandler"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventHandler/#updatedownloadedeventhandler", 
            "text": "", 
            "title": "UpdateDownloadedEventHandler"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventHandler/#methods", 
            "text": "", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventHandler/#properties", 
            "text": "", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateDownloadedEventHandler/#events", 
            "text": "", 
            "title": "Events:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/", 
            "text": "UpdateManagerConfiguration\n\n\nUpdateManagerConfiguration\n\n\nDefines Update Manager Configuration settings. \n\n\n\n\nMethods:\n\n\nDynamo.UpdateManager.UpdateManagerConfiguration.Load(String filePath,\nIUpdateManager\n updateManager)\n\n\nLoads the configurations from given xml file. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilePath:\n\n\nXml file path that contains configuration details.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nupdateManager:\n\n\n\n\n\n\n\n\nReturns: UpdateManagerConfiguration\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.UpdateManager.UpdateManagerConfiguration.Save(String filePath,\nIUpdateManager\n updateManager)\n\n\nSaves this configuration to a given file in xml format. \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilePath:\n\n\nFile path to save this configuration.\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nupdateManager:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nDynamo.UpdateManager.UpdateManagerConfiguration.GetSettings(\nIDynamoLookUp\n lookUp,\nIUpdateManager\n updateManager)\n\n\nUtility method to get the settings \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlookUp:\n\n\nIDynamoLookUp instance\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n-----\n\n\n------\n\n\n\n\n\n\nupdateManager:\n\n\n\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nstability=1\n\n\nProperties:\n\n\nDownloadSourcePath\n\n\nDefines download location for new installer \n\n\nstability=1\n\n\nSignatureSourcePath\n\n\nDefines location for signature file to validate the new installer. \n\n\nstability=1\n\n\nCheckNewerDailyBuild\n\n\nDefines whether to consider daily builds for update, default is false. \n\n\nstability=1\n\n\nForceUpdate\n\n\nDefines whether to force update, default vlaue is false. \n\n\nstability=1\n\n\nInstallerNameBase\n\n\nGets the base name of the installer to be used for upgrade. \n\n\nstability=1\n\n\nConfigFilePath\n\n\nReturn file path for the overriding config file. \n\n\nstability=1\n\n\nEvents:", 
            "title": "UpdateManagerConfiguration"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#updatemanagerconfiguration", 
            "text": "", 
            "title": "UpdateManagerConfiguration"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#updatemanagerconfiguration_1", 
            "text": "Defines Update Manager Configuration settings.", 
            "title": "UpdateManagerConfiguration"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#methods", 
            "text": "Dynamo.UpdateManager.UpdateManagerConfiguration.Load(String filePath, IUpdateManager  updateManager)  Loads the configurations from given xml file.      Name  Description      filePath:  Xml file path that contains configuration details.    Name  Description    -----  ------    updateManager:     Returns: UpdateManagerConfiguration      stability=1  Dynamo.UpdateManager.UpdateManagerConfiguration.Save(String filePath, IUpdateManager  updateManager)  Saves this configuration to a given file in xml format.      Name  Description      filePath:  File path to save this configuration.    Name  Description    -----  ------    updateManager:      stability=1  Dynamo.UpdateManager.UpdateManagerConfiguration.GetSettings( IDynamoLookUp  lookUp, IUpdateManager  updateManager)  Utility method to get the settings      Name  Description      lookUp:  IDynamoLookUp instance    Name  Description    -----  ------    updateManager:     Returns:", 
            "title": "Methods:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#stability1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#properties", 
            "text": "DownloadSourcePath  Defines download location for new installer   stability=1  SignatureSourcePath  Defines location for signature file to validate the new installer.   stability=1  CheckNewerDailyBuild  Defines whether to consider daily builds for update, default is false.   stability=1  ForceUpdate  Defines whether to force update, default vlaue is false.   stability=1  InstallerNameBase  Gets the base name of the installer to be used for upgrade.   stability=1  ConfigFilePath  Return file path for the overriding config file.", 
            "title": "Properties:"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#stability1_1", 
            "text": "", 
            "title": "stability=1"
        }, 
        {
            "location": "/Dynamo_UpdateManager/UpdateManagerConfiguration/#events", 
            "text": "", 
            "title": "Events:"
        }
    ]
}